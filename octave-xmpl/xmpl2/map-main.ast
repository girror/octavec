Program([FunDec(VarDef("map_tb"),[],[],Stats([Subscript(Var("clear"),[String("all")]),Var("dump_open"),Var("global_settings"),Var("dvbt_send_init"),Var("dvbt_receive_init"),VarDef("DVBT_SETTINGS"),VarDef("DVBT_STATE_SENDER"),VarDef("DVBT_STATE_RECEIVER"),Assign(Var("m"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits")),Assign(Var("n"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"payload")),Subscript(Var("fprintf"),[String("generating data.\n")]),Assign(Var("x"),"=",Subscript(Var("round"),[Subscript(Var("rand"),[Var("n"),Var("m")])])),For(VarDef("ii"),Range(Int(1),Int(1),DataOp("^",[Int(2),Var("m")])),Stats([Assign(Var("val"),"=",Var("ii")),For(VarDef("jj"),Range(Int(1),Int(1),Var("m")),Stats([Ifs([ElseIf(DataOp("!=",[Subscript(Var("rem"),[Var("val"),Int(2)]),Int(0)]),Stats([Assign(Subscript(Var("x"),[Var("ii"),Var("jj")]),"=",Int(1))]))],Else(Stats([Assign(Subscript(Var("x"),[Var("ii"),Var("jj")]),"=",Int(0))]))),Assign(Var("val"),"=",Subscript(Var("floor"),[DataOp("/",[Var("val"),Int(2)])]))]))])),Subscript(Var("fprintf"),[String("mapping\n")]),Assign(Var("y"),"=",Subscript(Var("map"),[Var("x")])),Assign(Var("y1"),"=",DataOp("+",[Var("y"),DataOp("*",[Float(1.000000014901161e-01),DataOp("+",[Subscript(Var("randn"),[Var("n"),Int(1)]),DataOp("*",[Complex(Int(0),Int(1)),Subscript(Var("randn"),[Var("n"),Int(1)])])])])])),Subscript(Var("fprintf"),[String("demapping\n")]),Assign(Var("z1"),"=",Subscript(Var("demap"),[Var("y1")])),Assign(Var("z"),"=",DataOp(">=",[Var("z1"),Float(5.000000000000000e-01)])),Subscript(Var("fprintf"),[String("checking data:")]),Ifs([ElseIf(DataOp(">",[Subscript(Var("max"),[Subscript(Var("max"),[DataOp("-",[Var("z"),Var("x")])])]),DataOp("*",[Int(100),Var("eps")])]),Stats([Subscript(Var("fprintf"),[String(" error.\n")]),Var("dump_close"),Subscript(Var("error"),[String("error in mapper.\n")])]))],()),Subscript(Var("fprintf"),[String(" OK.\n")]),Var("dump_close"),Subscript(Var("fprintf"),[String("\n")]),Subscript(Var("fprintf"),[String("Mapper works.\n")])])),FunDec(VarDef("dump_open"),[],[],Stats([VarDef("DUMP"),Assign(Var("DUMP"),"=",Matrix([])),Var("config"),Assign(Pick(Var("DUMP"),"main"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/dvbt.txt")]]),String("w")])),Assign(Pick(Var("DUMP"),"sender"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/send.txt")]]),String("w")])),Assign(Pick(Var("DUMP"),"receiver"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/receive.txt")]]),String("w")])),Assign(Pick(Var("DUMP"),"channel"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/channel.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"scramble"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/scramble.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"descramble"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/descramble.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"rs_encode"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/rs_encode.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"rs_decode"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/rs_decode.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"outer_interleave"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/outer_interleave.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"outer_deinterleave"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/outer_deinterleave.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"convolutional_encode"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/convolutional_encode.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"convolutional_decode"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/convolutional_decode.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"puncturing"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/puncturing.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"depuncturing"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/depuncturing.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"inner_interleave"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/inner_interleave.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"inner_deinterleave"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/inner_deinterleave.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"map"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/map.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"demap"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/demap.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"insert_reference_signals"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/insert_reference_signals.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"remove_reference_signals"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/remove_reference_signals.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"ofdm_encode"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/ofdm_encode.dump")]]),String("w")])),Assign(Pick(Var("DUMP"),"ofdm_decode"),"=",Subscript(Var("my_fopen"),[Matrix([[Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),String("/ofdm_decode.dump")]]),String("w")]))])),FunDec(VarDef("config"),[],[],Stats([VarDef("DUMP"),Assign(Pick(Var("DUMP"),"SETTINGS"),"=",Matrix([])),Assign(Pick(Pick(Var("DUMP"),"SETTINGS"),"ref_dir"),"=",String("/home/karina/software/src/opendvb-0.3/ref")),Assign(Pick(Pick(Var("DUMP"),"SETTINGS"),"test_dir"),"=",String("/home/karina/software/src/opendvb-0.3/"))])),FunDec(VarDef("my_fopen"),[VarDef("filename"),VarDef("mode")],[VarDef("fid")],Stats([Switch(Var("computer"),[Case(String("PCWIN"),Stats([Assign(Var("filename"),"=",Subscript(Var("strrep"),[Var("filename"),String("/"),String("\\")]))]))],()),AssignMulti([Var("fid"),Var("msg")],"=",Subscript(Var("fopen"),[Var("filename"),Var("mode")])),Ifs([ElseIf(DataOp("==",[Var("fid"),Int(-1)]),Stats([Subscript(Var("fprintf"),[String("Cannot open file: %s\n"),Var("filename")]),Subscript(Var("fprintf"),[String("Reason: %s\n"),Var("msg")]),Subscript(Var("error"),[String("stop")])]))],())])),FunDec(VarDef("global_settings"),[],[],Stats([VarDef("DVBT_SETTINGS"),Assign(Var("DVBT_SETTINGS"),"=",Matrix([])),Assign(Var("ffffffff"),"=",Subscript(Var("flipud"),[Matrix([[Int(1),Int(2)]])])),Assign(Var("rrrrrrrr"),"=",Subscript(Var("rows"),[Matrix([[Int(1),Int(2)]])])),Assign(Var("ffxxxxxx"),"=",Subscript(Var("diff"),[Matrix([[Int(1),Int(2),Int(8)]]),Int(1)])),Assign(Var("ssss"),"=",String("/sdfd/ff")),Assign(Var("fooo"),"=",Subscript(Var("strrep"),[Var("ssss"),String("/"),String("\\")])),Assign(Var("rrrr"),"=",Subscript(Var("rem"),[Int(34),Int(4)])),Assign(Var("conv_code"),"=",Matrix([[Int(1),Int(1),Int(1),Int(1),Int(0),Int(0),Int(1)],[Int(1),Int(0),Int(1),Int(1),Int(0),Int(1),Int(1)]])),Assign(Pick(Var("code"),"g"),"=",Subscript(Var("make_trellis"),[Var("conv_code"),Int(0)])),AssignMulti([Var("A_ex"),Var("B_ex")],"=",Subscript(Var("scrambler_prbs"),[Int(1),Matrix([[Int(1),Int(0),Int(0),Int(1),Int(0),Int(1),Int(0),Int(1),Int(0),Int(0),Int(0),Int(0),Int(0),Int(0),Int(0)]])])),AssignMulti([Var("C_ex"),Var("D_ex"),Var("E_ex")],"=",Subscript(Var("conv_encoder"),[Matrix([[Int(1),Int(0),Int(0),Int(1),Int(0),Int(1),Int(0),Int(1),Int(0),Int(0),Int(0),Int(0),Int(0),Int(0),Int(0)]]),Matrix([[Int(1),Int(1),Int(0),Int(1),Int(1),Int(0),Int(1),Int(1)]]),Int(0),Int(0)])),Assign(Pick(Var("DVBT_SETTINGS"),"scrambler"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"sync_byte"),"=",Subscript(Var("hex2dec"),[String("47")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"inv_sync_byte"),"=",DataOp("-",[Int(255),Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"sync_byte")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"init_prbs_register"),"=",Matrix([[Int(1),Int(0),Int(0),Int(1),Int(0),Int(1),Int(0),Int(1),Int(0),Int(0),Int(0),Int(0),Int(0),Int(0),Int(0)]])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"prbs_period"),"=",Int(8)),Assign(Pick(Var("DVBT_SETTINGS"),"rs"),"=",Matrix([])),Subscript(Var("gf_init"),[Int(2),Int(8),Matrix([[Int(8),Int(4),Int(3),Int(2),Int(0)]])]),Subscript(Var("rs_init"),[Int(204),Int(188),Int(8)]),Assign(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"i"),"=",Int(12)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"m"),"=",Int(17)),Subscript(Var("assert"),[DataOp("==",[DataOp("*",[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"i"),Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"m")]),Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"n")]),String("outer_interleaver"),String("i*m should be n")]),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"queue_size"),"=",DataOp("*",[DataOp("^",[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"i"),Int(2)]),Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"m")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"init"),"=",String("zero")),Var("viterbi_init"),Assign(Pick(Var("DVBT_SETTINGS"),"puncturing"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"puncturing"),"mode"),"=",Float(6.666666865348816e-01)),Assign(Pick(Var("DVBT_SETTINGS"),"ofdm_mode"),"=",Int(2048)),Assign(Pick(Var("DVBT_SETTINGS"),"payload_carriers"),"=",Int(1512)),Assign(Pick(Var("DVBT_SETTINGS"),"used_carriers"),"=",Int(1705)),Assign(Pick(Var("DVBT_SETTINGS"),"symbols_per_frame"),"=",Int(68)),Assign(Pick(Var("DVBT_SETTINGS"),"frames_per_superframe"),"=",Int(4)),Assign(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"block_size"),"=",Int(126)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"groups"),"=",DataOp("/",[Pick(Var("DVBT_SETTINGS"),"ofdm_mode"),Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"block_size")])),Assign(Var("Nmax"),"=",Pick(Var("DVBT_SETTINGS"),"payload_carriers")),Assign(Var("Mmax"),"=",Pick(Var("DVBT_SETTINGS"),"ofdm_mode")),Assign(Var("Nr"),"=",Subscript(Var("log2"),[Var("Mmax")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"Hq"),"=",Subscript(Var("zeros"),[Var("Nmax"),Int(1)])),Assign(Var("qq"),"=",Int(0)),Switch(Pick(Var("DVBT_SETTINGS"),"ofdm_mode"),[Case(Int(2048),Stats([Assign(Var("perm_table"),"=",Matrix([[Int(4),Int(3),Int(9),Int(6),Int(2),Int(8),Int(1),Int(5),Int(7),Int(0)]]))])),Case(Int(8192),Stats([Assign(Var("perm_table"),"=",Matrix([[Int(7),Int(1),Int(4),Int(2),Int(9),Int(6),Int(8),Int(10),Int(0),Int(3),Int(11),Int(5)]]))]))],Stats([Stats([Subscript(Var("error"),[String("unsupported OFDM mode")])])])),For(VarDef("ii"),Range(Int(0),Int(1),DataOp("-",[Var("Mmax"),Int(1)])),Stats([Switch(Var("ii"),[Case(Int(0),Stats([Assign(Var("r1"),"=",Subscript(Var("zeros"),[Int(1),DataOp("-",[Var("Nr"),Int(1)])]))])),Case(Int(1),Stats([Assign(Var("r1"),"=",Subscript(Var("zeros"),[Int(1),DataOp("-",[Var("Nr"),Int(1)])]))])),Case(Int(2),Stats([Assign(Var("r1"),"=",Subscript(Var("zeros"),[Int(1),DataOp("-",[Var("Nr"),Int(1)])])),Assign(Subscript(Var("r1"),[Int(1)]),"=",Int(1))]))],Stats([Stats([Assign(Var("r1"),"=",Matrix([[Subscript(Var("r1"),[Range(Int(2),Int(1),DataOp("-",[Var("Nr"),Int(1)]))]),Subscript(Var("xor"),[Subscript(Var("r1"),[Int(1)]),Subscript(Var("r1"),[Int(4)])])]]))])])),Assign(Var("r"),"=",Subscript(Var("zeros"),[Int(1),DataOp("-",[Var("Nr"),Int(1)])])),For(VarDef("k"),Range(Int(0),Int(1),DataOp("-",[Var("Nr"),Int(2)])),Stats([Assign(Subscript(Var("r"),[DataOp("+",[Int(1),Subscript(Var("perm_table"),[DataOp("+",[Int(1),Var("k")])])])]),"=",Subscript(Var("r1"),[DataOp("+",[Int(1),Var("k")])]))])),Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"Hq"),[DataOp("+",[Int(1),Var("qq")])]),"=",DataOp("*",[Subscript(Var("rem"),[Var("ii"),Int(2)]),DataOp("^",[Int(2),DataOp("-",[Var("Nr"),Int(1)])])])),For(VarDef("jj"),Range(Int(0),Int(1),DataOp("-",[Var("Nr"),Int(2)])),Stats([Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"Hq"),[DataOp("+",[Int(1),Var("qq")])]),"=",DataOp("+",[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"Hq"),[DataOp("+",[Int(1),Var("qq")])]),DataOp("*",[Subscript(Var("r"),[DataOp("+",[Int(1),Var("jj")])]),DataOp("^",[Int(2),Var("jj")])])]))])),Ifs([ElseIf(DataOp("<",[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"inner_interleaver"),"Hq"),[DataOp("+",[Int(1),Var("qq")])]),Var("Nmax")]),Stats([Assign(Var("qq"),"=",DataOp("+",[Var("qq"),Int(1)]))]))],())])),Assign(Pick(Var("DVBT_SETTINGS"),"map"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"qam_mode"),"=",Int(16)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"alpha"),"=",Int(1)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"use_softbits"),"=",Int(0)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits"),"=",Subscript(Var("log2"),[Pick(Pick(Var("DVBT_SETTINGS"),"map"),"qam_mode")])),Switch(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"qam_mode"),[Case(Int(4),Stats([Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bit_ordering"),"=",Range(Int(1),Int(1),Int(2))),Subscript(Var("assert"),[DataOp("==",[Pick(Pick(Var("DVBT_SETTINGS"),"map"),"alpha"),Int(1)]),String("map"),String("only alpha=1 supported for QPSK")])])),Case(Int(16),Stats([Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bit_ordering"),"=",Range(Int(1),Int(1),Int(4)))])),Case(Int(64),Stats([Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bit_ordering"),"=",Range(Int(1),Int(1),Int(6)))]))],Stats([Stats([Subscript(Var("error"),[Subscript(Var("sprintf"),[String("unsupported QAM mode %d"),Pick(Pick(Var("DVBT_SETTINGS"),"map"),"qam_mode")])])])])),Switch(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"alpha"),[Case(Int(1),Stats([Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"offset"),"=",Int(0))])),Case(Int(2),Stats([Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"offset"),"=",Int(1))])),Case(Int(4),Stats([Assign(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"offset"),"=",Int(3))]))],Stats([Stats([Subscript(Var("error"),[Subscript(Var("sprintf"),[String("unsupported alpha=%d for QAM-%d"),Pick(Pick(Var("DVBT_SETTINGS"),"map"),"alpha"),Pick(Pick(Var("DVBT_SETTINGS"),"map"),"qam_mode")])])])])),Assign(Pick(Var("DVBT_SETTINGS"),"refsig"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"refsig"),"alpha"),"=",DataOp("/",[Int(1),Subscript(Var("sqrt"),[Int(10)])])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"refsig"),"w"),"=",Subscript(Var("zeros"),[Int(1),Pick(Var("DVBT_SETTINGS"),"used_carriers")])),Assign(Var("reg"),"=",Subscript(Var("ones"),[Int(1),Int(11)])),For(VarDef("k"),Range(Int(1),Int(1),Pick(Var("DVBT_SETTINGS"),"used_carriers")),Stats([Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"refsig"),"w"),[Var("k")]),"=",Subscript(Var("reg"),[Int(11)])),Assign(Var("new_bit"),"=",Subscript(Var("xor"),[Subscript(Var("reg"),[Int(9)]),Subscript(Var("reg"),[Int(11)])])),Assign(Var("reg"),"=",Matrix([[Var("new_bit"),Subscript(Var("reg"),[Range(Int(1),Int(1),Int(10))])]]))])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"refsig"),"scattered_pilots_period"),"=",Int(4)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"refsig"),"continual_pilots"),"=",Matrix([[Int(0),Int(48),Int(54),Int(87),Int(141),Int(156),Int(192),Int(201),Int(255),Int(279),Int(282),Int(333),Int(432),Int(450),Int(483),Int(525),Int(531),Int(618),Int(636),Int(714),Int(759),Int(765),Int(780),Int(804),Int(873),Int(888),Int(918),Int(939),Int(942),Int(969),Int(984),Int(1050),Int(1101),Int(1107),Int(1110),Int(1137),Int(1140),Int(1146),Int(1206),Int(1269),Int(1323),Int(1377),Int(1491),Int(1683),Int(1704)]])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"refsig"),"tps"),"=",Matrix([[Int(34),Int(50),Int(209),Int(346),Int(413),Int(569),Int(595),Int(688),Int(790),Int(901),Int(1073),Int(1219),Int(1262),Int(1286),Int(1469),Int(1594),Int(1687)]])),Assign(Pick(Var("DVBT_SETTINGS"),"ofdm"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"mode"),"=",Pick(Var("DVBT_SETTINGS"),"ofdm_mode")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"carrier_count"),"=",Pick(Var("DVBT_SETTINGS"),"used_carriers")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"guard_interval"),"=",Float(2.500000000000000e-01)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"guard_length"),"=",DataOp("*",[Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"guard_interval"),Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"mode")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"use_fftshift"),"=",Int(1)),Assign(Pick(Var("DVBT_SETTINGS"),"packet_length"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"packet_length"),"mux"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"k")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"packet_length"),"rs"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"n")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"packet_length"),"outer_interleaver"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"n")),Assign(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"bit_stream"),"=",DataOp("*",[DataOp("*",[Pick(Var("DVBT_SETTINGS"),"payload_carriers"),Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits")]),Pick(Pick(Var("DVBT_SETTINGS"),"puncturing"),"mode")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"inner_interleaver"),"=",DataOp("*",[Pick(Var("DVBT_SETTINGS"),"payload_carriers"),Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"payload"),"=",Pick(Var("DVBT_SETTINGS"),"payload_carriers")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"ofdm"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"carrier_count")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"fft"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"mode")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"ad_conv"),"=",DataOp("+",[Pick(Pick(Var("DVBT_SETTINGS"),"ofdm"),"guard_length"),Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"fft")]))])),FunDec(VarDef("flipud"),[VarDef("x")],[VarDef("y")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(1)]),Stats([Subscript(Var("usage"),[String("flipud (x)")])]))],()),Assign(Var("nr"),"=",Subscript(Var("rows"),[Var("x")])),Assign(Var("y"),"=",Subscript(Var("x"),[Range(Var("nr"),Int(-1),Int(1)),Colon]))])),FunDec(VarDef("rows"),[VarDef("x")],[VarDef("nr")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(1)]),Stats([Subscript(Var("usage"),[String("rows (x)")])]))],()),AssignMulti([Var("nr"),Var("nc")],"=",Subscript(Var("size"),[Var("x")]))])),FunDec(VarDef("diff"),[VarDef("x"),VarDef("k")],[VarDef("x")],Stats([Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(1)]),Stats([Assign(Var("k"),"=",Int(1))])),ElseIf(DataOp("==",[Var("nargin"),Int(2)]),Stats([Ifs([ElseIf(DataOp("!",[DataOp("&&",[DataOp("&&",[Subscript(Var("is_scalar"),[Var("k")]),DataOp("==",[Var("k"),Subscript(Var("round"),[Var("k")])])]),DataOp(">=",[Var("k"),Int(0)])])]),Stats([Subscript(Var("error"),[String("diff: k must be a nonnegative integer")])])),ElseIf(DataOp("==",[Var("k"),Int(0)]),Stats([Return]))],())]))],Else(Stats([Subscript(Var("usage"),[String("diff (x, k")])]))),Ifs([ElseIf(Subscript(Var("isstr"),[Var("x")]),Stats([Subscript(Var("error"),[String("diff: symbolic differentiation not (yet) supported")])])),ElseIf(Subscript(Var("is_vector"),[Var("x")]),Stats([Assign(Var("n"),"=",Subscript(Var("length"),[Var("x")])),Ifs([ElseIf(DataOp("<=",[Var("n"),Var("k")]),Stats([Assign(Var("x"),"=",Matrix([]))]))],Else(Stats([For(VarDef("i"),Range(Int(1),Int(1),Var("k")),Stats([Assign(Var("x"),"=",DataOp("-",[Subscript(Var("x"),[Range(Int(2),Int(1),DataOp("+",[DataOp("-",[Var("n"),Var("i")]),Int(1)]))]),Subscript(Var("x"),[Range(Int(1),Int(1),DataOp("-",[Var("n"),Var("i")]))])]))]))])))])),ElseIf(Subscript(Var("is_matrix"),[Var("x")]),Stats([Assign(Var("n"),"=",Subscript(Var("rows"),[Var("x")])),Ifs([ElseIf(DataOp("<=",[Var("n"),Var("k")]),Stats([Assign(Var("x"),"=",Matrix([]))]))],Else(Stats([For(VarDef("i"),Range(Int(1),Int(1),Var("k")),Stats([Assign(Var("x"),"=",DataOp("-",[Subscript(Var("x"),[Range(Int(2),Int(1),DataOp("+",[DataOp("-",[Var("n"),Var("i")]),Int(1)])),Colon]),Subscript(Var("x"),[Range(Int(1),Int(1),DataOp("-",[Var("n"),Var("i")])),Colon])]))]))])))]))],Else(Stats([Assign(Var("x"),"=",Matrix([]))])))])),FunDec(VarDef("is_scalar"),[VarDef("x")],[VarDef("retval")],Stats([Assign(Var("retval"),"=",Int(0)),Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(1)]),Stats([Ifs([ElseIf(Subscript(Var("is_matrix"),[Var("x")]),Stats([AssignMulti([Var("nr"),Var("nc")],"=",Subscript(Var("size"),[Var("x")])),Assign(Var("retval"),"=",DataOp("&&",[DataOp("==",[Var("nr"),Int(1)]),DataOp("==",[Var("nc"),Int(1)])]))]))],())]))],Else(Stats([Subscript(Var("usage"),[String("is_scalar (x)")])])))])),FunDec(VarDef("is_vector"),[VarDef("x")],[VarDef("retval")],Stats([Assign(Var("retval"),"=",Int(0)),Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(1)]),Stats([Ifs([ElseIf(Subscript(Var("is_matrix"),[Var("x")]),Stats([AssignMulti([Var("nr"),Var("nc")],"=",Subscript(Var("size"),[Var("x")])),Assign(Var("retval"),"=",DataOp("||",[DataOp("&&",[DataOp("==",[Var("nr"),Int(1)]),DataOp(">=",[Var("nc"),Int(1)])]),DataOp("&&",[DataOp("==",[Var("nc"),Int(1)]),DataOp(">=",[Var("nr"),Int(1)])])]))]))],())]))],Else(Stats([Subscript(Var("usage"),[String("is_vector (x)")])])))])),FunDec(VarDef("strrep"),[VarDef("s"),VarDef("x"),VarDef("y")],[VarDef("t")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(3)]),Stats([Subscript(Var("usage"),[String("strrep (s, x, y)")])]))],()),Ifs([ElseIf(DataOp("!",[DataOp("&&",[DataOp("&&",[Subscript(Var("isstr"),[Var("s")]),Subscript(Var("isstr"),[Var("x")])]),Subscript(Var("isstr"),[Var("y")])])]),Stats([Subscript(Var("error"),[String("strrep: all arguments must be strings")])]))],()),Ifs([ElseIf(DataOp("||",[DataOp(">",[Subscript(Var("length"),[Var("x")]),Subscript(Var("length"),[Var("s")])]),Subscript(Var("isempty"),[Var("x")])]),Stats([Assign(Var("t"),"=",Var("s")),Return]))],()),Assign(Var("ind"),"=",Subscript(Var("findstr"),[Var("s"),Var("x"),Int(0)])),Ifs([ElseIf(DataOp("==",[Subscript(Var("length"),[Var("ind")]),Int(0)]),Stats([Assign(Var("t"),"=",Var("s"))])),ElseIf(DataOp(">",[Subscript(Var("length"),[Var("y")]),Int(0)]),Stats([Assign(Var("jump"),"=",DataOp("-",[Subscript(Var("length"),[Var("y")]),Subscript(Var("length"),[Var("x")])])),Ifs([ElseIf(DataOp(">",[Var("jump"),Int(0)]),Stats([Assign(Var("di"),"=",Subscript(Var("ones"),[Subscript(Var("size"),[Var("s")])])),Assign(Subscript(Var("di"),[Var("ind")]),"=",DataOp("+",[Int(1),DataOp("*",[Var("jump"),Subscript(Var("ones"),[Subscript(Var("length"),[Var("ind")]),Int(1)])])])),Assign(Subscript(Var("t"),[Subscript(Var("cumsum"),[Var("di")])]),"=",Var("s"))])),ElseIf(DataOp("<",[Var("jump"),Int(0)]),Stats([Assign(Var("di"),"=",Subscript(Var("ones"),[DataOp("+",[DataOp("*",[Var("jump"),Subscript(Var("length"),[Var("ind")])]),Subscript(Var("length"),[Var("s")])]),Int(1)])),Assign(Subscript(Var("di"),[DataOp("+",[Var("ind"),DataOp("*",[Var("jump"),Matrix([[Range(Int(0),Int(1),DataOp("-",[Subscript(Var("length"),[Var("ind")]),Int(1)]))]])])])]),"=",DataOp("-",[Int(1),DataOp("*",[Var("jump"),Subscript(Var("ones"),[Subscript(Var("length"),[Var("ind")]),Int(1)])])])),Assign(Var("t"),"=",Subscript(Var("s"),[Subscript(Var("cumsum"),[Var("di")])]))]))],Else(Stats([Assign(Var("t"),"=",Var("s"))]))),Assign(Var("ind"),"=",DataOp("+",[Var("ind"),DataOp("*",[Var("jump"),Matrix([[Range(Int(0),Int(1),DataOp("-",[Subscript(Var("length"),[Var("ind")]),Int(1)]))]])])])),Assign(Var("repeat"),"=",DataOp("*",[DataOp("'",[Matrix([[Range(Int(1),Int(1),Subscript(Var("length"),[Var("y")]))]])]),Subscript(Var("ones"),[Int(1),Subscript(Var("length"),[Var("ind")])])])),Assign(Var("dest"),"=",DataOp("-",[DataOp("+",[DataOp("*",[Subscript(Var("ones"),[Subscript(Var("length"),[Var("y")]),Int(1)]),Var("ind")]),Var("repeat")]),Int(1)])),Assign(Subscript(Var("t"),[Var("dest")]),"=",Subscript(Var("y"),[Var("repeat")]))]))],Else(Stats([Assign(Var("t"),"=",Subscript(Var("toascii"),[Var("s")])),Assign(Var("repeat"),"=",DataOp("*",[DataOp("'",[Matrix([[Range(Int(1),Int(1),Subscript(Var("length"),[Var("x")]))]])]),Subscript(Var("ones"),[Int(1),Subscript(Var("length"),[Var("ind")])])])),Assign(Var("delete"),"=",DataOp("-",[DataOp("+",[DataOp("*",[Subscript(Var("ones"),[Subscript(Var("length"),[Var("x")]),Int(1)]),Var("ind")]),Var("repeat")]),Int(1)])),Assign(Subscript(Var("t"),[Var("delete")]),"=",Matrix([])),Assign(Var("t"),"=",Subscript(Var("setstr"),[Var("t")]))])))])),FunDec(VarDef("findstr"),[VarDef("s"),VarDef("t"),VarDef("overlap")],[VarDef("v")],Stats([Ifs([ElseIf(DataOp("||",[DataOp("<",[Var("nargin"),Int(2)]),DataOp(">",[Var("nargin"),Int(3)])]),Stats([Subscript(Var("usage"),[String("findstr (s, t, overlap)")])]))],()),Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(2)]),Stats([Assign(Var("overlap"),"=",Int(1))]))],()),Ifs([ElseIf(DataOp("&&",[Subscript(Var("isstr"),[Var("s")]),Subscript(Var("isstr"),[Var("t")])]),Stats([Ifs([ElseIf(DataOp("<",[Subscript(Var("length"),[Var("s")]),Subscript(Var("length"),[Var("t")])]),Stats([Assign(Var("tmp"),"=",Var("s")),Assign(Var("s"),"=",Var("t")),Assign(Var("t"),"=",Var("tmp"))]))],()),Assign(Var("s"),"=",Subscript(Var("toascii"),[Var("s")])),Assign(Var("t"),"=",Subscript(Var("toascii"),[Var("t")])),Assign(Var("l_t"),"=",Subscript(Var("length"),[Var("t")])),Ifs([ElseIf(DataOp("<",[Var("l_t"),Int(1)]),Stats([Assign(Var("v"),"=",Matrix([])),Return]))],()),Assign(Var("ind"),"=",Range(Int(1),Int(1),Var("l_t"))),Assign(Var("limit"),"=",DataOp("+",[DataOp("-",[Subscript(Var("length"),[Var("s")]),Var("l_t")]),Int(1)])),Assign(Var("v"),"=",Subscript(Var("zeros"),[Int(1),Var("limit")])),Assign(Var("i"),"=",Int(0)),Assign(Var("k"),"=",Int(1)),While(DataOp("<=",[Var("k"),Var("limit")]),Stats([Ifs([ElseIf(DataOp("==",[Subscript(Var("s"),[DataOp("-",[DataOp("+",[Var("ind"),Var("k")]),Int(1)])]),Var("t")]),Stats([Assign(Subscript(Var("v"),[DataOp("++",[Var("i")])]),"=",Var("k")),Ifs([ElseIf(DataOp("!",[Var("overlap")]),Stats([Assign(Var("k"),"=",DataOp("-",[DataOp("+",[Var("k"),Var("l_t")]),Int(1)]))]))],())]))],()),DataOp("++",[Var("k")])])),Ifs([ElseIf(DataOp(">",[Var("i"),Int(0)]),Stats([Assign(Var("v"),"=",Subscript(Var("v"),[Range(Int(1),Int(1),Var("i"))]))]))],Else(Stats([Assign(Var("v"),"=",Matrix([]))])))]))],Else(Stats([Subscript(Var("error"),[String("findstr: expecting first two arguments to be strings")])])))])),FunDec(VarDef("rem"),[VarDef("x"),VarDef("y")],[VarDef("retval")],Stats([Assign(Var("usage_msg"),"=",String("rem (x, y)")),Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(2)]),Stats([Subscript(Var("usage"),[Var("usage_msg")])]))],()),Ifs([ElseIf(DataOp("&&",[Subscript(Var("any"),[DataOp("!=",[Subscript(Var("size"),[Var("x")]),Subscript(Var("size"),[Var("y")])])]),DataOp("!",[DataOp("||",[Subscript(Var("is_scalar"),[Var("x")]),Subscript(Var("is_scalar"),[Var("y")])])])]),Stats([Subscript(Var("error"),[String("rem: argument sizes must agree")])]))],()),Ifs([ElseIf(DataOp("||",[Subscript(Var("any"),[Subscript(Var("any"),[Subscript(Var("imag"),[Var("x")])])]),Subscript(Var("any"),[Subscript(Var("any"),[Subscript(Var("imag"),[Var("y")])])])]),Stats([Subscript(Var("error"),[String("rem: complex arguments are not allowed")])]))],()),Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(2)]),Stats([Assign(Var("retval"),"=",DataOp("-",[Var("x"),DataOp(".*",[Var("y"),Subscript(Var("fix"),[DataOp("./",[Var("x"),Var("y")])])])]))]))],Else(Stats([Subscript(Var("error"),[Var("usage_msg")])])))])),FunDec(VarDef("make_trellis"),[VarDef("g"),VarDef("rek")],[VarDef("trellis")],Stats([AssignMulti([Var("n"),Var("K")],"=",Subscript(Var("size"),[Var("g")])),Ifs([ElseIf(DataOp("==",[Var("K"),Int(1)]),Stats([Assign(Var("K"),"=",Subscript(Var("ceil"),[Subscript(Var("log2"),[Subscript(Var("max"),[Var("g")])])])),Assign(Var("g"),"=",Subscript(Var("de2bi"),[Var("g"),Var("K")]))]))],()),Assign(Var("m"),"=",DataOp("-",[Var("K"),Int(1)])),Assign(Var("anz_states"),"=",DataOp("^",[Int(2),Var("m")])),Ifs([ElseIf(DataOp(">",[Var("rek"),Int(0)]),Stats([Assign(Var("vrek"),"=",Subscript(Var("g"),[Var("rek"),Colon])),Assign(Subscript(Var("g"),[Var("rek"),Colon]),"=",Matrix([]))]))],()),Assign(Pick(Var("trellis"),"out"),"=",Subscript(Var("zeros"),[Var("anz_states"),Int(2)])),Assign(Pick(Var("trellis"),"next"),"=",Subscript(Var("zeros"),[Var("anz_states"),Int(2)])),Assign(Pick(Var("trellis"),"pre"),"=",Subscript(Var("zeros"),[Var("anz_states"),Int(2)])),For(VarDef("state"),Range(Int(1),Int(1),Var("anz_states")),Stats([Assign(Var("vstate"),"=",Subscript(Var("de2bi"),[DataOp("-",[Var("state"),Int(1)]),Var("m")])),Assign(Var("vstate"),"=",DataOp("'",[Matrix([[Int(0),Var("vstate")]])])),Ifs([ElseIf(DataOp(">",[Var("rek"),Int(0)]),Stats([Assign(Subscript(Var("vstate"),[Int(1)]),"=",Subscript(Var("rem"),[DataOp("*",[Var("vrek"),Var("vstate")]),Int(2)])),Assign(Var("out"),"=",Matrix([[Int(0),Subscript(Var("rem"),[DataOp("*",[Var("g"),Var("vstate")]),Int(2)])]]))]))],Else(Stats([Assign(Var("out"),"=",DataOp("'",[Matrix([[Subscript(Var("rem"),[DataOp("*",[Var("g"),Var("vstate")]),Int(2)])]])]))]))),Assign(Subscript(Pick(Var("trellis"),"out"),[Var("state"),Int(1)]),"=",Subscript(Var("bi2de"),[Var("out")])),Assign(Subscript(Pick(Var("trellis"),"next"),[Var("state"),Int(1)]),"=",Subscript(Var("bi2de"),[DataOp("'",[Subscript(Var("vstate"),[Range(Int(1),Int(1),Var("m"))])])])),Assign(Subscript(Var("vstate"),[Int(1)]),"=",Int(1)),Ifs([ElseIf(DataOp(">",[Var("rek"),Int(0)]),Stats([Assign(Subscript(Var("vstate"),[Int(1)]),"=",Subscript(Var("rem"),[DataOp("*",[Var("vrek"),Var("vstate")]),Int(2)])),Assign(Var("out"),"=",Matrix([[Int(1),Subscript(Var("rem"),[DataOp("*",[Var("g"),Var("vstate")]),Int(2)])]]))]))],Else(Stats([Assign(Var("out"),"=",DataOp("'",[Matrix([[Subscript(Var("rem"),[DataOp("*",[Var("g"),Var("vstate")]),Int(2)])]])]))]))),Assign(Subscript(Pick(Var("trellis"),"out"),[Var("state"),Int(2)]),"=",Subscript(Var("bi2de"),[Var("out")])),Assign(Subscript(Pick(Var("trellis"),"next"),[Var("state"),Int(2)]),"=",Subscript(Var("bi2de"),[DataOp("'",[Subscript(Var("vstate"),[Range(Int(1),Int(1),Var("m"))])])]))])),For(VarDef("state"),Range(Int(1),Int(1),Var("anz_states")),Stats([AssignMulti([Var("pre_states"),Var("info")],"=",Subscript(Var("find"),[DataOp("==",[Pick(Var("trellis"),"next"),DataOp("-",[Var("state"),Int(1)])])])),Assign(Subscript(Pick(Var("trellis"),"pre"),[Var("state"),Colon]),"=",DataOp("-",[DataOp("'",[Var("pre_states")]),Int(1)]))]))])),FunDec(VarDef("de2bi"),[],[VarDef("b")],Stats([Subscript(Var("error"),[Subscript(Var("nargchk"),[Int(1),Int(4),Var("nargin")])]),Assign(Var("sigStr"),"=",String("")),Assign(Var("flag"),"=",String("")),Assign(Var("p"),"=",Matrix([])),Assign(Var("n"),"=",Matrix([])),Subscript(Var("va_start"),[]),For(VarDef("i"),Range(Int(1),Int(1),Var("nargin")),Stats([Assign(Var("arg"),"=",Subscript(Var("va_arg"),[])),Ifs([ElseIf(Subscript(Var("isstr"),[Var("arg")]),Stats([Assign(Var("sigStr"),"=",Subscript(Var("strcat"),[Var("sigStr"),String("/s")]))])),ElseIf(Subscript(Var("isnumeric"),[Var("arg")]),Stats([Assign(Var("sigStr"),"=",Subscript(Var("strcat"),[Var("sigStr"),String("/n")]))]))],Else(Stats([Subscript(Var("error"),[String("Only string and numeric arguments are accepted.")])])))])),Subscript(Var("va_start"),[]),Switch(Var("sigStr"),[Case(String("/n"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/n"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("n"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/s"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/n/s"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("n"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/s/n"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[])),Assign(Var("n"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/n/n"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("n"),"=",Subscript(Var("va_arg"),[])),Assign(Var("p"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/n/n/s"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("n"),"=",Subscript(Var("va_arg"),[])),Assign(Var("p"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/n/s/n"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("n"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[])),Assign(Var("p"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/s/n/n"),Stats([Assign(Var("d"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[])),Assign(Var("n"),"=",Subscript(Var("va_arg"),[])),Assign(Var("p"),"=",Subscript(Var("va_arg"),[]))]))],Stats([Stats([Subscript(Var("error"),[String("Syntax error.")])])])),Ifs([ElseIf(Subscript(Var("isempty"),[Var("d")]),Stats([Subscript(Var("error"),[String("Required parameter empty.")])]))],()),Assign(Var("d"),"=",Subscript(Var("d"),[Colon])),Assign(Var("len_d"),"=",Subscript(Var("length"),[Var("d")])),Ifs([ElseIf(DataOp("|",[DataOp("|",[DataOp("|",[Subscript(Var("max"),[Subscript(Var("max"),[DataOp("<",[Var("d"),Int(0)])])]),Subscript(Var("max"),[Subscript(Var("max"),[DataOp("!",[Subscript(Var("isfinite"),[Var("d")])])])])]),DataOp("!",[Subscript(Var("isreal"),[Var("d")])])]),Subscript(Var("max"),[Subscript(Var("max"),[DataOp("!=",[Subscript(Var("floor"),[Var("d")]),Var("d")])])])]),Stats([Subscript(Var("error"),[String("Input must contain only finite real positive integers.")])]))],()),Ifs([ElseIf(Subscript(Var("isempty"),[Var("p")]),Stats([Assign(Var("p"),"=",Int(2))])),ElseIf(Subscript(Var("max"),[DataOp("!=",[Subscript(Var("size"),[Var("p")]),Int(1)])]),Stats([Subscript(Var("error"),[String("Destination base must be scalar.")])])),ElseIf(DataOp("|",[DataOp("|",[DataOp("!",[Subscript(Var("isfinite"),[Var("p")])]),DataOp("!",[Subscript(Var("isreal"),[Var("p")])])]),DataOp("!=",[Subscript(Var("floor"),[Var("p")]),Var("p")])]),Stats([Subscript(Var("error"),[String("Destination base must be a finite real integer.")])])),ElseIf(DataOp("<",[Var("p"),Int(2)]),Stats([Subscript(Var("error"),[String("Cannot convert to a base of less than two.")])]))],()),Assign(Var("tmp"),"=",Subscript(Var("max"),[Var("d")])),Ifs([ElseIf(DataOp("!=",[Var("tmp"),Int(0)]),Stats([Assign(Var("ntmp"),"=",DataOp("+",[Subscript(Var("floor"),[DataOp("/",[Subscript(Var("log"),[Var("tmp")]),Subscript(Var("log"),[Var("p")])])]),Int(1)]))]))],Else(Stats([Assign(Var("ntmp"),"=",Int(1))]))),Ifs([ElseIf(DataOp("!",[DataOp(">",[DataOp("^",[Var("p"),Var("ntmp")]),Var("tmp")])]),Stats([Assign(Var("ntmp"),"=",DataOp("+",[Var("ntmp"),Int(1)]))]))],()),Ifs([ElseIf(Subscript(Var("isempty"),[Var("n")]),Stats([Assign(Var("n"),"=",Var("ntmp"))])),ElseIf(Subscript(Var("max"),[DataOp("!=",[Subscript(Var("size"),[Var("n")]),Int(1)])]),Stats([Subscript(Var("error"),[String("Specified number of columns must be scalar.")])])),ElseIf(DataOp("|",[DataOp("|",[DataOp("!",[Subscript(Var("isfinite"),[Var("n")])]),DataOp("!",[Subscript(Var("isreal"),[Var("n")])])]),DataOp("!=",[Subscript(Var("floor"),[Var("n")]),Var("n")])]),Stats([Subscript(Var("error"),[String("Specified number of columns must be a finite real integer.")])])),ElseIf(DataOp("<",[Var("n"),Var("ntmp")]),Stats([Subscript(Var("error"),[String("Specified number of columns in output matrix is too small.")])]))],()),Ifs([ElseIf(Subscript(Var("isempty"),[Var("flag")]),Stats([Assign(Var("flag"),"=",String("right-msb"))])),ElseIf(DataOp("!",[DataOp("|",[Subscript(Var("strcmp"),[Var("flag"),String("right-msb")]),Subscript(Var("strcmp"),[Var("flag"),String("left-msb")])])]),Stats([Subscript(Var("error"),[String("Invalid string flag.")])]))],()),Assign(Var("b"),"=",Subscript(Var("zeros"),[Var("len_d"),Var("n")])),For(VarDef("i"),Range(Int(1),Int(1),Var("len_d")),Stats([Assign(Var("j"),"=",Int(1)),Assign(Var("tmp"),"=",Subscript(Var("d"),[Var("i")])),While(DataOp("&",[DataOp("<=",[Var("j"),Var("n")]),DataOp(">",[Var("tmp"),Int(0)])]),Stats([Assign(Subscript(Var("b"),[Var("i"),Var("j")]),"=",Subscript(Var("rem"),[Var("tmp"),Var("p")])),Assign(Var("tmp"),"=",Subscript(Var("floor"),[DataOp("/",[Var("tmp"),Var("p")])])),Assign(Var("j"),"=",DataOp("+",[Var("j"),Int(1)]))]))])),Ifs([ElseIf(Subscript(Var("strcmp"),[Var("flag"),String("left-msb")]),Stats([Assign(Var("b2"),"=",Var("b")),Assign(Var("b"),"=",Subscript(Var("b2"),[Colon,Range(Var("n"),Int(-1),Int(1))]))]))],())])),FunDec(VarDef("nargchk"),[VarDef("nargin_min"),VarDef("nargin_max"),VarDef("n")],[VarDef("retval")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(3)]),Stats([Subscript(Var("usage"),[String("nargchk (nargin_min, nargin_max, n)")])]))],()),Ifs([ElseIf(DataOp(">",[Var("nargin_min"),Var("nargin_max")]),Stats([Subscript(Var("error"),[String("nargchk: nargin_min > nargin_max")])]))],()),Ifs([ElseIf(DataOp("<",[Var("n"),Var("nargin_min")]),Stats([Assign(Var("retval"),"=",String("nargchk: N is less than nargin_min"))])),ElseIf(DataOp(">",[Var("n"),Var("nargin_max")]),Stats([Assign(Var("retval"),"=",String("nargchk: N is greater than nargin_max"))]))],Else(Stats([Assign(Var("retval"),"=",Matrix([]))])))])),FunDec(VarDef("strcat"),[VarDef("s"),VarDef("t")],[VarDef("st")],Stats([Ifs([ElseIf(DataOp(">",[Var("nargin"),Int(1)]),Stats([Assign(Var("save_empty_list_elements_ok"),"=",Var("empty_list_elements_ok")),UnwindProtect(Stats([Assign(Var("empty_list_elements_ok"),"=",Int(1)),Ifs([ElseIf(DataOp("&&",[Subscript(Var("isstr"),[Var("s")]),Subscript(Var("isstr"),[Var("t")])]),Stats([Assign(Var("tmpst"),"=",Matrix([[Var("s"),Var("t")]]))]))],Else(Stats([Subscript(Var("error"),[String("strcat: all arguments must be strings")])]))),Assign(Var("n"),"=",DataOp("-",[Var("nargin"),Int(2)])),While(DataOp(".--",[Var("n")]),Stats([Assign(Var("tmp"),"=",Subscript(Var("va_arg"),[])),Ifs([ElseIf(Subscript(Var("isstr"),[Var("tmp")]),Stats([Assign(Var("tmpst"),"=",Matrix([[Var("tmpst"),Var("tmp")]]))]))],Else(Stats([Subscript(Var("error"),[String("strcat: all arguments must be strings")])])))]))]),Stats([Assign(Var("empty_list_elements_ok"),"=",Var("save_empty_list_elements_ok"))]))]))],Else(Stats([Subscript(Var("usage"),[String("strcat (s, t, ...)")])]))),Assign(Var("st"),"=",Var("tmpst"))])),FunDec(VarDef("strcmp"),[VarDef("s1"),VarDef("s2")],[VarDef("status")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(2)]),Stats([Subscript(Var("usage"),[String("strcmp (s, t)")])]))],()),Assign(Var("status"),"=",Int(0)),Ifs([ElseIf(DataOp("&&",[Subscript(Var("isstr"),[Var("s1")]),Subscript(Var("isstr"),[Var("s2")])]),Stats([AssignMulti([Var("r1"),Var("c1")],"=",Subscript(Var("size"),[Var("s1")])),AssignMulti([Var("r2"),Var("c2")],"=",Subscript(Var("size"),[Var("s2")])),Ifs([ElseIf(DataOp("&&",[DataOp("==",[Var("r1"),Var("r2")]),DataOp("==",[Var("c1"),Var("c2")])]),Stats([Ifs([ElseIf(DataOp("==",[Var("c1"),Int(0)]),Stats([Assign(Var("status"),"=",Int(1))]))],Else(Stats([Assign(Var("status"),"=",Subscript(Var("all"),[Subscript(Var("all"),[DataOp("==",[Var("s1"),Var("s2")])])]))])))]))],())]))],())])),FunDec(VarDef("bi2de"),[],[VarDef("d")],Stats([Subscript(Var("error"),[Subscript(Var("nargchk"),[Int(1),Int(3),Var("nargin")])]),Assign(Var("sigStr"),"=",String("")),Assign(Var("flag"),"=",String("")),Assign(Var("p"),"=",Matrix([])),Subscript(Var("va_start"),[]),For(VarDef("i"),Range(Int(1),Int(1),Var("nargin")),Stats([Assign(Var("arg"),"=",Subscript(Var("va_arg"),[])),Ifs([ElseIf(Subscript(Var("isstr"),[Var("arg")]),Stats([Assign(Var("sigStr"),"=",Subscript(Var("strcat"),[Var("sigStr"),String("/s")]))])),ElseIf(Subscript(Var("isnumeric"),[Var("arg")]),Stats([Assign(Var("sigStr"),"=",Subscript(Var("strcat"),[Var("sigStr"),String("/n")]))]))],Else(Stats([Subscript(Var("error"),[String("Only string and numeric arguments are accepted.")])])))])),Subscript(Var("va_start"),[]),Switch(Var("sigStr"),[Case(String("/n"),Stats([Assign(Var("b"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/n"),Stats([Assign(Var("b"),"=",Subscript(Var("va_arg"),[])),Assign(Var("p"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/s"),Stats([Assign(Var("b"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/n/s"),Stats([Assign(Var("b"),"=",Subscript(Var("va_arg"),[])),Assign(Var("p"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[]))])),Case(String("/n/s/n"),Stats([Assign(Var("b"),"=",Subscript(Var("va_arg"),[])),Assign(Var("flag"),"=",Subscript(Var("va_arg"),[])),Assign(Var("p"),"=",Subscript(Var("va_arg"),[]))]))],Stats([Stats([Subscript(Var("error"),[String("Syntax error.")])])])),Ifs([ElseIf(Subscript(Var("isempty"),[Var("b")]),Stats([Subscript(Var("error"),[String("Required parameter empty.")])]))],()),Ifs([ElseIf(DataOp("|",[DataOp("|",[DataOp("|",[Subscript(Var("max"),[Subscript(Var("max"),[DataOp("<",[Var("b"),Int(0)])])]),Subscript(Var("max"),[Subscript(Var("max"),[DataOp("!",[Subscript(Var("isfinite"),[Var("b")])])])])]),DataOp("!",[Subscript(Var("isreal"),[Var("b")])])]),Subscript(Var("max"),[Subscript(Var("max"),[DataOp("!=",[Subscript(Var("floor"),[Var("b")]),Var("b")])])])]),Stats([Subscript(Var("error"),[String("Input must contain only finite real positive integers.")])]))],()),Ifs([ElseIf(Subscript(Var("isempty"),[Var("p")]),Stats([Assign(Var("p"),"=",Int(2))])),ElseIf(DataOp(">",[Subscript(Var("max"),[Subscript(Var("size"),[Var("p")])]),Int(1)]),Stats([Subscript(Var("error"),[String("Source base must be a scalar.")])])),ElseIf(DataOp("|",[DataOp("|",[DataOp("!=",[Subscript(Var("floor"),[Var("p")]),Var("p")]),DataOp("!",[Subscript(Var("isfinite"),[Var("p")])])]),DataOp("!",[Subscript(Var("isreal"),[Var("p")])])]),Stats([Subscript(Var("error"),[String("Source base must be a finite real integer.")])])),ElseIf(DataOp("<",[Var("p"),Int(2)]),Stats([Subscript(Var("error"),[String("Source base must be greater than or equal to two.")])]))],()),Ifs([ElseIf(DataOp(">",[Subscript(Var("max"),[Subscript(Var("max"),[Var("b")])]),DataOp("-",[Var("p"),Int(1)])]),Stats([Subscript(Var("error"),[String("The elements of the matrix are larger than the base can represent.")])]))],()),Assign(Var("m"),"=",Subscript(Var("size"),[Var("b"),Int(1)])),Assign(Var("n"),"=",Subscript(Var("size"),[Var("b"),Int(2)])),Ifs([ElseIf(Subscript(Var("isempty"),[Var("flag")]),Stats([Assign(Var("flag"),"=",String("right-msb"))])),ElseIf(DataOp("!",[DataOp("|",[Subscript(Var("strcmp"),[Var("flag"),String("right-msb")]),Subscript(Var("strcmp"),[Var("flag"),String("left-msb")])])]),Stats([Subscript(Var("error"),[String("Invalid string flag.")])]))],()),Ifs([ElseIf(Subscript(Var("strcmp"),[Var("flag"),String("left-msb")]),Stats([Assign(Var("b2"),"=",Var("b")),Assign(Var("b"),"=",Subscript(Var("b2"),[Colon,Range(Var("n"),Int(-1),Int(1))]))]))],()),For(VarDef("i"),Range(Int(1),Int(1),Var("m")),Stats([Assign(Var("highest"),"=",DataOp("-",[Subscript(Var("max"),[Subscript(Var("find"),[Subscript(Var("b"),[Var("i"),Colon])])]),Int(1)])),Ifs([ElseIf(Subscript(Var("isempty"),[Var("highest")]),Stats([Assign(Subscript(Var("d"),[Var("i")]),"=",Int(0))])),ElseIf(DataOp("==",[DataOp("^",[Var("p"),Var("highest")]),Var("Inf")]),Stats([Assign(Subscript(Var("d"),[Var("i")]),"=",Var("Inf"))]))],Else(Stats([Assign(Subscript(Var("d"),[Var("i")]),"=",DataOp("*",[Subscript(Var("b"),[Var("i"),Range(Int(1),Int(1),DataOp("+",[Var("highest"),Int(1)]))]),DataOp(".^",[Var("p"),DataOp("'",[Matrix([[Range(Int(0),Int(1),Var("highest"))]])])])]))])))])),Assign(Var("d"),"=",Subscript(Var("d"),[Colon]))])),FunDec(VarDef("scrambler_prbs"),[VarDef("byte_length"),VarDef("state_in")],[VarDef("byte_sequence"),VarDef("state_out")],Stats([VarDef("DUMP"),AssignMulti([Var("should_be_one"),Var("r")],"=",Subscript(Var("size"),[Var("state_in")])),Subscript(Var("assert"),[DataOp("==",[Var("should_be_one"),Int(1)]),String("scramble"),String("row vector expected")]),Subscript(Var("assert"),[DataOp("==",[Var("r"),Int(15)]),String("scramble"),String("inconsistent prbs state")]),Subscript(Var("fprintf"),[Pick(Var("DUMP"),"main"),String("\tscrambler_prbs. (n=%d)\n"),Var("byte_length")]),Assign(Var("bit_length"),"=",DataOp("*",[Int(8),Var("byte_length")])),Assign(Var("shift_register"),"=",Var("state_in")),Assign(Var("bit_sequence"),"=",Subscript(Var("zeros"),[Var("bit_length"),Int(1)])),For(VarDef("i"),Range(Int(1),Int(1),Var("bit_length")),Stats([Assign(Var("new_bit"),"=",Subscript(Var("xor"),[Subscript(Var("shift_register"),[Int(14)]),Subscript(Var("shift_register"),[Int(15)])])),Assign(Var("shift_register"),"=",Matrix([[Var("new_bit"),Subscript(Var("shift_register"),[Range(Int(1),Int(1),Int(14))])]])),Assign(Subscript(Var("bit_sequence"),[Var("i")]),"=",Var("new_bit"))])),Assign(Var("byte_sequence"),"=",Subscript(Var("bi2de"),[DataOp("'",[Subscript(Var("reshape"),[Var("bit_sequence"),Int(8),Var("byte_length")])]),String("left-msb")])),Assign(Var("state_out"),"=",Var("shift_register"))])),FunDec(VarDef("assert"),[VarDef("predicate"),VarDef("subsystem"),VarDef("message")],[],Stats([Ifs([ElseIf(DataOp("!",[Subscript(Var("all"),[Subscript(Var("all"),[Var("predicate")])])]),Stats([Subscript(Var("fprintf"),[String("%s: Error: Assertion failed.\n"),Var("subsystem")]),Subscript(Var("fprintf"),[String("%s: %s\n"),Var("subsystem"),Var("message")]),Subscript(Var("error"),[String("stop")])]))],())])),FunDec(VarDef("xor"),[VarDef("x"),VarDef("y")],[VarDef("z")],Stats([Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(2)]),Stats([Ifs([ElseIf(DataOp("||",[DataOp("||",[Subscript(Var("is_scalar"),[Var("x")]),Subscript(Var("is_scalar"),[Var("y")])]),DataOp("==",[Subscript(Var("size"),[Var("x")]),Subscript(Var("size"),[Var("y")])])]),Stats([Assign(Var("z"),"=",Subscript(Var("logical"),[DataOp("-",[DataOp("|",[Var("x"),Var("y")]),DataOp("&",[Var("x"),Var("y")])])]))]))],Else(Stats([Subscript(Var("error"),[String("xor: x and y must be of common size or scalars")])])))]))],Else(Stats([Subscript(Var("usage"),[String("xor (x, y)")])])))])),FunDec(VarDef("logical"),[VarDef("x")],[VarDef("y")],Stats([Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(1)]),Stats([Ifs([ElseIf(DataOp("||",[Subscript(Var("islogical"),[Var("x")]),Subscript(Var("isempty"),[Var("x")])]),Stats([Assign(Var("y"),"=",Var("x"))])),ElseIf(Subscript(Var("isnumeric"),[Var("x")]),Stats([Assign(Var("y"),"=",DataOp("!=",[Var("x"),Int(0)]))]))],Else(Stats([Subscript(Var("error"),[String("logical not defined for type `%s'"),Subscript(Var("typeinfo"),[Var("x")])])])))]))],Else(Stats([Subscript(Var("usage"),[String("logical (x)")])])))])),FunDec(VarDef("reshape"),[VarDef("a"),VarDef("m"),VarDef("n")],[VarDef("retval")],Stats([Ifs([ElseIf(DataOp("&&",[DataOp("==",[Var("nargin"),Int(2)]),DataOp("==",[Subscript(Var("prod"),[Subscript(Var("size"),[Var("m")])]),Int(2)])]),Stats([Assign(Var("n"),"=",Subscript(Var("m"),[Int(2)])),Assign(Var("m"),"=",Subscript(Var("m"),[Int(1)])),Assign(Var("nargin"),"=",Int(3))]))],()),Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(3)]),Stats([AssignMulti([Var("nr"),Var("nc")],"=",Subscript(Var("size"),[Var("a")])),Ifs([ElseIf(DataOp("==",[DataOp("*",[Var("nr"),Var("nc")]),DataOp("*",[Var("m"),Var("n")])]),Stats([Assign(Var("retval"),"=",Subscript(Var("zeros"),[Var("m"),Var("n")])),Ifs([ElseIf(Subscript(Var("isstr"),[Var("a")]),Stats([Assign(Var("retval"),"=",Subscript(Var("setstr"),[Var("retval")]))]))],()),Assign(Subscript(Var("retval"),[Colon]),"=",Var("a"))]))],Else(Stats([Subscript(Var("error"),[String("reshape: sizes must match")])])))]))],Else(Stats([Subscript(Var("usage"),[String("reshape (a, m, n) or reshape (a, size (b))")])])))])),FunDec(VarDef("conv_encoder"),[VarDef("x"),VarDef("g"),VarDef("r_flag"),VarDef("term")],[VarDef("y"),VarDef("last_state"),VarDef("x_tail")],Stats([AssignMulti([Var("n"),Var("K")],"=",Subscript(Var("size"),[Var("g")])),Assign(Var("x"),"=",Subscript(Var("x"),[Colon])),Assign(Var("N_info"),"=",Subscript(Var("length"),[Var("x")])),Ifs([ElseIf(DataOp("==",[Var("K"),Int(1)]),Stats([Assign(Var("K"),"=",Subscript(Var("ceil"),[Subscript(Var("log2"),[Subscript(Var("max"),[Var("g")])])])),Assign(Var("g"),"=",Subscript(Var("de2bi"),[Var("g"),Var("K")]))]))],()),Assign(Var("m"),"=",DataOp("-",[Var("K"),Int(1)])),Ifs([ElseIf(DataOp(">",[Var("r_flag"),Int(0)]),Stats([Assign(Var("grek"),"=",Subscript(Var("g"),[Var("r_flag"),Colon])),Assign(Subscript(Var("g"),[Var("r_flag"),Colon]),"=",Matrix([]))]))],()),Assign(Var("state"),"=",Subscript(Var("zeros"),[Int(1),Var("m")])),Ifs([ElseIf(DataOp("==",[Var("nargout"),Int(3)]),Stats([Assign(Var("x_tail"),"=",Subscript(Var("zeros"),[Var("m"),Int(1)]))]))],()),Ifs([ElseIf(DataOp(">",[Var("term"),Int(0)]),Stats([Assign(Var("y"),"=",Subscript(Var("zeros"),[DataOp("*",[DataOp("+",[Var("N_info"),Var("m")]),Var("n")]),Int(1)]))]))],Else(Stats([Assign(Var("y"),"=",Subscript(Var("zeros"),[DataOp("*",[Var("N_info"),Var("n")]),Int(1)]))]))),For(VarDef("i"),Range(Int(1),Int(1),Var("N_info")),Stats([Ifs([ElseIf(DataOp(">",[Var("r_flag"),Int(0)]),Stats([Assign(Var("a_k"),"=",DataOp("&",[Var("grek"),Matrix([[Subscript(Var("x"),[Var("i")]),Var("state")]])])),Assign(Var("a_k"),"=",Subscript(Var("rem"),[Subscript(Var("sum"),[Var("a_k")]),Int(2)])),Assign(Var("reg"),"=",Matrix([[Var("a_k"),Var("state")]])),Assign(Subscript(Var("y"),[DataOp("+",[DataOp("*",[DataOp("-",[Var("i"),Int(1)]),Var("n")]),Int(1)])]),"=",Subscript(Var("x"),[Var("i")])),Assign(Subscript(Var("y"),[Range(DataOp("+",[DataOp("*",[DataOp("-",[Var("i"),Int(1)]),Var("n")]),Int(2)]),Int(1),DataOp("*",[Var("i"),Var("n")]))]),"=",Subscript(Var("rem"),[DataOp("*",[Var("g"),DataOp("'",[Var("reg")])]),Int(2)]))]))],Else(Stats([Assign(Var("reg"),"=",Matrix([[Subscript(Var("x"),[Var("i")]),Var("state")]])),Assign(Subscript(Var("y"),[Range(DataOp("+",[DataOp("*",[DataOp("-",[Var("i"),Int(1)]),Var("n")]),Int(1)]),Int(1),DataOp("*",[Var("i"),Var("n")]))]),"=",Subscript(Var("rem"),[DataOp("*",[Var("g"),DataOp("'",[Var("reg")])]),Int(2)]))]))),Assign(Var("state"),"=",Subscript(Var("reg"),[Range(Int(1),Int(1),Var("m"))]))])),Ifs([ElseIf(DataOp(">",[Var("term"),Int(0)]),Stats([For(VarDef("i"),Range(DataOp("+",[Var("N_info"),Int(1)]),Int(1),DataOp("+",[Var("N_info"),Var("m")])),Stats([Assign(Var("reg"),"=",Matrix([[Int(0),Var("state")]])),Ifs([ElseIf(DataOp(">",[Var("r_flag"),Int(0)]),Stats([Assign(Var("feedback"),"=",Subscript(Var("rem"),[Subscript(Var("sum"),[DataOp("&",[Var("grek"),Var("reg")])]),Int(2)])),Assign(Subscript(Var("y"),[DataOp("+",[DataOp("*",[DataOp("-",[Var("i"),Int(1)]),Var("n")]),Int(1)])]),"=",Var("feedback")),Ifs([ElseIf(DataOp("==",[Var("nargout"),Int(3)]),Stats([Assign(Subscript(Var("x_tail"),[DataOp("-",[Var("i"),Var("N_info")])]),"=",Var("feedback"))]))],()),Assign(Subscript(Var("y"),[Range(DataOp("+",[DataOp("*",[DataOp("-",[Var("i"),Int(1)]),Var("n")]),Int(2)]),Int(1),DataOp("*",[Var("i"),Var("n")]))]),"=",Subscript(Var("rem"),[DataOp("*",[Var("g"),DataOp("'",[Var("reg")])]),Int(2)]))]))],Else(Stats([Assign(Subscript(Var("y"),[Range(DataOp("+",[DataOp("*",[DataOp("-",[Var("i"),Int(1)]),Var("n")]),Int(1)]),Int(1),DataOp("*",[Var("i"),Var("n")]))]),"=",Subscript(Var("rem"),[DataOp("*",[Var("g"),DataOp("'",[Var("reg")])]),Int(2)]))]))),Assign(Var("state"),"=",Subscript(Var("reg"),[Range(Int(1),Int(1),Var("m"))]))]))]))],()),Ifs([ElseIf(DataOp(">=",[Var("nargout"),Int(2)]),Stats([Assign(Var("last_state"),"=",Subscript(Var("bi2de"),[Var("state")]))]))],())])),FunDec(VarDef("hex2dec"),[VarDef("h")],[VarDef("d")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(1)]),Stats([Subscript(Var("usage"),[String("hex2dec (b)")])]))],Else(Stats([Assign(Var("d"),"=",Subscript(Var("base2dec"),[Var("h"),Int(16)]))])))])),FunDec(VarDef("base2dec"),[VarDef("d"),VarDef("base")],[VarDef("out")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(2)]),Stats([Subscript(Var("usage"),[String("n = base2dec('d', base)")])]))],()),Assign(Var("symbols"),"=",String("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")),Ifs([ElseIf(Subscript(Var("isstr"),[Var("base")]),Stats([Assign(Var("symbols"),"=",Var("base")),Assign(Var("base"),"=",Subscript(Var("length"),[Var("symbols")])),Ifs([ElseIf(Subscript(Var("any"),[DataOp("==",[Subscript(Var("diff"),[Subscript(Var("sort"),[Subscript(Var("toascii"),[Var("symbols")])])]),Int(0)])]),Stats([Subscript(Var("error"),[String("base2dec: symbols representing digits must be unique.")])]))],())])),ElseIf(DataOp("!",[Subscript(Var("is_scalar"),[Var("base")])]),Stats([Subscript(Var("error"),[String("base2dec: cannot convert from several bases at once.")])])),ElseIf(DataOp("||",[DataOp("<",[Var("base"),Int(2)]),DataOp(">",[Var("base"),Subscript(Var("length"),[Var("symbols")])])]),Stats([Subscript(Var("error"),[String("base2dec: base must be between 2 and 36 or a string of symbols")])]))],Else(Stats([Assign(Var("d"),"=",Subscript(Var("toupper"),[Var("d")]))]))),Assign(Var("d"),"=",Subscript(Var("strjust"),[Var("d"),String("right")])),Assign(Var("table"),"=",DataOp("*",[Var("NaN"),Subscript(Var("ones"),[Int(256),Int(1)])])),Assign(Subscript(Var("table"),[Subscript(Var("toascii"),[Subscript(Var("symbols"),[Range(Int(1),Int(1),Var("base"))])])]),"=",Range(Int(0),Int(1),DataOp("-",[Var("base"),Int(1)]))),Assign(Subscript(Var("table"),[Subscript(Var("toascii"),[String(" ")])]),"=",Int(0)),Assign(Var("d"),"=",Subscript(Var("reshape"),[Subscript(Var("table"),[Subscript(Var("toascii"),[Var("d")])]),Subscript(Var("size"),[Var("d")])])),Assign(Var("out"),"=",DataOp("*",[Var("d"),DataOp(".^",[Var("base"),DataOp("'",[Range(DataOp("-",[Subscript(Var("columns"),[Var("d")]),Int(1)]),Int(-1),Int(0))])])]))])),FunDec(VarDef("strjust"),[VarDef("x"),VarDef("just")],[VarDef("x")],Stats([Ifs([ElseIf(DataOp("||",[DataOp("<",[Var("nargin"),Int(1)]),DataOp(">",[Var("nargin"),Int(2)])]),Stats([Subscript(Var("usage"),[String("strjust (s, ['left'|'right'|'center'])")])]))],()),Ifs([ElseIf(DataOp("==",[Var("nargin"),Int(1)]),Stats([Assign(Var("just"),"=",String("right"))]))],()),Assign(Var("just"),"=",Subscript(Var("tolower"),[Var("just")])),Assign(Var("dfi"),"=",Var("do_fortran_indexing")),UnwindProtect(Stats([Assign(Var("do_fortran_indexing"),"=",Int(1)),Assign(Var("idx"),"=",Subscript(Var("find"),[DataOp("==",[Subscript(Var("toascii"),[Var("x")]),Int(0)])])),Ifs([ElseIf(DataOp("!",[Subscript(Var("isempty"),[Var("idx")])]),Stats([Assign(Subscript(Var("x"),[Var("idx")]),"=",String(" "))]))],()),AssignMulti([Var("nr"),Var("nc")],"=",Subscript(Var("size"),[Var("x")])),Assign(Var("idx"),"=",DataOp("!=",[DataOp("'",[Var("x")]),String(" ")])),Ifs([ElseIf(Subscript(Var("strcmp"),[Var("just"),String("right")]),Stats([AssignMulti([Var("N"),Var("hi")],"=",Subscript(Var("max"),[Subscript(Var("cumsum"),[Var("idx")])])),Assign(Var("shift"),"=",Var("hi"))])),ElseIf(Subscript(Var("strcmp"),[Var("just"),String("left")]),Stats([AssignMulti([Var("N"),Var("lo")],"=",Subscript(Var("max"),[Subscript(Var("cumsum"),[Subscript(Var("flipud"),[Var("idx")])])])),Assign(Var("shift"),"=",DataOp("-",[Var("nc"),Var("lo")]))]))],Else(Stats([AssignMulti([Var("N"),Var("hi")],"=",Subscript(Var("max"),[Subscript(Var("cumsum"),[Var("idx")])])),AssignMulti([Var("N"),Var("lo")],"=",Subscript(Var("max"),[Subscript(Var("cumsum"),[Subscript(Var("flipud"),[Var("idx")])])])),Assign(Var("shift"),"=",Subscript(Var("ceil"),[DataOp("-",[Var("nc"),DataOp("/",[DataOp("-",[Var("lo"),Var("hi")]),Int(2)])])]))]))),Assign(Var("idx"),"=",Subscript(Var("rem"),[DataOp("+",[DataOp("*",[Subscript(Var("ones"),[Var("nr"),Int(1)]),Matrix([[Range(Int(0),Int(1),DataOp("-",[Var("nc"),Int(1)]))]])]),DataOp("*",[DataOp("'",[Var("shift")]),Subscript(Var("ones"),[Int(1),Var("nc")])])]),Var("nc")])),Assign(Var("x"),"=",Subscript(Var("x"),[DataOp("+",[DataOp("*",[Var("idx"),Var("nr")]),DataOp("*",[DataOp("'",[Matrix([[Range(Int(1),Int(1),Var("nr"))]])]),Subscript(Var("ones"),[Int(1),Var("nc")])])])]))]),Stats([Assign(Var("do_fortran_indexing"),"=",Var("dfi"))]))])),FunDec(VarDef("columns"),[VarDef("x")],[VarDef("nc")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(1)]),Stats([Subscript(Var("usage"),[String("columns (x)")])]))],()),AssignMulti([Var("nr"),Var("nc")],"=",Subscript(Var("size"),[Var("x")]))])),FunDec(VarDef("gf_init"),[VarDef("p"),VarDef("m"),VarDef("field_generator")],[],Stats([VarDef("GF"),Assign(Var("GF"),"=",Matrix([])),Assign(Pick(Var("GF"),"p"),"=",Var("p")),Subscript(Var("assert"),[DataOp("==",[Var("p"),Int(2)]),String("gf"),String("only XOR arithmetic supported")]),Assign(Pick(Var("GF"),"m"),"=",Var("m")),Subscript(Var("assert"),[DataOp("==",[Var("m"),Int(8)]),String("gf"),String("only byte sized code symbols supported")]),Assign(Pick(Var("GF"),"q"),"=",DataOp("^",[Pick(Var("GF"),"p"),Pick(Var("GF"),"m")])),Assign(Pick(Var("GF"),"all"),"=",Range(Int(0),Int(1),DataOp("-",[Pick(Var("GF"),"q"),Int(1)]))),Assign(Pick(Var("GF"),"nz"),"=",Range(Int(1),Int(1),DataOp("-",[Pick(Var("GF"),"q"),Int(1)]))),Assign(Pick(Var("GF"),"fgen"),"=",Subscript(Var("zeros"),[DataOp("+",[Var("m"),Int(1)]),Int(1)])),For(VarDef("k"),Range(Int(1),Int(1),Subscript(Var("length"),[Var("field_generator")])),Stats([Assign(Subscript(Pick(Var("GF"),"fgen"),[DataOp("+",[Int(1),Subscript(Var("field_generator"),[Var("k")])])]),"=",Int(1))])),Assign(Pick(Var("GF"),"zero"),"=",Int(0)),Assign(Pick(Var("GF"),"one"),"=",Int(1)),Assign(Pick(Var("GF"),"alpha"),"=",Var("p")),Assign(Pick(Var("GF"),"log"),"=",Subscript(Var("zeros"),[DataOp("-",[Pick(Var("GF"),"q"),Int(1)]),Int(1)])),Assign(Pick(Var("GF"),"exp"),"=",Subscript(Var("zeros"),[DataOp("-",[Pick(Var("GF"),"q"),Int(1)]),Int(1)])),Assign(Var("x"),"=",Subscript(Var("zeros"),[DataOp("+",[Pick(Var("GF"),"m"),Int(1)]),Int(1)])),Assign(Subscript(Var("x"),[Int(1)]),"=",Int(1)),For(VarDef("k"),Range(Int(1),Int(1),DataOp("-",[Pick(Var("GF"),"q"),Int(1)])),Stats([Assign(Var("index"),"=",Int(0)),For(VarDef("pos"),Range(Int(0),Int(1),DataOp("-",[Var("m"),Int(1)])),Stats([Assign(Var("index"),"=",DataOp("+",[Var("index"),DataOp("*",[Subscript(Var("x"),[DataOp("+",[Int(1),Var("pos")])]),DataOp("^",[Pick(Var("GF"),"p"),Var("pos")])])]))])),Subscript(Var("assert"),[DataOp("==",[Subscript(Var("x"),[DataOp("+",[Pick(Var("GF"),"m"),Int(1)])]),Int(0)]),String("gf"),String("incorrect field generator")]),Subscript(Var("assert"),[DataOp("&",[DataOp("<",[Int(0),Var("index")]),DataOp("<",[Var("index"),Pick(Var("GF"),"q")])]),String("gf"),String("incorrect index")]),Assign(Subscript(Pick(Var("GF"),"exp"),[Var("k")]),"=",Var("index")),Assign(Subscript(Pick(Var("GF"),"log"),[Var("index")]),"=",Var("k")),Assign(Var("x"),"=",Matrix([[Int(0)],[Subscript(Var("x"),[Range(Int(1),Int(1),Pick(Var("GF"),"m"))])]])),Ifs([ElseIf(DataOp("==",[Subscript(Var("x"),[DataOp("+",[Pick(Var("GF"),"m"),Int(1)])]),Int(1)]),Stats([Assign(Var("x"),"=",Subscript(Var("xor"),[Var("x"),Pick(Var("GF"),"fgen")]))]))],())]))])),FunDec(VarDef("rs_init"),[VarDef("n"),VarDef("k"),VarDef("t")],[],Stats([VarDef("GF"),VarDef("DVBT_SETTINGS"),Subscript(Var("assert"),[DataOp(">=",[Var("n"),DataOp("+",[Var("k"),DataOp("*",[Int(2),Var("t")])])]),String("rs"),String("length too small")]),Subscript(Var("assert"),[DataOp("==",[Var("t"),Pick(Var("GF"),"m")]),String("rs"),String("t does not fit m")]),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"SY"),"=",Matrix([])),Assign(Pick(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"SY"),"n"),"=",DataOp("-",[Pick(Var("GF"),"q"),Int(1)])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"t"),"=",Var("t")),Assign(Pick(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"SY"),"k"),"=",DataOp("-",[Pick(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"SY"),"n"),DataOp("*",[Int(2),Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"t")])])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"k"),"=",Var("k")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"n"),"=",Var("n")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"padding"),"=",DataOp("-",[Pick(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"SY"),"n"),Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"n")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"lamda"),"=",Pick(Var("GF"),"alpha")),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"r"),"=",Subscript(Var("zeros"),[DataOp("*",[Int(2),Var("t")]),Int(1)])),Assign(Var("raised_lamda"),"=",Pick(Var("GF"),"one")),For(VarDef("k"),Range(Int(1),Int(1),DataOp("*",[Int(2),Var("t")])),Stats([Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"r"),[Var("k")]),"=",Var("raised_lamda")),Assign(Var("raised_lamda"),"=",Subscript(Var("gf_mul"),[Var("raised_lamda"),Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"lamda")]))])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),"=",Subscript(Var("zeros"),[DataOp("+",[DataOp("*",[Int(2),Var("t")]),Int(1)]),Int(1)])),Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),[Int(1)]),"=",Pick(Var("GF"),"one")),For(VarDef("k"),Range(Int(1),Int(1),DataOp("*",[Int(2),Var("t")])),Stats([Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),[DataOp("+",[Var("k"),Int(1)])]),"=",Pick(Var("GF"),"one")),For(VarDef("r"),Range(Var("k"),Int(-1),Int(2)),Stats([Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),[Var("r")]),"=",Subscript(Var("gf_add"),[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),[DataOp("-",[Var("r"),Int(1)])]),Subscript(Var("gf_mul"),[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"r"),[Var("k")]),Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),[Var("r")])])]))])),Assign(Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),[Int(1)]),"=",Subscript(Var("gf_mul"),[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"r"),[Var("k")]),Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"rs"),"g"),[Int(1)])]))]))])),FunDec(VarDef("gf_mul"),[VarDef("a"),VarDef("b")],[VarDef("result")],Stats([VarDef("GF"),Assign(Var("result"),"=",Subscript(Var("gf_exp"),[DataOp("+",[Subscript(Var("gf_log"),[Var("a")]),Subscript(Var("gf_log"),[Var("b")])])]))])),FunDec(VarDef("gf_exp"),[VarDef("a")],[VarDef("result")],Stats([VarDef("GF"),AssignMulti([Var("m"),Var("n")],"=",Subscript(Var("size"),[Var("a")])),Assign(Var("result"),"=",Subscript(Var("zeros"),[Var("m"),Var("n")])),For(VarDef("i"),Range(Int(1),Int(1),Var("m")),Stats([For(VarDef("j"),Range(Int(1),Int(1),Var("n")),Stats([Ifs([ElseIf(DataOp("==",[Subscript(Var("a"),[Var("i"),Var("j")]),DataOp("-",[Var("Inf")])]),Stats([Assign(Subscript(Var("result"),[Var("i"),Var("j")]),"=",Pick(Var("GF"),"zero"))]))],Else(Stats([Assign(Subscript(Var("result"),[Var("i"),Var("j")]),"=",Subscript(Pick(Var("GF"),"exp"),[DataOp("+",[Int(1),Subscript(Var("rem"),[Subscript(Var("a"),[Var("i"),Var("j")]),DataOp("-",[Pick(Var("GF"),"q"),Int(1)])])])]))])))]))]))])),FunDec(VarDef("gf_log"),[VarDef("a")],[VarDef("result")],Stats([VarDef("GF"),AssignMulti([Var("m"),Var("n")],"=",Subscript(Var("size"),[Var("a")])),Assign(Var("result"),"=",Subscript(Var("zeros"),[Var("m"),Var("n")])),For(VarDef("i"),Range(Int(1),Int(1),Var("m")),Stats([For(VarDef("j"),Range(Int(1),Int(1),Var("n")),Stats([Ifs([ElseIf(DataOp("==",[Subscript(Var("a"),[Var("i"),Var("j")]),Pick(Var("GF"),"zero")]),Stats([Assign(Subscript(Var("result"),[Var("i"),Var("j")]),"=",DataOp("-",[Var("Inf")]))]))],Else(Stats([Assign(Subscript(Var("result"),[Var("i"),Var("j")]),"=",DataOp("-",[Subscript(Pick(Var("GF"),"log"),[Subscript(Var("a"),[Var("i"),Var("j")])]),Int(1)]))])))]))]))])),FunDec(VarDef("gf_add"),[VarDef("a"),VarDef("b")],[VarDef("result")],Stats([Assign(Var("result"),"=",Subscript(Var("bitxor"),[Var("a"),Var("b")]))])),FunDec(VarDef("bitxor"),[VarDef("arg1"),VarDef("arg2")],[VarDef("result")],Stats([AssignMulti([Var("errorcode"),Var("byte_vector1"),Var("byte_vector2")],"=",Subscript(Var("common_size"),[Var("arg1"),Var("arg2")])),Subscript(Var("assert"),[DataOp("==",[Var("errorcode"),Int(0)]),String("bitxor"),String("vector dimensions do not match")]),AssignMulti([Var("m"),Var("n")],"=",Subscript(Var("size"),[Var("byte_vector1")])),Assign(Var("result"),"=",Subscript(Var("zeros"),[Var("m"),Var("n")])),For(VarDef("i"),Range(Int(1),Int(1),Var("m")),Stats([For(VarDef("j"),Range(Int(1),Int(1),Var("n")),Stats([Assign(Var("byte1"),"=",Subscript(Var("byte_vector1"),[Var("i"),Var("j")])),Assign(Var("byte2"),"=",Subscript(Var("byte_vector2"),[Var("i"),Var("j")])),Assign(Var("result_byte"),"=",Int(0)),For(VarDef("k"),Range(Int(1),Int(1),Int(8)),Stats([Assign(Var("bit1"),"=",Subscript(Var("rem"),[Var("byte1"),Int(2)])),Assign(Var("bit2"),"=",Subscript(Var("rem"),[Var("byte2"),Int(2)])),Assign(Var("result_bit"),"=",Subscript(Var("xor"),[Var("bit1"),Var("bit2")])),Assign(Var("result_byte"),"=",DataOp("+",[Var("result_byte"),DataOp("*",[Var("result_bit"),DataOp("^",[Int(2),DataOp("-",[Var("k"),Int(1)])])])])),Assign(Var("byte1"),"=",Subscript(Var("fix"),[DataOp("/",[Var("byte1"),Int(2)])])),Assign(Var("byte2"),"=",Subscript(Var("fix"),[DataOp("/",[Var("byte2"),Int(2)])]))])),Assign(Subscript(Var("result"),[Var("i"),Var("j")]),"=",Var("result_byte"))]))]))])),FunDec(VarDef("common_size"),[],[VarDef("errorcode")],Stats([Ifs([ElseIf(DataOp("<",[Var("nargin"),Int(2)]),Stats([Subscript(Var("error"),[String("common_size: only makes sense if nargin >= 2")])]))],()),Subscript(Var("va_start"),[]),For(VarDef("k"),Range(Int(1),Int(1),Var("nargin")),Stats([Assign(Subscript(Var("s"),[Var("k"),Colon]),"=",Subscript(Var("size"),[Subscript(Var("va_arg"),[])]))])),Assign(Var("m"),"=",Subscript(Var("max"),[Var("s")])),Ifs([ElseIf(Subscript(Var("any"),[DataOp("&",[Subscript(Var("any"),[DataOp("'",[DataOp("!=",[Var("s"),Int(1)])])]),Subscript(Var("any"),[DataOp("'",[DataOp("!=",[Var("s"),DataOp("*",[Subscript(Var("ones"),[Var("nargin"),Int(1)]),Var("m")])])])])])]),Stats([Assign(Var("errorcode"),"=",Int(1)),Subscript(Var("va_start"),[]),For(VarDef("k"),Range(Int(1),Int(1),Var("nargin")),Stats([Subscript(Var("vr_val"),[Subscript(Var("va_arg"),[])])]))]))],Else(Stats([Assign(Var("errorcode"),"=",Int(0)),Subscript(Var("va_start"),[]),For(VarDef("k"),Range(Int(1),Int(1),Var("nargin")),Stats([Ifs([ElseIf(DataOp("==",[Subscript(Var("prod"),[Subscript(Var("s"),[Var("k"),Colon])]),Int(1)]),Stats([Subscript(Var("vr_val"),[DataOp("*",[Subscript(Var("va_arg"),[]),Subscript(Var("ones"),[Var("m")])])])]))],Else(Stats([Subscript(Var("vr_val"),[Subscript(Var("va_arg"),[])])])))]))])))])),FunDec(VarDef("viterbi_init"),[],[],Stats([VarDef("DVBT_SETTINGS"),Assign(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"init_kammeyer"),"=",Int(0)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"use_kammeyer"),"=",Int(0)),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"m"),"=",Int(6)),Ifs([ElseIf(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"init_kammeyer"),Stats([Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"g"),"=",Matrix([[Int(1),Int(1),Int(1),Int(1),Int(0),Int(0),Int(1)],[Int(1),Int(0),Int(1),Int(1),Int(0),Int(1),Int(1)]])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"trellis"),"=",Subscript(Var("make_trellis"),[Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"g"),Int(0)]))]))],()),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"init_register"),"=",Subscript(Var("zeros"),[Int(1),Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"m")])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"mother_x"),"=",Matrix([[Int(1),Int(2),Int(3),Int(6)]])),Assign(Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"mother_y"),"=",Matrix([[Int(2),Int(3),Int(5),Int(6)]]))])),FunDec(VarDef("log2"),[VarDef("x")],[VarDef("f"),VarDef("e")],Stats([Ifs([ElseIf(DataOp("!=",[Var("nargin"),Int(1)]),Stats([Subscript(Var("usage"),[String("y = log2 (x) or [f, e] = log2 (x)")])]))],()),Ifs([ElseIf(DataOp("<",[Var("nargout"),Int(2)]),Stats([Assign(Var("f"),"=",DataOp("/",[Subscript(Var("log"),[Var("x")]),Subscript(Var("log"),[Int(2)])]))])),ElseIf(DataOp("==",[Var("nargout"),Int(2)]),Stats([Assign(Var("x"),"=",Subscript(Var("real"),[Var("x")])),Assign(Var("f"),"=",DataOp("+",[Subscript(Var("abs"),[Var("x")]),DataOp("==",[Var("x"),Int(0)])])),Assign(Var("e"),"=",DataOp(".*",[DataOp("+",[Subscript(Var("floor"),[DataOp("/",[Subscript(Var("log"),[Var("f")]),Subscript(Var("log"),[Int(2)])])]),Int(1)]),DataOp("!=",[Var("x"),Int(0)])])),Assign(Var("f"),"=",DataOp("./",[DataOp(".*",[Subscript(Var("sign"),[Var("x")]),Var("f")]),DataOp(".^",[Int(2),Var("e")])]))]))],Else(Stats([Subscript(Var("error"),[String("log2 takes at most 2 output arguments")])])))])),FunDec(VarDef("dvbt_send_init"),[],[],Stats([VarDef("DVBT_SETTINGS"),VarDef("DVBT_STATE_SENDER"),Assign(Var("DVBT_STATE_SENDER"),"=",Matrix([])),Assign(Pick(Var("DVBT_STATE_SENDER"),"scrambler"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_STATE_SENDER"),"scrambler"),"prbs_register"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"init_prbs_register")),Assign(Pick(Var("DVBT_STATE_SENDER"),"outer_interleaver"),"=",Matrix([])),Switch(Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"init"),[Case(String("zero"),Stats([Assign(Pick(Pick(Var("DVBT_STATE_SENDER"),"outer_interleaver"),"queue"),"=",Subscript(Var("zeros"),[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"queue_size"),Int(1)]))])),Case(String("rand"),Stats([Assign(Pick(Pick(Var("DVBT_STATE_SENDER"),"outer_interleaver"),"queue"),"=",Subscript(Var("floor"),[DataOp("*",[Subscript(Var("rand"),[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"queue_size"),Int(1)]),Float(2.558999938964844e+02)])]))])),Case(String("prbs"),Stats([AssignMulti([Pick(Pick(Var("DVBT_STATE_SENDER"),"outer_interleaver"),"queue"),Var("dont_care")],"=",Subscript(Var("scrambler_prbs"),[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"queue_size"),Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"init_prbs_register")]))]))],Stats([Stats([Subscript(Var("error"),[String("unknown init mode for outer interleaver.")])])])),Assign(Pick(Var("DVBT_STATE_SENDER"),"bit_stream"),"=",Matrix([])),Assign(Pick(Var("DVBT_STATE_SENDER"),"convolutional_code"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"init_register")),Assign(Pick(Var("DVBT_STATE_SENDER"),"n"),"=",Int(0)),Assign(Pick(Var("DVBT_STATE_SENDER"),"l"),"=",Int(0)),Assign(Pick(Var("DVBT_STATE_SENDER"),"m"),"=",Int(0))])),FunDec(VarDef("dvbt_receive_init"),[],[],Stats([VarDef("DVBT_SETTINGS"),VarDef("DVBT_STATE_RECEIVER"),Assign(Var("DVBT_STATE_RECEIVER"),"=",Matrix([])),Assign(Pick(Var("DVBT_STATE_RECEIVER"),"scrambler"),"=",Matrix([])),Assign(Pick(Pick(Var("DVBT_STATE_RECEIVER"),"scrambler"),"prbs_register"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"init_prbs_register")),Assign(Pick(Pick(Var("DVBT_STATE_RECEIVER"),"scrambler"),"packet_count"),"=",Int(0)),Assign(Pick(Var("DVBT_STATE_RECEIVER"),"outer_interleaver"),"=",Matrix([])),Switch(Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"init"),[Case(String("zero"),Stats([Assign(Pick(Pick(Var("DVBT_STATE_RECEIVER"),"outer_interleaver"),"queue"),"=",Subscript(Var("zeros"),[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"queue_size"),Int(1)]))])),Case(String("rand"),Stats([Assign(Pick(Pick(Var("DVBT_STATE_RECEIVER"),"outer_interleaver"),"queue"),"=",Subscript(Var("floor"),[DataOp("*",[Subscript(Var("rand"),[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"queue_size"),Int(1)]),Float(2.558999938964844e+02)])]))])),Case(String("prbs"),Stats([AssignMulti([Pick(Pick(Var("DVBT_STATE_RECEIVER"),"outer_interleaver"),"queue"),Var("dont_care")],"=",Subscript(Var("scrambler_prbs"),[Pick(Pick(Var("DVBT_SETTINGS"),"outer_interleaver"),"queue_size"),Pick(Pick(Var("DVBT_SETTINGS"),"scrambler"),"init_prbs_register")]))]))],Stats([Stats([Subscript(Var("error"),[String("unknown init mode for outer interleaver.")])])])),Assign(Pick(Var("DVBT_STATE_RECEIVER"),"byte_stream"),"=",Matrix([])),Assign(Pick(Var("DVBT_STATE_RECEIVER"),"convolutional_code"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"convolutional_code"),"init_register")),Assign(Pick(Var("DVBT_STATE_RECEIVER"),"n"),"=",Int(0)),Assign(Pick(Var("DVBT_STATE_RECEIVER"),"l"),"=",Int(0)),Assign(Pick(Var("DVBT_STATE_RECEIVER"),"m"),"=",Int(0))])),FunDec(VarDef("map"),[VarDef("data_in")],[VarDef("data_out")],Stats([VarDef("DUMP"),VarDef("DVBT_SETTINGS"),VarDef("DVBT_STATE_SENDER"),Assign(Var("m"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits")),AssignMulti([Var("n"),Var("should_be_m")],"=",Subscript(Var("size"),[Var("data_in")])),Subscript(Var("assert"),[DataOp("==",[Var("should_be_m"),Var("m")]),String("map"),String("invalid number of bits")]),Subscript(Var("fprintf"),[Pick(Var("DUMP"),"sender"),String("  map (%dx%d)\n"),Var("n"),Var("m")]),Assign(Var("data_out"),"=",Subscript(Var("zeros"),[Var("n"),Int(1)])),For(VarDef("ii"),Range(Int(1),Int(1),Var("n")),Stats([Assign(Var("bits"),"=",Subscript(Var("data_in"),[Var("ii"),Colon])),Assign(Var("symbol"),"=",Matrix([[Int(0),Int(0)]])),For(VarDef("jj"),Range(Int(1),Int(2),Var("m")),Stats([Assign(Var("bit1"),"=",Subscript(Var("bits"),[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bit_ordering"),[Var("jj")])])),Assign(Var("bit2"),"=",Subscript(Var("bits"),[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bit_ordering"),[DataOp("+",[Var("jj"),Int(1)])])])),Assign(Var("pair"),"=",DataOp("-",[Matrix([[Int(1),Int(1)]]),DataOp("*",[Int(2),Matrix([[Var("bit1"),Var("bit2")]])])])),Ifs([ElseIf(DataOp("==",[Var("symbol"),Int(0)]),Stats([Assign(Var("symbol"),"=",Var("pair"))]))],Else(Stats([Assign(Var("symbol"),"=",DataOp(".*",[DataOp("+",[Var("pair"),Matrix([[Int(2),Int(2)]])]),Var("symbol")]))])))])),Assign(Var("symbol"),"=",DataOp("+",[Var("symbol"),DataOp(".*",[Pick(Pick(Var("DVBT_SETTINGS"),"map"),"offset"),Subscript(Var("sign"),[Var("symbol")])])])),Assign(Subscript(Var("data_out"),[Var("ii")]),"=",DataOp("*",[Var("symbol"),Matrix([[Complex(Int(1),Int(0))],[Complex(Int(0),Int(1))]])]))])),Assign(Var("raw_data"),"=",Subscript(Var("reshape"),[Matrix([[DataOp("'",[Subscript(Var("real"),[Var("data_out")])])],[DataOp("'",[Subscript(Var("imag"),[Var("data_out")])])]]),DataOp("*",[Int(2),Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"payload")]),Int(1)])),Subscript(Var("fwrite"),[Pick(Var("DUMP"),"map"),Var("raw_data"),String("float32")])])),FunDec(VarDef("demap"),[VarDef("data_in")],[VarDef("data_out")],Stats([VarDef("DUMP"),VarDef("DVBT_SETTINGS"),VarDef("DVBT_STATE_RECEIVER"),Assign(Var("m"),"=",Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits")),AssignMulti([Var("n"),Var("should_be_one")],"=",Subscript(Var("size"),[Var("data_in")])),Subscript(Var("assert"),[DataOp("==",[Var("should_be_one"),Int(1)]),String("map"),String("column vector expected")]),Subscript(Var("fprintf"),[Pick(Var("DUMP"),"receiver"),String("  demap (%d)\n"),Var("n")]),Assign(Var("raw_data"),"=",Subscript(Var("reshape"),[Matrix([[DataOp("'",[Subscript(Var("real"),[Var("data_in")])])],[DataOp("'",[Subscript(Var("imag"),[Var("data_in")])])]]),DataOp("*",[Int(2),Pick(Pick(Var("DVBT_SETTINGS"),"symbol_length"),"payload")]),Int(1)])),Subscript(Var("fwrite"),[Pick(Var("DUMP"),"demap"),Var("raw_data"),String("float32")]),Assign(Var("data_out"),"=",Subscript(Var("zeros"),[Var("n"),Var("m")])),For(VarDef("ii"),Range(Int(1),Int(1),Var("n")),Stats([Assign(Var("symbol"),"=",Matrix([[Subscript(Var("real"),[Subscript(Var("data_in"),[Var("ii")])]),Subscript(Var("imag"),[Subscript(Var("data_in"),[Var("ii")])])]])),Assign(Var("bits"),"=",Subscript(Var("zeros"),[Int(1),Var("m")])),Assign(Var("symbol"),"=",DataOp("-",[Var("symbol"),DataOp(".*",[Pick(Pick(Var("DVBT_SETTINGS"),"map"),"offset"),Subscript(Var("sign"),[Var("symbol")])])])),Assign(Var("weight"),"=",DataOp("^",[Int(2),DataOp("-",[DataOp("/",[Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits"),Int(2)]),Int(1)])])),Assign(Var("confidence"),"=",DataOp("^",[Int(2),DataOp("-",[DataOp("/",[Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bits"),Int(2)]),Int(1)])])),For(VarDef("jj"),Range(Int(1),Int(2),Var("m")),Stats([Assign(Var("bit1"),"=",DataOp("+",[DataOp("*",[Float(-5.000000000000000e-01),DataOp("/",[Subscript(Var("symbol"),[Int(1)]),Var("confidence")])]),Float(5.000000000000000e-01)])),Assign(Var("bit2"),"=",DataOp("+",[DataOp("*",[Float(-5.000000000000000e-01),DataOp("/",[Subscript(Var("symbol"),[Int(2)]),Var("confidence")])]),Float(5.000000000000000e-01)])),Assign(Subscript(Var("bits"),[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bit_ordering"),[Var("jj")])]),"=",Var("bit1")),Assign(Subscript(Var("bits"),[Subscript(Pick(Pick(Var("DVBT_SETTINGS"),"map"),"bit_ordering"),[DataOp("+",[Var("jj"),Int(1)])])]),"=",Var("bit2")),Assign(Var("symbol"),"=",DataOp("-",[Subscript(Var("abs"),[Var("symbol")]),Var("weight")])),Assign(Var("weight"),"=",DataOp("/",[Var("weight"),Int(2)]))])),Assign(Subscript(Var("data_out"),[Var("ii"),Colon]),"=",Var("bits"))])),Ifs([ElseIf(DataOp("!",[Pick(Pick(Var("DVBT_SETTINGS"),"map"),"use_softbits")]),Stats([Assign(Var("data_out"),"=",DataOp(">=",[Var("data_out"),Float(5.000000000000000e-01)]))]))],())])),FunDec(VarDef("dump_close"),[],[],Stats([VarDef("DUMP"),Subscript(Var("fclose"),[Pick(Var("DUMP"),"main")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"sender")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"receiver")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"channel")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"scramble")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"descramble")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"rs_encode")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"rs_decode")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"outer_interleave")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"outer_deinterleave")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"convolutional_encode")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"convolutional_decode")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"puncturing")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"depuncturing")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"inner_interleave")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"inner_deinterleave")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"map")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"demap")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"insert_reference_signals")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"remove_reference_signals")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"ofdm_encode")]),Subscript(Var("fclose"),[Pick(Var("DUMP"),"ofdm_decode")])]))])