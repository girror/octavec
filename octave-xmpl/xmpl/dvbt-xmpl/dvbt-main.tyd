function [ data_out ] = dvbt_receive._matrix(_int) ( data_channel_out )
    {
      fprintf.lib ( '  dvbt_receive (%d)
' , length.lib ( data_channel_out ) )
      PACKETS_PER_PRBS_PERIOD
      global dvbt_receive_current_packet
      global dvbt_receive_prbs_register
      global dvbt_receive_conv_regigster
      dvbt_receive_current_packet = 0
      data = data_channel_out
      [ x , y ] = depuncturing._matrix(_int) ( data )
      data = convolutional_decode._matrix(_float)_matrix(_int) ( x , y )
      data = byte_from_bit_vector._matrix(_int) ( data )
      data = outer_deinterleave._matrix(_int) ( data )
      data = rs_decode._matrix(_int) ( data )
      data = remove_sync_and_unscramble._matrix(_int) ( data )
      data_out = data
      dvbt_receive_current_packet = rem._int_int ( dvbt_receive_current_packet + 1 , PACKETS_PER_PRBS_PERIOD )
    }
end
function [ data_out ] = remove_sync_and_unscramble._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    remove_sync_and_unscramble (%d)
' , length.lib ( data_in ) )
      PACKET_LENGTH
      NET_PACKET_LENGTH
      PACKETS_PER_PRBS_PERIOD
      SYNC_BYTE_VALUE
      INV_SYNC_BYTE_VALUE
      INIT_PRBS_REGISTER
      dvbt_receive_current_packet
      dvbt_receive_prbs_register
      if dvbt_receive_current_packet == 0
        then
        {
          dvbt_receive_prbs_register = INIT_PRBS_REGISTER
          sync_byte = INV_SYNC_BYTE_VALUE
        }
        else
        {
          dvbt_receive_current_packet ( 1 )
          sync_byte = SYNC_BYTE_VALUE
        }
      endif
      ifthen (~=data_in ( 1 )->sync_byte)
        then
        {
          fprintf.lib ( 'warning: actual sync byte (%2.2x) does not match
' , data_in ( 1 ) )
          fprintf.lib ( 'warning: expected sync byte (%2.2x).
' , sync_byte )
          fprintf.lib ( 'warning: (current_packet=%d)
' , dvbt_receive_current_packet )
        }
      endifthen
      [ prbs , dvbt_receive_prbs_register ] = prbs_sequence._int_matrix(_int) ( NET_PACKET_LENGTH , dvbt_receive_prbs_register )
      data_out = byte_xor._matrix(_int)_matrix(_int) ( data_in ( 2 : 1 : PACKET_LENGTH ) , prbs )
    }
end
function [ data_out ] = rs_decode._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    rs_decode (%d)
' , length.lib ( data_in ) )
      PACKET_LENGTH
      RS_PARITY_BYTES
      ifthen length.lib ( data_in ) ~= PACKET_LENGTH + RS_PARITY_BYTES
        then
        {
          fprintf.lib ( 'error: rs_decode: packet size %d is not expected %d.
' , length.lib ( data_in ) , PACKET_LENGTH + RS_PARITY_BYTES )
          return
        }
      endifthen
      ifthen ~= ( data_in ( PACKET_LENGTH + 1 : 1 : PACKET_LENGTH + RS_PARITY_BYTES ) , zeros.lib ( RS_PARITY_BYTES , 1 ) )
        then
        fprintf.lib ( 'error: parity
' )
      endifthen
      data_out = data_in ( 1 : 1 : PACKET_LENGTH )
    }
end
function [ data_out ] = outer_deinterleave._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    outer_deinterleave (%d)
' , length.lib ( data_in ) )
      PACKET_LENGTH
      RS_PARITY_BYTES
      OI_I
      OI_M
      data = reshape._matrix(_int)_int_int ( data_in , OI_M , OI_I )
      data_out = reshape._matrix(_int)_int_int ( .' ( data ) , PACKET_LENGTH + RS_PARITY_BYTES , 1 )
    }
end
function [ data_out ] = byte_from_bit_vector._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    byte_from_bit_vector (%d)
' , length.lib ( data_in ) )
      data_out = zeros.lib ( length.lib ( data_in ) / 8 , 1 )
      for i = 1 : 1 : length.lib ( data_out )
         {
           data_byte = 0
           for j = 1 : 1 : 8
              {
                if data_in ( (8 * i - 1) + j ) <= 0.5
                  then
                  data_bit = 0
                  else
                  data_bit = 1
                endif
                data_byte = (2 * data_byte) + data_bit
              }
           endfor
           data_out ( i ) = data_byte
         }
      endfor
    }
end
function [ data ] = convolutional_decode._matrix(_float)_matrix(_int) ( x , y )
    {
      fprintf.lib ( '    convolutional_decode (%d)
' , length.lib ( x ) )
      INIT_CONV_REGISTER
      dvbt_receive_current_packet
      global dvbt_receive_conv_register
      ifthen dvbt_receive_current_packet == 0
        then
        dvbt_receive_conv_register = INIT_CONV_REGISTER
      endifthen
      data = zeros.lib ( length.lib ( x ) , 1 )
      for i = 1 : 1 : length.lib ( data )
         {
           data_x = x ( i )
           for j = [ 1 2 3 6 ]
              data_x = soft_xor._float_int ( data_x , dvbt_receive_conv_register ( j ) )
           endfor
           data_y = y ( i )
           for j = [ 2 3 5 6 ]
              data_y = soft_xor._int_int ( data_y , dvbt_receive_conv_register ( j ) )
           endfor
           ifthen data_x == 0.5 & cast( data_y ) == 0.5
             then
             fprintf.lib ( 'warning: undefined symbol %d' , i )
           endifthen
           ifthen cast( data_x < 0.5 & data_y ) > 0.5 | data_x > 0.5 & cast( data_y ) < 0.5
             then
             fprintf.lib ( 'warning: contradicting symbol %d' , i )
           endifthen
           if data_x < 0.5 | cast( data_y ) < 0.5
             then
             data ( i ) = 0
             else
             if data_x > 0.5 | cast( data_y ) > 0.5
               then
               data ( i ) = 1
               else
               fprintf.lib ( 'error: internal error at symbol %d' , i )
             endif
           endif
           dvbt_receive_conv_register = [ data ( i ) dvbt_receive_conv_register ( 2 : 1 : 6 ) ]
         }
      endfor
    }
end
function [ x ] = soft_xor._int_int ( a , b )
    if cast( b ) < 0.5
      then
      x = a
      else
      if cast( a ) == 0.5
        then
        x = 0.5
        else
        ifthen cast( b ) > 0.5
          then
          x = 1 - a
        endifthen
      endif
    endif
end
function [ x ] = soft_xor._float_int ( a , b )
    if cast( b ) < 0.5
      then
      x = a
      else
      if a == 0.5
        then
        x = 0.5
        else
        ifthen cast( b ) > 0.5
          then
          x = cast( 1 ) - a
        endifthen
      endif
    endif
end
function [ x , y ] = depuncturing._matrix(_int) ( data )
    {
      fprintf.lib ( '    depuncturing (%d)
' , length.lib ( data ) )
      PUNCTURING_MODE
      if PUNCTURING_MODE == 0.5
        then
        {
          x = zeros.lib ( length.lib ( data ) / 2 , 1 )
          y = zeros.lib ( length.lib ( data ) / 2 , 1 )
          for i = 1 : 1 : length.lib ( x )
             {
               x ( i ) = data ( (2 * i - 1) + 1 )
               y ( i ) = data ( (2 * i - 1) + 2 )
             }
          endfor
        }
        else
        if PUNCTURING_MODE == 0.66666668653488159
          then
          {
            x = zeros.lib ( (2 * length.lib ( data )) / 3 , 1 )
            y = zeros.lib ( (2 * length.lib ( data )) / 3 , 1 )
            for i = 1 : 2 : length.lib ( x )
               {
                 x ( i + 0 ) = data ( (3 * i - 1) / 2 + 1 )
                 x ( i + 1 ) = 0.5
                 y ( i + 0 ) = data ( (3 * i - 1) / 2 + 2 )
                 y ( i + 1 ) = data ( (3 * i - 1) / 2 + 3 )
               }
            endfor
          }
          else
          {
            fprintf.lib ( 'puncturing mode %g not implemented.
' , PUNCTURING_MODE )
            return
          }
        endif
      endif
    }
end
function [ data_channel_out ] = channel_model._matrix(_int) ( data_channel_in )
    {
      fprintf.lib ( '  channel_model (%d)
' , length.lib ( data_channel_in ) )
      data_channel_out = data_channel_in
    }
end
function [ data_channel_in ] = dvbt_send._matrix(_int) ( data_in )
    {
      fprintf.lib ( '  dvbt_send (%d)
' , length.lib ( data_in ) )
      PACKETS_PER_PRBS_PERIOD
      global dvbt_send_current_packet
      global dvbt_send_prbs_register
      global dvbt_send_conv_regigster
      dvbt_send_current_packet = 0
      data = data_in
      data = sync_and_scramble._matrix(_int) ( data )
      data = rs_encode._matrix(_int) ( data )
      data = outer_interleave._matrix(_int) ( data )
      data = bit_from_byte_vector._matrix(_int) ( data )
      [ x , y ] = convolutional_encode._matrix(_int) ( data )
      data = puncturing._matrix(_int)_matrix(_int) ( x , y )
      data_channel_in = data
      dvbt_send_current_packet = rem._int_int ( dvbt_send_current_packet + 1 , PACKETS_PER_PRBS_PERIOD )
    }
end
function [ data ] = puncturing._matrix(_int)_matrix(_int) ( x , y )
    {
      fprintf.lib ( '    puncturing (%d)
' , length.lib ( x ) )
      PUNCTURING_MODE
      if PUNCTURING_MODE == 0.5
        then
        {
          data = zeros.lib ( (2 * length.lib ( x )) , 1 )
          for i = 1 : 1 : length.lib ( x )
             {
               data ( (2 * i - 1) + 1 ) = x ( i )
               data ( (2 * i - 1) + 2 ) = y ( i )
             }
          endfor
        }
        else
        if PUNCTURING_MODE == 0.66666668653488159
          then
          {
            data = zeros.lib ( (3 * length.lib ( x )) / 2 , 1 )
            for i = 1 : 2 : length.lib ( x )
               {
                 data ( (3 * i - 1) / 2 + 1 ) = x ( i )
                 data ( (3 * i - 1) / 2 + 2 ) = y ( i )
                 data ( (3 * i - 1) / 2 + 3 ) = y ( i + 1 )
               }
            endfor
          }
          else
          {
            fprintf.lib ( 'puncturing mode %g not implemented.
' , PUNCTURING_MODE )
            return
          }
        endif
      endif
    }
end
function [ x , y ] = convolutional_encode._matrix(_int) ( data )
    {
      fprintf.lib ( '    convolutional_encode (%d)
' , length.lib ( data ) )
      INIT_CONV_REGISTER
      dvbt_send_current_packet
      global dvbt_send_conv_register
      ifthen dvbt_send_current_packet == 0
        then
        dvbt_send_conv_register = INIT_CONV_REGISTER
      endifthen
      x = zeros.lib ( length.lib ( data ) , 1 )
      y = zeros.lib ( length.lib ( data ) , 1 )
      for i = 1 : 1 : length.lib ( data )
         {
           data_in = data ( i )
           x ( i ) = data_in
           for j = [ 1 2 3 6 ]
              x ( i ) = xor._int_int ( x ( i ) , dvbt_send_conv_register ( j ) )
           endfor
           y ( i ) = data_in
           for j = [ 2 3 5 6 ]
              y ( i ) = xor._int_int ( y ( i ) , dvbt_send_conv_register ( j ) )
           endfor
           dvbt_send_conv_register = [ data_in dvbt_send_conv_register ( 2 : 1 : 6 ) ]
         }
      endfor
    }
end
function [ data_out ] = bit_from_byte_vector._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    bit_from_byte_vector (%d)
' , length.lib ( data_in ) )
      data_out = zeros.lib ( (length.lib ( data_in ) * 8) , 1 )
      for i = 1 : 1 : length.lib ( data_in )
         {
           data_byte = data_in ( i )
           for j = 1 : 1 : 8
              {
                ifthen cast( data_byte ) >= 127.5
                  then
                  data_out ( (8 * i - 1) + j ) = 1
                endifthen
                data_byte = (rem._int_int ( data_byte , 128 ) * 2)
              }
           endfor
         }
      endfor
    }
end
function [ data_out ] = outer_interleave._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    outer_interleave (%d)
' , length.lib ( data_in ) )
      PACKET_LENGTH
      RS_PARITY_BYTES
      OI_I
      OI_M
      data = reshape._matrix(_int)_int_int ( data_in , OI_I , OI_M )
      data_out = reshape._matrix(_int)_int_int ( .' ( data ) , PACKET_LENGTH + RS_PARITY_BYTES , 1 )
    }
end
function [ retval ] = reshape._matrix(_int)_int_int ( a , m , n )
    {
      ifthen (&0->(==2->prod.lib ( size.lib ( m ) )))
        then
        {
          n = m ( 2 )
          m = m ( 1 )
          nargin = 3
        }
      endifthen
      if nargin == 3
        then
        {
          [ nr , nc ] = size.lib ( a )
          if (nr * nc) == (m * n)
            then
            {
              retval = zeros.lib ( m , n )
              ()
              retval ( : ) = a
            }
            else
            error.lib ( 'reshape: sizes must match' )
          endif
        }
        else
        usage.lib ( 'reshape (a, m, n) or reshape (a, size (b))' )
      endif
    }
end
function [ data_out ] = rs_encode._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    rs_encode (%d)
' , length.lib ( data_in ) )
      PACKET_LENGTH
      RS_PARITY_BYTES
      ifthen length.lib ( data_in ) ~= PACKET_LENGTH
        then
        {
          fprintf.lib ( 'error: rs_endcode: packet size %d is not expected %d.
' , length.lib ( data_in ) , PACKET_LENGTH )
          return
        }
      endifthen
      data_out = [ data_in ; zeros.lib ( RS_PARITY_BYTES , 1 ) ]
    }
end
function [ data_out ] = sync_and_scramble._matrix(_int) ( data_in )
    {
      fprintf.lib ( '    sync_and_scramble (%d)
' , length.lib ( data_in ) )
      PACKET_LENGTH
      NET_PACKET_LENGTH
      PACKETS_PER_PRBS_PERIOD
      SYNC_BYTE_VALUE
      INV_SYNC_BYTE_VALUE
      INIT_PRBS_REGISTER
      dvbt_send_current_packet
      dvbt_send_prbs_register
      global dvbt_send_convolution_state
      if dvbt_send_current_packet == 0
        then
        {
          dvbt_send_prbs_register = INIT_PRBS_REGISTER
          sync_byte = INV_SYNC_BYTE_VALUE
        }
        else
        {
          dvbt_send_current_packet ( 1 )
          sync_byte = SYNC_BYTE_VALUE
        }
      endif
      [ prbs , dvbt_send_prbs_register ] = prbs_sequence._int_matrix(_int) ( NET_PACKET_LENGTH , dvbt_send_prbs_register )
      data_out = [ sync_byte ; byte_xor._matrix(_int)_matrix(_int) ( data_in , prbs ) ]
    }
end
function [ result ] = byte_xor._matrix(_int)_matrix(_int) ( byte_vector1 , byte_vector2 )
    {
      fprintf.lib ( '      byte_xor
' )
      result = byte_vector1
      for i = 1 : 1 : length.lib ( byte_vector1 )
         {
           byte1 = byte_vector1 ( i )
           byte2 = byte_vector2 ( i )
           result_byte = 0
           for j = 1 : 1 : 8
              {
                bit1 = rem._int_int ( byte1 , 2 )
                bit2 = rem._int_int ( byte2 , 2 )
                result_bit = xor._int_int ( bit1 , bit2 )
                result_byte = result_byte + (result_bit * 2 ^ j - 1)
                byte1 = fix.lib ( byte1 / 2 )
                byte2 = fix.lib ( byte2 / 2 )
              }
           endfor
           result ( i ) = result_byte
         }
      endfor
    }
end
function [ retval ] = rem._int_int ( x , y )
    {
      usage_msg = 'rem (x, y)'
      ()
      ifthen (&is_scalar._int ( x )|is_scalar._int ( y )->any.lib ( ~= ( size.lib ( x ) , size.lib ( y ) ) ))
        then
        error.lib ( 'rem: argument sizes must agree' )
      endifthen
      ifthen | ( any.lib ( any.lib ( imag.lib ( x ) ) ) , any.lib ( any.lib ( imag.lib ( y ) ) ) )
        then
        error.lib ( 'rem: complex arguments are not allowed' )
      endifthen
      retval = x - y .* fix.lib ( x ./ y )
    }
end
function [ sequence , prbs_register_out ] = prbs_sequence._int_matrix(_int) ( byte_length , prbs_register )
    {
      fprintf.lib ( '      prbs_sequence
' )
      bit_length = (8 * byte_length)
      bit_sequence = zeros.lib ( bit_length , 1 )
      for i = 1 : 1 : bit_length
         {
           new_bit = xor._int_int ( prbs_register ( 14 ) , prbs_register ( 15 ) )
           prbs_register = [ new_bit prbs_register ( 1 : 1 : 14 ) ]
           bit_sequence ( i ) = new_bit
         }
      endfor
      sequence = zeros.lib ( byte_length , 1 )
      for i = 1 : 1 : byte_length
         for j = 1 : 1 : 8
            sequence ( i ) = sequence ( i ) + (bit_sequence ( (8 * i - 1) + j ) * 2 ^ 8 - j)
         endfor
      endfor
      prbs_register_out = prbs_register
    }
end
function [ z ] = xor._int_int ( x , y )
    if (|is_scalar._int ( x )|is_scalar._int ( y )->== ( size.lib ( x ) , size.lib ( y ) ))
      then
      z = logical._int ( x | y - x & y )
      else
      error.lib ( 'xor: x and y must be of common size or scalars' )
    endif
end
function [ y ] = logical._int ( x )
    if islogical.lib ( x ) | isempty.lib ( x )
      then
      y = x
      else
      if isnumeric.lib ( x )
        then
        y = x ~= 0
        else
        error.lib ( 'logical not defined for type `%s'' , typeinfo.lib ( x ) )
      endif
    endif
end
function [ ] = global_settings. ( )
    {
      global PACKET_LENGTH
      global NET_PACKET_LENGTH
      global PACKETS_PER_PRBS_PERIOD
      global SYNC_BYTE_VALUE
      global INV_SYNC_BYTE_VALUE
      global INIT_PRBS_REGISTER
      global RS_PARITY_BYTES
      global OI_I
      global OI_M
      global INIT_CONV_REGISTER
      global PUNCTURING_MODE
      global QAM_MODE
      global LOG_QAM_MODE
      ffffffff = flipud._matrix(_int) ( [ 1 2 ] )
      rrrrrrrr = rows._matrix(_int) ( [ 1 2 ] )
      ffxxxxxx = diff._matrix(_int)_int ( [ 1 2 8 ] , 1 )
      PACKETS_PER_PRBS_PERIOD = 8
      PACKET_LENGTH = 188
      NET_PACKET_LENGTH = PACKET_LENGTH - 1
      SYNC_BYTE_VALUE = hex2dec._string ( '47' )
      INV_SYNC_BYTE_VALUE = hex2dec._string ( 'b8' )
      INIT_PRBS_REGISTER = [ 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 ]
      RS_PARITY_BYTES = 16
      OI_I = 12
      OI_M = 17
      INIT_CONV_REGISTER = zeros.lib ( 1 , 6 )
      PUNCTURING_MODE = 0.66666668653488159
      QAM_MODE = 16
      LOG_QAM_MODE = log2._int ( QAM_MODE )
    }
end
function [ f ] = log2._int ( x )
    {
      ()
      f = log.lib ( x ) / log.lib ( 2 )
    }
end
function [ d ] = hex2dec._string ( h )
    d = base2dec._string_int ( h , 16 )
end
function [ out ] = base2dec._string_int ( d , base )
    {
      ()
      symbols = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
      if is_scalar._int ( base )
        then
        error.lib ( 'base2dec: cannot convert from several bases at once.' )
        else
        if base < 2 | base > length.lib ( symbols )
          then
          error.lib ( 'base2dec: base must be between 2 and 36 or a string of symbols' )
          else
          d = toupper.lib ( d )
        endif
      endif
      d = strjust._string_string ( d , 'right' )
      table = (*NaN->ones.lib ( 256 , 1 ))
      table ( toascii.lib ( symbols ( 1 : 1 : base ) ) ) = 0 : 1 : base - 1
      table ( toascii.lib ( ' ' ) ) = 0
      d = reshape._matrix(_int)_matrix(_int) ( table ( toascii.lib ( d ) ) , size.lib ( d ) )
      out = * ( d , (.^base->'(columns._matrix(_int) ( d )-1:-1:0)) )
    }
end
function [ nc ] = columns._matrix(_int) ( x )
    {
      ()
      [ nr , nc ] = size.lib ( x )
    }
end
function [ retval ] = reshape._matrix(_int)_matrix(_int) ( a , m )
    {
      ifthen (==2->prod.lib ( size.lib ( m ) ))
        then
        {
          n = m ( 2 )
          m = m ( 1 )
          nargin = 3
        }
      endifthen
      if nargin == 3
        then
        {
          [ nr , nc ] = size.lib ( a )
          if (nr * nc) == (m * n)
            then
            {
              retval = zeros.lib ( m , n )
              ()
              retval ( : ) = a
            }
            else
            error.lib ( 'reshape: sizes must match' )
          endif
        }
        else
        usage.lib ( 'reshape (a, m, n) or reshape (a, size (b))' )
      endif
    }
end
function [ x ] = strjust._string_string ( x , just )
    {
      ()
      ()
      just = tolower.lib ( just )
      dfi = do_fortran_indexing
      unwind_protect
        {
          do_fortran_indexing = 1
          idx = find.lib ( (==0->toascii.lib ( x )) )
          ifthen isempty.lib ( idx )
            then
            x ( idx ) = ' '
          endifthen
          [ nr , nc ] = size.lib ( x )
          idx = ' ( x ) ~= ' '
          if strcmp._string_string ( just , 'right' )
            then
            {
              [ N , hi ] = max.lib ( cumsum.lib ( idx ) )
              shift = hi
            }
            else
            if strcmp._string_string ( just , 'left' )
              then
              {
                [ N , lo ] = max.lib ( cumsum.lib ( flipud._matrix(_int) ( idx ) ) )
                shift = nc - lo
              }
              else
              {
                [ N , hi ] = max.lib ( cumsum.lib ( idx ) )
                [ N , lo ] = max.lib ( cumsum.lib ( flipud._matrix(_int) ( idx ) ) )
                shift = ceil.lib ( nc - lo - hi / 2 )
              }
            endif
          endif
          idx = rem._matrix(_int)_int ( + ( * ( ones.lib ( nr , 1 ) , [ 0 : 1 : nc - 1 ] ) , (*'(shift)->ones.lib ( 1 , nc )) ) , nc )
          x = x ( + ( (*nr->idx) , * ( ' ( [ 1 : 1 : nr ] ) , ones.lib ( 1 , nc ) ) ) )
        }
      unwind_protect_cleanup
        do_fortran_indexing = dfi
      end_unwind_protect
    }
end
function [ retval ] = rem._matrix(_int)_int ( x , y )
    {
      usage_msg = 'rem (x, y)'
      ()
      ifthen (&is_scalar._matrix(_int) ( x )|is_scalar._int ( y )->any.lib ( ~= ( size.lib ( x ) , size.lib ( y ) ) ))
        then
        error.lib ( 'rem: argument sizes must agree' )
      endifthen
      ifthen | ( any.lib ( any.lib ( (imag.lib->x) ) ) , any.lib ( any.lib ( imag.lib ( y ) ) ) )
        then
        error.lib ( 'rem: complex arguments are not allowed' )
      endifthen
      retval = - ( x , (.*y->(fix.lib->(./y->x))) )
    }
end
function [ retval ] = is_scalar._matrix(_int) ( x )
    {
      retval = 0
      {
        [ nr , nc ] = size.lib ( x )
        retval = nr == 1 & nc == 1
      }
    }
end
function [ status ] = strcmp._string_string ( s1 , s2 )
    {
      ()
      status = 0
      {
        [ r1 , c1 ] = size.lib ( s1 )
        [ r2 , c2 ] = size.lib ( s2 )
        ifthen r1 == r2 & c1 == c2
          then
          if c1 == 0
            then
            status = 1
            else
            status = all.lib ( all.lib ( s1 == s2 ) )
          endif
        endifthen
      }
    }
end
function [ x ] = diff._matrix(_int)_int ( x , k )
    {
      if is_scalar._int ( k ) & k == round.lib ( k ) & k >= 0
        then
        error.lib ( 'diff: k must be a nonnegative integer' )
        else
        ifthen k == 0
          then
          return
        endifthen
      endif
      if is_vector._matrix(_int) ( x )
        then
        {
          n = length.lib ( x )
          if n <= k
            then
            x = [ ]
            else
            for i = 1 : 1 : k
               x = - ( x ( 2 : 1 : n - i + 1 ) , x ( 1 : 1 : n - i ) )
            endfor
          endif
        }
        else
        {
          n = rows._matrix(_nil) ( x )
          if n <= k
            then
            x = [ ]
            else
            for i = 1 : 1 : k
               x = - ( x ( 2 : 1 : n - i + 1 , : ) , x ( 1 : 1 : n - i , : ) )
            endfor
          endif
        }
      endif
    }
end
function [ nr ] = rows._matrix(_nil) ( x )
    {
      ()
      [ nr , nc ] = size.lib ( x )
    }
end
function [ retval ] = is_vector._matrix(_int) ( x )
    {
      retval = 0
      {
        [ nr , nc ] = size.lib ( x )
        retval = nr == 1 & nc >= 1 | nc == 1 & nr >= 1
      }
    }
end
function [ retval ] = is_scalar._int ( x )
    {
      retval = 0
      {
        [ nr , nc ] = size.lib ( x )
        retval = nr == 1 & nc == 1
      }
    }
end
function [ y ] = flipud._matrix(_int) ( x )
    {
      ()
      nr = rows._matrix(_int) ( x )
      y = x ( nr : - 1 : 1 , : )
    }
end
function [ nr ] = rows._matrix(_int) ( x )
    {
      ()
      [ nr , nc ] = size.lib ( x )
    }
end
MainProg
   {
     global_settings. ( )
     NET_PACKET_LENGTH
     input_file = fopen.lib ( [ getenv.lib ( 'MOUSE_TOP' ) '/app/dvbt/demo_head.mpg' ] , 'r' )
     while feof.lib ( input_file )
        {
          data_in = 1
          [ data_in , count ] = fread.lib ( input_file , NET_PACKET_LENGTH )
          disp.lib ( data_in )
          ifthen count ~= 0
            then
            {
              fprintf.lib ( 'reading block of length %d
' , count )
              ifthen count < NET_PACKET_LENGTH
                then
                data_in = [ data_in ; zeros.lib ( NET_PACKET_LENGTH - count , 1 ) ]
              endifthen
              data_channel_in = dvbt_send._matrix(_int) ( data_in )
              data_channel_out = channel_model._matrix(_int) ( data_channel_in )
              data_out = dvbt_receive._matrix(_int) ( data_channel_out )
              if == ( data_in , data_out )
                then
                fprintf.lib ( 'send&receive of %d bytes successful
' , length.lib ( data_in ) )
                else
                {
                  fprintf.lib ( '**error**
' )
                  return
                }
              endif
              fprintf.lib ( '
' )
            }
          endifthen
        }
     endwhile
     fclose.lib ( input_file )
   }
endMainProg
