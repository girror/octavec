(Prog([FunctionDec([Var("data_out"){MATRIX(INT)}],"dvbt_receive._matrix(_int)",[Var("data_channel_out"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("  dvbt_receive (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_channel_out"){MATRIX(INT)}]){INT}]){INT},Global("PACKETS_PER_PRBS_PERIOD"){INT},Global("dvbt_receive_current_packet"){NIL},Global("dvbt_receive_prbs_register"){NIL},Global("dvbt_receive_conv_regigster"){NIL},Assign(Var("dvbt_receive_current_packet"){INT},Int(0){INT}),Assign(Var("data"){MATRIX(INT)},Var("data_channel_out"){MATRIX(INT)}),AssignMulti([Var("x"){MATRIX(FLOAT)},Var("y"){MATRIX(INT)}],Call(FuncName("depuncturing","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){[MATRIX(FLOAT),MATRIX(INT)]}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("convolutional_decode","._matrix(_float)_matrix(_int)"),[Var("x"){MATRIX(FLOAT)},Var("y"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("byte_from_bit_vector","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("outer_deinterleave","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("rs_decode","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("remove_sync_and_unscramble","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data_out"){MATRIX(INT)},Var("data"){MATRIX(INT)}),Assign(Var("dvbt_receive_current_packet"){INT},Call(FuncName("rem","._int_int"),[BinOp(PLUS,Var("dvbt_receive_current_packet"){INT},Int(1){INT}){INT},Var("PACKETS_PER_PRBS_PERIOD"){INT}]){INT})])),FunctionDec([Var("data_out"){MATRIX(INT)}],"remove_sync_and_unscramble._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    remove_sync_and_unscramble (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Global("PACKET_LENGTH"){INT},Global("NET_PACKET_LENGTH"){INT},Global("PACKETS_PER_PRBS_PERIOD"){INT},Global("SYNC_BYTE_VALUE"){MATRIX(INT)},Global("INV_SYNC_BYTE_VALUE"){MATRIX(INT)},Global("INIT_PRBS_REGISTER"){MATRIX(INT)},Global("dvbt_receive_current_packet"){INT},Global("dvbt_receive_prbs_register"){NIL},If(RelOp(EQ,Var("dvbt_receive_current_packet"){INT},Int(0){INT}){INT},Stats([Assign(Var("dvbt_receive_prbs_register"){MATRIX(INT)},Var("INIT_PRBS_REGISTER"){MATRIX(INT)}),Assign(Var("sync_byte"){MATRIX(INT)},Var("INV_SYNC_BYTE_VALUE"){MATRIX(INT)})]),Stats([Subscript(Var("dvbt_receive_current_packet"){INT},[Int(1){INT}]){INT},Assign(Var("sync_byte"){MATRIX(INT)},Var("SYNC_BYTE_VALUE"){MATRIX(INT)})])),IfThen(MExpansion(Var("sync_byte"){MATRIX(INT)},PartialROp(NE,Subscript(Var("data_in"){MATRIX(INT)},[Int(1){INT}]){INT}){INT}){MATRIX(INT)},Stats([Call(FuncName("fprintf",".lib"),[String("warning: actual sync byte (%2.2x) does not match\n"){STRING},Subscript(Var("data_in"){MATRIX(INT)},[Int(1){INT}]){INT}]){INT},Call(FuncName("fprintf",".lib"),[String("warning: expected sync byte (%2.2x).\n"){STRING},Var("sync_byte"){MATRIX(INT)}]){INT},Call(FuncName("fprintf",".lib"),[String("warning: (current_packet=%d)\n"){STRING},Var("dvbt_receive_current_packet"){INT}]){INT}])),AssignMulti([Var("prbs"){MATRIX(INT)},Var("dvbt_receive_prbs_register"){MATRIX(INT)}],Call(FuncName("prbs_sequence","._int_matrix(_int)"),[Var("NET_PACKET_LENGTH"){INT},Var("dvbt_receive_prbs_register"){MATRIX(INT)}]){[MATRIX(INT),MATRIX(INT)]}),Assign(Var("data_out"){MATRIX(INT)},Call(FuncName("byte_xor","._matrix(_int)_matrix(_int)"),[Subscript(Var("data_in"){MATRIX(INT)},[Range(Int(2){INT},Int(1){INT},Var("PACKET_LENGTH"){INT}){MATRIX(INT)}]){MATRIX(INT)},Var("prbs"){MATRIX(INT)}]){MATRIX(INT)})])),FunctionDec([Var("data_out"){MATRIX(INT)}],"rs_decode._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    rs_decode (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Global("PACKET_LENGTH"){INT},Global("RS_PARITY_BYTES"){INT},IfThen(RelOp(NE,Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT},BinOp(PLUS,Var("PACKET_LENGTH"){INT},Var("RS_PARITY_BYTES"){INT}){INT}){INT},Stats([Call(FuncName("fprintf",".lib"),[String("error: rs_decode: packet size %d is not expected %d.\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT},BinOp(PLUS,Var("PACKET_LENGTH"){INT},Var("RS_PARITY_BYTES"){INT}){INT}]){INT},Return{UNIT}])),IfThen(MRelOp(NE,Subscript(Var("data_in"){MATRIX(INT)},[Range(BinOp(PLUS,Var("PACKET_LENGTH"){INT},Int(1){INT}){INT},Int(1){INT},BinOp(PLUS,Var("PACKET_LENGTH"){INT},Var("RS_PARITY_BYTES"){INT}){INT}){MATRIX(INT)}]){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Var("RS_PARITY_BYTES"){INT},Int(1){INT}]){MATRIX(INT)}){MATRIX(INT)},Call(FuncName("fprintf",".lib"),[String("error: parity\n"){STRING}]){INT}),Assign(Var("data_out"){MATRIX(INT)},Subscript(Var("data_in"){MATRIX(INT)},[Range(Int(1){INT},Int(1){INT},Var("PACKET_LENGTH"){INT}){MATRIX(INT)}]){MATRIX(INT)})])),FunctionDec([Var("data_out"){MATRIX(INT)}],"outer_deinterleave._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    outer_deinterleave (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Global("PACKET_LENGTH"){INT},Global("RS_PARITY_BYTES"){INT},Global("OI_I"){INT},Global("OI_M"){INT},Assign(Var("data"){MATRIX(INT)},Call(FuncName("reshape","._matrix(_int)_int_int"),[Var("data_in"){MATRIX(INT)},Var("OI_M"){INT},Var("OI_I"){INT}]){MATRIX(INT)}),Assign(Var("data_out"){MATRIX(INT)},Call(FuncName("reshape","._matrix(_int)_int_int"),[UnOp(E_CONJUGATE,Var("data"){MATRIX(INT)}){MATRIX(INT)},BinOp(PLUS,Var("PACKET_LENGTH"){INT},Var("RS_PARITY_BYTES"){INT}){INT},Int(1){INT}]){MATRIX(INT)})])),FunctionDec([Var("data_out"){MATRIX(INT)}],"byte_from_bit_vector._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    byte_from_bit_vector (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Assign(Var("data_out"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(DIV,Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT},Int(8){INT}){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Call(FuncName("length",".lib"),[Var("data_out"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Var("data_byte"){INT},Int(0){INT}),For(Var("j"){INT},Range(Int(1){INT},Int(1){INT},Int(8){INT}){MATRIX(INT)},Stats([If(RelOp(LE,Subscript(Var("data_in"){MATRIX(INT)},[BinOp(PLUS,BinOp(MUL,Int(8){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Var("j"){INT}){INT}]){INT},Float(5.000000000000000e-01){FLOAT}){INT},Assign(Var("data_bit"){INT},Int(0){INT}),Assign(Var("data_bit"){INT},Int(1){INT})),Assign(Var("data_byte"){INT},BinOp(PLUS,BinOp(MUL,Int(2){INT},Var("data_byte"){INT}){INT},Var("data_bit"){INT}){INT})])),Assign(Subscript(Var("data_out"){MATRIX(INT)},[Var("i"){INT}]){INT},Var("data_byte"){INT})]))])),FunctionDec([Var("data"){MATRIX(INT)}],"convolutional_decode._matrix(_float)_matrix(_int)",[Var("x"){MATRIX(FLOAT)},Var("y"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    convolutional_decode (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("x"){MATRIX(FLOAT)}]){INT}]){INT},Global("INIT_CONV_REGISTER"){MATRIX(INT)},Global("dvbt_receive_current_packet"){INT},Global("dvbt_receive_conv_register"){NIL},IfThen(RelOp(EQ,Var("dvbt_receive_current_packet"){INT},Int(0){INT}){INT},Assign(Var("dvbt_receive_conv_register"){MATRIX(INT)},Var("INIT_CONV_REGISTER"){MATRIX(INT)})),Assign(Var("data"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Call(FuncName("length",".lib"),[Var("x"){MATRIX(FLOAT)}]){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Var("data_x"){FLOAT},Subscript(Var("x"){MATRIX(FLOAT)},[Var("i"){INT}]){FLOAT}),For(Var("j"){INT},Matrix([[Int(1){INT},Int(2){INT},Int(3){INT},Int(6){INT}]{MATRIX(INT)}]){MATRIX(INT)},Assign(Var("data_x"){FLOAT},Call(FuncName("soft_xor","._float_int"),[Var("data_x"){FLOAT},Subscript(Var("dvbt_receive_conv_register"){MATRIX(INT)},[Var("j"){INT}]){INT}]){FLOAT})),Assign(Var("data_y"){INT},Subscript(Var("y"){MATRIX(INT)},[Var("i"){INT}]){INT}),For(Var("j"){INT},Matrix([[Int(2){INT},Int(3){INT},Int(5){INT},Int(6){INT}]{MATRIX(INT)}]){MATRIX(INT)},Assign(Var("data_y"){INT},Call(FuncName("soft_xor","._int_int"),[Var("data_y"){INT},Subscript(Var("dvbt_receive_conv_register"){MATRIX(INT)},[Var("j"){INT}]){INT}]){INT})),IfThen(RelOp(AND,RelOp(EQ,Var("data_x"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},RelOp(EQ,Cast-T(Var("data_y"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT}){INT},Call(FuncName("fprintf",".lib"),[String("warning: undefined symbol %d"){STRING},Var("i"){INT}]){INT}),IfThen(RelOp(OR,RelOp(GT,Cast-T(RelOp(AND,RelOp(LT,Var("data_x"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Var("data_y"){INT}){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},RelOp(AND,RelOp(GT,Var("data_x"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},RelOp(LT,Cast-T(Var("data_y"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT}){INT}){INT},Call(FuncName("fprintf",".lib"),[String("warning: contradicting symbol %d"){STRING},Var("i"){INT}]){INT}),If(RelOp(OR,RelOp(LT,Var("data_x"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},RelOp(LT,Cast-T(Var("data_y"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT}){INT},Assign(Subscript(Var("data"){MATRIX(INT)},[Var("i"){INT}]){INT},Int(0){INT}),If(RelOp(OR,RelOp(GT,Var("data_x"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},RelOp(GT,Cast-T(Var("data_y"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT}){INT},Assign(Subscript(Var("data"){MATRIX(INT)},[Var("i"){INT}]){INT},Int(1){INT}),Call(FuncName("fprintf",".lib"),[String("error: internal error at symbol %d"){STRING},Var("i"){INT}]){INT})),Assign(Var("dvbt_receive_conv_register"){MATRIX(INT)},Matrix([[Subscript(Var("data"){MATRIX(INT)},[Var("i"){INT}]){INT},Subscript(Var("dvbt_receive_conv_register"){MATRIX(INT)},[Range(Int(2){INT},Int(1){INT},Int(6){INT}){MATRIX(INT)}]){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)})]))])),FunctionDec([Var("x"){INT}],"soft_xor._int_int",[Var("a"){INT},Var("b"){INT}],If(RelOp(LT,Cast-T(Var("b"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Assign(Var("x"){INT},Var("a"){INT}),If(RelOp(EQ,Cast-T(Var("a"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Assign(Var("x"){FLOAT},Float(5.000000000000000e-01){FLOAT}),IfThen(RelOp(GT,Cast-T(Var("b"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Assign(Var("x"){INT},BinOp(MINUS,Int(1){INT},Var("a"){INT}){INT}))))),FunctionDec([Var("x"){FLOAT}],"soft_xor._float_int",[Var("a"){FLOAT},Var("b"){INT}],If(RelOp(LT,Cast-T(Var("b"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Assign(Var("x"){FLOAT},Var("a"){FLOAT}),If(RelOp(EQ,Var("a"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Assign(Var("x"){FLOAT},Float(5.000000000000000e-01){FLOAT}),IfThen(RelOp(GT,Cast-T(Var("b"){INT},FLOAT){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Assign(Var("x"){FLOAT},BinOp(MINUS,Cast-T(Int(1){INT},FLOAT){FLOAT},Var("a"){FLOAT}){FLOAT}))))),FunctionDec([Var("x"){MATRIX(FLOAT)},Var("y"){MATRIX(INT)}],"depuncturing._matrix(_int)",[Var("data"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    depuncturing (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT}]){INT},Global("PUNCTURING_MODE"){FLOAT},If(RelOp(EQ,Var("PUNCTURING_MODE"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Stats([Assign(Var("x"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(DIV,Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT},Int(2){INT}){INT},Int(1){INT}]){MATRIX(INT)}),Assign(Var("y"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(DIV,Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT},Int(2){INT}){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Subscript(Var("x"){MATRIX(INT)},[Var("i"){INT}]){INT},Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(MUL,Int(2){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(1){INT}){INT}]){INT}),Assign(Subscript(Var("y"){MATRIX(INT)},[Var("i"){INT}]){INT},Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(MUL,Int(2){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT}]){INT})]))]),If(RelOp(EQ,Var("PUNCTURING_MODE"){FLOAT},Float(6.666666865348816e-01){FLOAT}){INT},Stats([Assign(Var("x"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(DIV,BinOp(MUL,Int(2){INT},Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT}){INT},Int(3){INT}){INT},Int(1){INT}]){MATRIX(INT)}),Assign(Var("y"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(DIV,BinOp(MUL,Int(2){INT},Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT}){INT},Int(3){INT}){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(2){INT},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Subscript(Var("x"){MATRIX(INT)},[BinOp(PLUS,Var("i"){INT},Int(0){INT}){INT}]){INT},Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT},Int(1){INT}){INT}]){INT}),Assign(Subscript(Var("x"){MATRIX(FLOAT)},[BinOp(PLUS,Var("i"){INT},Int(1){INT}){INT}]){FLOAT},Float(5.000000000000000e-01){FLOAT}),Assign(Subscript(Var("y"){MATRIX(INT)},[BinOp(PLUS,Var("i"){INT},Int(0){INT}){INT}]){INT},Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT},Int(2){INT}){INT}]){INT}),Assign(Subscript(Var("y"){MATRIX(INT)},[BinOp(PLUS,Var("i"){INT},Int(1){INT}){INT}]){INT},Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT},Int(3){INT}){INT}]){INT})]))]),Stats([Call(FuncName("fprintf",".lib"),[String("puncturing mode %g not implemented.\n"){STRING},Var("PUNCTURING_MODE"){FLOAT}]){INT},Return{UNIT}])))])),FunctionDec([Var("data_channel_out"){MATRIX(INT)}],"channel_model._matrix(_int)",[Var("data_channel_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("  channel_model (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_channel_in"){MATRIX(INT)}]){INT}]){INT},Assign(Var("data_channel_out"){MATRIX(INT)},Var("data_channel_in"){MATRIX(INT)})])),FunctionDec([Var("data_channel_in"){MATRIX(INT)}],"dvbt_send._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("  dvbt_send (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Global("PACKETS_PER_PRBS_PERIOD"){INT},Global("dvbt_send_current_packet"){NIL},Global("dvbt_send_prbs_register"){NIL},Global("dvbt_send_conv_regigster"){NIL},Assign(Var("dvbt_send_current_packet"){INT},Int(0){INT}),Assign(Var("data"){MATRIX(INT)},Var("data_in"){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("sync_and_scramble","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("rs_encode","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("outer_interleave","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("bit_from_byte_vector","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){MATRIX(INT)}),AssignMulti([Var("x"){MATRIX(INT)},Var("y"){MATRIX(INT)}],Call(FuncName("convolutional_encode","._matrix(_int)"),[Var("data"){MATRIX(INT)}]){[MATRIX(INT),MATRIX(INT)]}),Assign(Var("data"){MATRIX(INT)},Call(FuncName("puncturing","._matrix(_int)_matrix(_int)"),[Var("x"){MATRIX(INT)},Var("y"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data_channel_in"){MATRIX(INT)},Var("data"){MATRIX(INT)}),Assign(Var("dvbt_send_current_packet"){INT},Call(FuncName("rem","._int_int"),[BinOp(PLUS,Var("dvbt_send_current_packet"){INT},Int(1){INT}){INT},Var("PACKETS_PER_PRBS_PERIOD"){INT}]){INT})])),FunctionDec([Var("data"){MATRIX(INT)}],"puncturing._matrix(_int)_matrix(_int)",[Var("x"){MATRIX(INT)},Var("y"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    puncturing (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}]){INT},Global("PUNCTURING_MODE"){FLOAT},If(RelOp(EQ,Var("PUNCTURING_MODE"){FLOAT},Float(5.000000000000000e-01){FLOAT}){INT},Stats([Assign(Var("data"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(MUL,Int(2){INT},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(MUL,Int(2){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(1){INT}){INT}]){INT},Subscript(Var("x"){MATRIX(INT)},[Var("i"){INT}]){INT}),Assign(Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(MUL,Int(2){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT}]){INT},Subscript(Var("y"){MATRIX(INT)},[Var("i"){INT}]){INT})]))]),If(RelOp(EQ,Var("PUNCTURING_MODE"){FLOAT},Float(6.666666865348816e-01){FLOAT}){INT},Stats([Assign(Var("data"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(DIV,BinOp(MUL,Int(3){INT},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}){INT},Int(2){INT}){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(2){INT},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT},Int(1){INT}){INT}]){INT},Subscript(Var("x"){MATRIX(INT)},[Var("i"){INT}]){INT}),Assign(Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT},Int(2){INT}){INT}]){INT},Subscript(Var("y"){MATRIX(INT)},[Var("i"){INT}]){INT}),Assign(Subscript(Var("data"){MATRIX(INT)},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Int(2){INT}){INT},Int(3){INT}){INT}]){INT},Subscript(Var("y"){MATRIX(INT)},[BinOp(PLUS,Var("i"){INT},Int(1){INT}){INT}]){INT})]))]),Stats([Call(FuncName("fprintf",".lib"),[String("puncturing mode %g not implemented.\n"){STRING},Var("PUNCTURING_MODE"){FLOAT}]){INT},Return{UNIT}])))])),FunctionDec([Var("x"){MATRIX(INT)},Var("y"){MATRIX(INT)}],"convolutional_encode._matrix(_int)",[Var("data"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    convolutional_encode (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT}]){INT},Global("INIT_CONV_REGISTER"){MATRIX(INT)},Global("dvbt_send_current_packet"){INT},Global("dvbt_send_conv_register"){NIL},IfThen(RelOp(EQ,Var("dvbt_send_current_packet"){INT},Int(0){INT}){INT},Assign(Var("dvbt_send_conv_register"){MATRIX(INT)},Var("INIT_CONV_REGISTER"){MATRIX(INT)})),Assign(Var("x"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT},Int(1){INT}]){MATRIX(INT)}),Assign(Var("y"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Call(FuncName("length",".lib"),[Var("data"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Var("data_in"){INT},Subscript(Var("data"){MATRIX(INT)},[Var("i"){INT}]){INT}),Assign(Subscript(Var("x"){MATRIX(INT)},[Var("i"){INT}]){INT},Var("data_in"){INT}),For(Var("j"){INT},Matrix([[Int(1){INT},Int(2){INT},Int(3){INT},Int(6){INT}]{MATRIX(INT)}]){MATRIX(INT)},Assign(Subscript(Var("x"){MATRIX(INT)},[Var("i"){INT}]){INT},Call(FuncName("xor","._int_int"),[Subscript(Var("x"){MATRIX(INT)},[Var("i"){INT}]){INT},Subscript(Var("dvbt_send_conv_register"){MATRIX(INT)},[Var("j"){INT}]){INT}]){INT})),Assign(Subscript(Var("y"){MATRIX(INT)},[Var("i"){INT}]){INT},Var("data_in"){INT}),For(Var("j"){INT},Matrix([[Int(2){INT},Int(3){INT},Int(5){INT},Int(6){INT}]{MATRIX(INT)}]){MATRIX(INT)},Assign(Subscript(Var("y"){MATRIX(INT)},[Var("i"){INT}]){INT},Call(FuncName("xor","._int_int"),[Subscript(Var("y"){MATRIX(INT)},[Var("i"){INT}]){INT},Subscript(Var("dvbt_send_conv_register"){MATRIX(INT)},[Var("j"){INT}]){INT}]){INT})),Assign(Var("dvbt_send_conv_register"){MATRIX(INT)},Matrix([[Var("data_in"){INT},Subscript(Var("dvbt_send_conv_register"){MATRIX(INT)},[Range(Int(2){INT},Int(1){INT},Int(6){INT}){MATRIX(INT)}]){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)})]))])),FunctionDec([Var("data_out"){MATRIX(INT)}],"bit_from_byte_vector._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    bit_from_byte_vector (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Assign(Var("data_out"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[BinOp(MUL,Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT},Int(8){INT}){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Var("data_byte"){INT},Subscript(Var("data_in"){MATRIX(INT)},[Var("i"){INT}]){INT}),For(Var("j"){INT},Range(Int(1){INT},Int(1){INT},Int(8){INT}){MATRIX(INT)},Stats([IfThen(RelOp(GE,Cast-T(Var("data_byte"){INT},FLOAT){FLOAT},Float(1.275000000000000e+02){FLOAT}){INT},Assign(Subscript(Var("data_out"){MATRIX(INT)},[BinOp(PLUS,BinOp(MUL,Int(8){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Var("j"){INT}){INT}]){INT},Int(1){INT})),Assign(Var("data_byte"){INT},BinOp(MUL,Call(FuncName("rem","._int_int"),[Var("data_byte"){INT},Int(128){INT}]){INT},Int(2){INT}){INT})]))]))])),FunctionDec([Var("data_out"){MATRIX(INT)}],"outer_interleave._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    outer_interleave (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Global("PACKET_LENGTH"){INT},Global("RS_PARITY_BYTES"){INT},Global("OI_I"){INT},Global("OI_M"){INT},Assign(Var("data"){MATRIX(INT)},Call(FuncName("reshape","._matrix(_int)_int_int"),[Var("data_in"){MATRIX(INT)},Var("OI_I"){INT},Var("OI_M"){INT}]){MATRIX(INT)}),Assign(Var("data_out"){MATRIX(INT)},Call(FuncName("reshape","._matrix(_int)_int_int"),[UnOp(E_CONJUGATE,Var("data"){MATRIX(INT)}){MATRIX(INT)},BinOp(PLUS,Var("PACKET_LENGTH"){INT},Var("RS_PARITY_BYTES"){INT}){INT},Int(1){INT}]){MATRIX(INT)})])),FunctionDec([Var("retval"){MATRIX(INT)}],"reshape._matrix(_int)_int_int",[Var("a"){MATRIX(INT)},Var("m"){INT},Var("n"){INT}],Stats([NilExp{NIL},Stats([AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("a"){MATRIX(INT)}]){[INT,INT]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){INT},Var("nc"){INT}){INT},BinOp(MUL,Var("m"){INT},Var("n"){INT}){INT}){INT},Stats([Assign(Var("retval"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Var("m"){INT},Var("n"){INT}]){MATRIX(INT)}),NilExp{NIL},Assign(Subscript(Var("retval"){MATRIX(MATRIX(INT))},[Colon{MATRIX(INT)}]){MATRIX(INT)},Var("a"){MATRIX(INT)})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){STRING}]){UNIT})])])),FunctionDec([Var("data_out"){MATRIX(INT)}],"rs_encode._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    rs_encode (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Global("PACKET_LENGTH"){INT},Global("RS_PARITY_BYTES"){INT},IfThen(RelOp(NE,Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT},Var("PACKET_LENGTH"){INT}){INT},Stats([Call(FuncName("fprintf",".lib"),[String("error: rs_endcode: packet size %d is not expected %d.\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT},Var("PACKET_LENGTH"){INT}]){INT},Return{UNIT}])),Assign(Var("data_out"){MATRIX(INT)},Matrix([[Var("data_in"){MATRIX(INT)}]{MATRIX(INT)},[Call(FuncName("zeros",".lib"),[Var("RS_PARITY_BYTES"){INT},Int(1){INT}]){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)})])),FunctionDec([Var("data_out"){MATRIX(INT)}],"sync_and_scramble._matrix(_int)",[Var("data_in"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("    sync_and_scramble (%d)\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Global("PACKET_LENGTH"){INT},Global("NET_PACKET_LENGTH"){INT},Global("PACKETS_PER_PRBS_PERIOD"){INT},Global("SYNC_BYTE_VALUE"){MATRIX(INT)},Global("INV_SYNC_BYTE_VALUE"){MATRIX(INT)},Global("INIT_PRBS_REGISTER"){MATRIX(INT)},Global("dvbt_send_current_packet"){INT},Global("dvbt_send_prbs_register"){NIL},Global("dvbt_send_convolution_state"){NIL},If(RelOp(EQ,Var("dvbt_send_current_packet"){INT},Int(0){INT}){INT},Stats([Assign(Var("dvbt_send_prbs_register"){MATRIX(INT)},Var("INIT_PRBS_REGISTER"){MATRIX(INT)}),Assign(Var("sync_byte"){MATRIX(INT)},Var("INV_SYNC_BYTE_VALUE"){MATRIX(INT)})]),Stats([Subscript(Var("dvbt_send_current_packet"){INT},[Int(1){INT}]){INT},Assign(Var("sync_byte"){MATRIX(INT)},Var("SYNC_BYTE_VALUE"){MATRIX(INT)})])),AssignMulti([Var("prbs"){MATRIX(INT)},Var("dvbt_send_prbs_register"){MATRIX(INT)}],Call(FuncName("prbs_sequence","._int_matrix(_int)"),[Var("NET_PACKET_LENGTH"){INT},Var("dvbt_send_prbs_register"){MATRIX(INT)}]){[MATRIX(INT),MATRIX(INT)]}),Assign(Var("data_out"){MATRIX(INT)},Matrix([[Var("sync_byte"){MATRIX(INT)}]{MATRIX(INT)},[Call(FuncName("byte_xor","._matrix(_int)_matrix(_int)"),[Var("data_in"){MATRIX(INT)},Var("prbs"){MATRIX(INT)}]){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)})])),FunctionDec([Var("result"){MATRIX(INT)}],"byte_xor._matrix(_int)_matrix(_int)",[Var("byte_vector1"){MATRIX(INT)},Var("byte_vector2"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("      byte_xor\n"){STRING}]){INT},Assign(Var("result"){MATRIX(INT)},Var("byte_vector1"){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Call(FuncName("length",".lib"),[Var("byte_vector1"){MATRIX(INT)}]){INT}){MATRIX(INT)},Stats([Assign(Var("byte1"){INT},Subscript(Var("byte_vector1"){MATRIX(INT)},[Var("i"){INT}]){INT}),Assign(Var("byte2"){INT},Subscript(Var("byte_vector2"){MATRIX(INT)},[Var("i"){INT}]){INT}),Assign(Var("result_byte"){INT},Int(0){INT}),For(Var("j"){INT},Range(Int(1){INT},Int(1){INT},Int(8){INT}){MATRIX(INT)},Stats([Assign(Var("bit1"){INT},Call(FuncName("rem","._int_int"),[Var("byte1"){INT},Int(2){INT}]){INT}),Assign(Var("bit2"){INT},Call(FuncName("rem","._int_int"),[Var("byte2"){INT},Int(2){INT}]){INT}),Assign(Var("result_bit"){INT},Call(FuncName("xor","._int_int"),[Var("bit1"){INT},Var("bit2"){INT}]){INT}),Assign(Var("result_byte"){INT},BinOp(PLUS,Var("result_byte"){INT},BinOp(MUL,Var("result_bit"){INT},BinOp(POWER,Int(2){INT},BinOp(MINUS,Var("j"){INT},Int(1){INT}){INT}){INT}){INT}){INT}),Assign(Var("byte1"){INT},Call(FuncName("fix",".lib"),[BinOp(DIV,Var("byte1"){INT},Int(2){INT}){INT}]){INT}),Assign(Var("byte2"){INT},Call(FuncName("fix",".lib"),[BinOp(DIV,Var("byte2"){INT},Int(2){INT}){INT}]){INT})])),Assign(Subscript(Var("result"){MATRIX(INT)},[Var("i"){INT}]){INT},Var("result_byte"){INT})]))])),FunctionDec([Var("retval"){INT}],"rem._int_int",[Var("x"){INT},Var("y"){INT}],Stats([Assign(Var("usage_msg"){STRING},String("rem (x, y)"){STRING}),NilExp{NIL},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){INT}]){MATRIX(INT)},Call(FuncName("size",".lib"),[Var("y"){INT}]){MATRIX(INT)}){MATRIX(INT)}]){MATRIX(INT)},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){INT}]){INT},Call(FuncName("is_scalar","._int"),[Var("y"){INT}]){INT}){INT}){INT}){INT}){MATRIX(INT)},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){STRING}]){UNIT}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){INT}]){INT}]){MATRIX(INT)}]){MATRIX(INT)},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){INT}]){INT}]){MATRIX(INT)}]){MATRIX(INT)}){MATRIX(INT)},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){STRING}]){UNIT}),Assign(Var("retval"){INT},BinOp(MINUS,Var("x"){INT},BinOp(E_MUL,Var("y"){INT},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){INT},Var("y"){INT}){INT}]){INT}){INT}){INT})])),FunctionDec([Var("sequence"){MATRIX(INT)},Var("prbs_register_out"){MATRIX(INT)}],"prbs_sequence._int_matrix(_int)",[Var("byte_length"){INT},Var("prbs_register"){MATRIX(INT)}],Stats([Call(FuncName("fprintf",".lib"),[String("      prbs_sequence\n"){STRING}]){INT},Assign(Var("bit_length"){INT},BinOp(MUL,Int(8){INT},Var("byte_length"){INT}){INT}),Assign(Var("bit_sequence"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Var("bit_length"){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Var("bit_length"){INT}){MATRIX(INT)},Stats([Assign(Var("new_bit"){INT},Call(FuncName("xor","._int_int"),[Subscript(Var("prbs_register"){MATRIX(INT)},[Int(14){INT}]){INT},Subscript(Var("prbs_register"){MATRIX(INT)},[Int(15){INT}]){INT}]){INT}),Assign(Var("prbs_register"){MATRIX(INT)},Matrix([[Var("new_bit"){INT},Subscript(Var("prbs_register"){MATRIX(INT)},[Range(Int(1){INT},Int(1){INT},Int(14){INT}){MATRIX(INT)}]){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)}),Assign(Subscript(Var("bit_sequence"){MATRIX(INT)},[Var("i"){INT}]){INT},Var("new_bit"){INT})])),Assign(Var("sequence"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Var("byte_length"){INT},Int(1){INT}]){MATRIX(INT)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Var("byte_length"){INT}){MATRIX(INT)},For(Var("j"){INT},Range(Int(1){INT},Int(1){INT},Int(8){INT}){MATRIX(INT)},Assign(Subscript(Var("sequence"){MATRIX(INT)},[Var("i"){INT}]){INT},BinOp(PLUS,Subscript(Var("sequence"){MATRIX(INT)},[Var("i"){INT}]){INT},BinOp(MUL,Subscript(Var("bit_sequence"){MATRIX(INT)},[BinOp(PLUS,BinOp(MUL,Int(8){INT},BinOp(MINUS,Var("i"){INT},Int(1){INT}){INT}){INT},Var("j"){INT}){INT}]){INT},BinOp(POWER,Int(2){INT},BinOp(MINUS,Int(8){INT},Var("j"){INT}){INT}){INT}){INT}){INT}))),Assign(Var("prbs_register_out"){MATRIX(INT)},Var("prbs_register"){MATRIX(INT)})])),FunctionDec([Var("z"){INT}],"xor._int_int",[Var("x"){INT},Var("y"){INT}],If(MExpansion(MRelOp(EQ,Call(FuncName("size",".lib"),[Var("x"){INT}]){MATRIX(INT)},Call(FuncName("size",".lib"),[Var("y"){INT}]){MATRIX(INT)}){INT},PartialROp(Flip(OR),RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){INT}]){INT},Call(FuncName("is_scalar","._int"),[Var("y"){INT}]){INT}){INT}){INT}){MATRIX(INT)},Assign(Var("z"){INT},Call(FuncName("logical","._int"),[BinOp(MINUS,RelOp(OR,Var("x"){INT},Var("y"){INT}){INT},RelOp(AND,Var("x"){INT},Var("y"){INT}){INT}){INT}]){INT}),Call(FuncName("error",".lib"),[String("xor: x and y must be of common size or scalars"){STRING}]){UNIT})),FunctionDec([Var("y"){INT}],"logical._int",[Var("x"){INT}],If(RelOp(OR,Call(FuncName("islogical",".lib"),[Var("x"){INT}]){INT},Call(FuncName("isempty",".lib"),[Var("x"){INT}]){INT}){INT},Assign(Var("y"){INT},Var("x"){INT}),If(Call(FuncName("isnumeric",".lib"),[Var("x"){INT}]){INT},Assign(Var("y"){INT},RelOp(NE,Var("x"){INT},Int(0){INT}){INT}),Call(FuncName("error",".lib"),[String("logical not defined for type `%s'"){STRING},Call(FuncName("typeinfo",".lib"),[Var("x"){INT}]){STRING}]){UNIT}))),FunctionDec([],"global_settings.",[],Stats([Global("PACKET_LENGTH"){NIL},Global("NET_PACKET_LENGTH"){NIL},Global("PACKETS_PER_PRBS_PERIOD"){NIL},Global("SYNC_BYTE_VALUE"){NIL},Global("INV_SYNC_BYTE_VALUE"){NIL},Global("INIT_PRBS_REGISTER"){NIL},Global("RS_PARITY_BYTES"){NIL},Global("OI_I"){NIL},Global("OI_M"){NIL},Global("INIT_CONV_REGISTER"){NIL},Global("PUNCTURING_MODE"){NIL},Global("QAM_MODE"){NIL},Global("LOG_QAM_MODE"){NIL},Assign(Var("ffffffff"){MATRIX(INT)},Call(FuncName("flipud","._matrix(_int)"),[Matrix([[Int(1){INT},Int(2){INT}]{MATRIX(INT)}]){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("rrrrrrrr"){INT},Call(FuncName("rows","._matrix(_int)"),[Matrix([[Int(1){INT},Int(2){INT}]{MATRIX(INT)}]){MATRIX(INT)}]){INT}),Assign(Var("ffxxxxxx"){MATRIX(NIL)},Call(FuncName("diff","._matrix(_int)_int"),[Matrix([[Int(1){INT},Int(2){INT},Int(8){INT}]{MATRIX(INT)}]){MATRIX(INT)},Int(1){INT}]){MATRIX(NIL)}),Assign(Var("PACKETS_PER_PRBS_PERIOD"){INT},Int(8){INT}),Assign(Var("PACKET_LENGTH"){INT},Int(188){INT}),Assign(Var("NET_PACKET_LENGTH"){INT},BinOp(MINUS,Var("PACKET_LENGTH"){INT},Int(1){INT}){INT}),Assign(Var("SYNC_BYTE_VALUE"){MATRIX(INT)},Call(FuncName("hex2dec","._string"),[String("47"){STRING}]){MATRIX(INT)}),Assign(Var("INV_SYNC_BYTE_VALUE"){MATRIX(INT)},Call(FuncName("hex2dec","._string"),[String("b8"){STRING}]){MATRIX(INT)}),Assign(Var("INIT_PRBS_REGISTER"){MATRIX(INT)},Matrix([[Int(1){INT},Int(0){INT},Int(0){INT},Int(1){INT},Int(0){INT},Int(1){INT},Int(0){INT},Int(1){INT},Int(0){INT},Int(0){INT},Int(0){INT},Int(0){INT},Int(0){INT},Int(0){INT},Int(0){INT}]{MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("RS_PARITY_BYTES"){INT},Int(16){INT}),Assign(Var("OI_I"){INT},Int(12){INT}),Assign(Var("OI_M"){INT},Int(17){INT}),Assign(Var("INIT_CONV_REGISTER"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Int(1){INT},Int(6){INT}]){MATRIX(INT)}),Assign(Var("PUNCTURING_MODE"){FLOAT},Float(6.666666865348816e-01){FLOAT}),Assign(Var("QAM_MODE"){INT},Int(16){INT}),Assign(Var("LOG_QAM_MODE"){FLOAT},Call(FuncName("log2","._int"),[Var("QAM_MODE"){INT}]){FLOAT})])),FunctionDec([Var("f"){FLOAT}],"log2._int",[Var("x"){INT}],Stats([NilExp{NIL},Assign(Var("f"){FLOAT},BinOp(DIV,Call(FuncName("log",".lib"),[Var("x"){INT}]){FLOAT},Call(FuncName("log",".lib"),[Int(2){INT}]){FLOAT}){FLOAT})])),FunctionDec([Var("d"){MATRIX(INT)}],"hex2dec._string",[Var("h"){STRING}],Assign(Var("d"){MATRIX(INT)},Call(FuncName("base2dec","._string_int"),[Var("h"){STRING},Int(16){INT}]){MATRIX(INT)})),FunctionDec([Var("out"){MATRIX(INT)}],"base2dec._string_int",[Var("d"){STRING},Var("base"){INT}],Stats([NilExp{NIL},Assign(Var("symbols"){STRING},String("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"){STRING}),If(UnOp(NOT,Call(FuncName("is_scalar","._int"),[Var("base"){INT}]){INT}){INT},Call(FuncName("error",".lib"),[String("base2dec: cannot convert from several bases at once."){STRING}]){UNIT},If(RelOp(OR,RelOp(LT,Var("base"){INT},Int(2){INT}){INT},RelOp(GT,Var("base"){INT},Call(FuncName("length",".lib"),[Var("symbols"){STRING}]){INT}){INT}){INT},Call(FuncName("error",".lib"),[String("base2dec: base must be between 2 and 36 or a string of symbols"){STRING}]){UNIT},Assign(Var("d"){STRING},Call(FuncName("toupper",".lib"),[Var("d"){STRING}]){STRING}))),Assign(Var("d"){STRING},Call(FuncName("strjust","._string_string"),[Var("d"){STRING},String("right"){STRING}]){STRING}),Assign(Var("table"){MATRIX(INT)},MExpansion(Call(FuncName("ones",".lib"),[Int(256){INT},Int(1){INT}]){MATRIX(INT)},PartialBOp(MUL,NaN{INT}){INT}){MATRIX(INT)}),Assign(Subscript(Var("table"){MATRIX(MATRIX(INT))},[Call(FuncName("toascii",".lib"),[Subscript(Var("symbols"){STRING},[Range(Int(1){INT},Int(1){INT},Var("base"){INT}){MATRIX(INT)}]){STRING}]){MATRIX(INT)}]){MATRIX(INT)},Range(Int(0){INT},Int(1){INT},BinOp(MINUS,Var("base"){INT},Int(1){INT}){INT}){MATRIX(INT)}),Assign(Subscript(Var("table"){MATRIX(INT)},[Call(FuncName("toascii",".lib"),[String(" "){STRING}]){MATRIX(INT)}]){INT},Int(0){INT}),Assign(Var("d"){MATRIX(INT)},Call(FuncName("reshape","._matrix(_int)_matrix(_int)"),[Subscript(Var("table"){MATRIX(INT)},[Call(FuncName("toascii",".lib"),[Var("d"){STRING}]){MATRIX(INT)}]){MATRIX(INT)},Call(FuncName("size",".lib"),[Var("d"){STRING}]){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("out"){MATRIX(INT)},MBinOp(MUL,Var("d"){MATRIX(INT)},MExpansion(UnOp(CONJUGATE,Range(BinOp(MINUS,Call(FuncName("columns","._matrix(_int)"),[Var("d"){MATRIX(INT)}]){INT},Int(1){INT}){INT},UMinus(Int(1){INT}){INT},Int(0){INT}){MATRIX(INT)}){MATRIX(INT)},PartialBOp(E_POWER,Var("base"){INT}){INT}){MATRIX(INT)}){MATRIX(INT)})])),FunctionDec([Var("nc"){INT}],"columns._matrix(_int)",[Var("x"){MATRIX(INT)}],Stats([NilExp{NIL},AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("x"){MATRIX(INT)}]){[INT,INT]})])),FunctionDec([Var("retval"){MATRIX(INT)}],"reshape._matrix(_int)_matrix(_int)",[Var("a"){MATRIX(INT)},Var("m"){MATRIX(INT)}],Stats([IfThen(MExpansion(Call(FuncName("prod",".lib"),[Call(FuncName("size",".lib"),[Var("m"){MATRIX(INT)}]){MATRIX(INT)}]){MATRIX(INT)},PartialROp(EQ,Int(2){INT}){INT}){MATRIX(INT)},Stats([Assign(Var("n"){INT},Subscript(Var("m"){MATRIX(INT)},[Int(2){INT}]){INT}),Assign(Var("m"){INT},Subscript(Var("m"){MATRIX(INT)},[Int(1){INT}]){INT}),Assign(Var("nargin"){INT},Int(3){INT})])),If(RelOp(EQ,Var("nargin"){INT},Int(3){INT}){INT},Stats([AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("a"){MATRIX(INT)}]){[INT,INT]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){INT},Var("nc"){INT}){INT},BinOp(MUL,Var("m"){INT},Var("n"){INT}){INT}){INT},Stats([Assign(Var("retval"){MATRIX(INT)},Call(FuncName("zeros",".lib"),[Var("m"){INT},Var("n"){INT}]){MATRIX(INT)}),NilExp{NIL},Assign(Subscript(Var("retval"){MATRIX(MATRIX(INT))},[Colon{MATRIX(INT)}]){MATRIX(INT)},Var("a"){MATRIX(INT)})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){STRING}]){UNIT})]),Call(FuncName("usage",".lib"),[String("reshape (a, m, n) or reshape (a, size (b))"){STRING}]){UNIT})])),FunctionDec([Var("x"){STRING}],"strjust._string_string",[Var("x"){STRING},Var("just"){STRING}],Stats([NilExp{NIL},NilExp{NIL},Assign(Var("just"){STRING},Call(FuncName("tolower",".lib"),[Var("just"){STRING}]){STRING}),Assign(Var("dfi"){INT},Var("do_fortran_indexing"){INT}),UnwindProtect(Stats([Assign(Var("do_fortran_indexing"){INT},Int(1){INT}),Assign(Var("idx"){MATRIX(INT)},Call(FuncName("find",".lib"),[MExpansion(Call(FuncName("toascii",".lib"),[Var("x"){STRING}]){MATRIX(INT)},PartialROp(EQ,Int(0){INT}){INT}){MATRIX(INT)}]){MATRIX(INT)}),IfThen(UnOp(NOT,Call(FuncName("isempty",".lib"),[Var("idx"){MATRIX(INT)}]){INT}){INT},Assign(Subscript(Var("x"){STRING},[Var("idx"){MATRIX(INT)}]){STRING},String(" "){STRING})),AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("x"){STRING}]){[INT,INT]}),Assign(Var("idx"){MATRIX(INT)},RelOp(NE,UnOp(CONJUGATE,Var("x"){STRING}){STRING},String(" "){STRING}){MATRIX(INT)}),If(Call(FuncName("strcmp","._string_string"),[Var("just"){STRING},String("right"){STRING}]){MATRIX(INT)},Stats([AssignMulti([Var("N"){INT},Var("hi"){INT}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Var("idx"){MATRIX(INT)}]){MATRIX(INT)}]){[INT,INT]}),Assign(Var("shift"){INT},Var("hi"){INT})]),If(Call(FuncName("strcmp","._string_string"),[Var("just"){STRING},String("left"){STRING}]){MATRIX(INT)},Stats([AssignMulti([Var("N"){INT},Var("lo"){INT}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Call(FuncName("flipud","._matrix(_int)"),[Var("idx"){MATRIX(INT)}]){MATRIX(INT)}]){MATRIX(INT)}]){[INT,INT]}),Assign(Var("shift"){INT},BinOp(MINUS,Var("nc"){INT},Var("lo"){INT}){INT})]),Stats([AssignMulti([Var("N"){INT},Var("hi"){INT}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Var("idx"){MATRIX(INT)}]){MATRIX(INT)}]){[INT,INT]}),AssignMulti([Var("N"){INT},Var("lo"){INT}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Call(FuncName("flipud","._matrix(_int)"),[Var("idx"){MATRIX(INT)}]){MATRIX(INT)}]){MATRIX(INT)}]){[INT,INT]}),Assign(Var("shift"){INT},Call(FuncName("ceil",".lib"),[BinOp(MINUS,Var("nc"){INT},BinOp(DIV,BinOp(MINUS,Var("lo"){INT},Var("hi"){INT}){INT},Int(2){INT}){INT}){INT}]){INT})]))),Assign(Var("idx"){MATRIX(INT)},Call(FuncName("rem","._matrix(_int)_int"),[MBinOp(PLUS,MBinOp(MUL,Call(FuncName("ones",".lib"),[Var("nr"){INT},Int(1){INT}]){MATRIX(INT)},Matrix([[Range(Int(0){INT},Int(1){INT},BinOp(MINUS,Var("nc"){INT},Int(1){INT}){INT}){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)}){MATRIX(INT)},MExpansion(Call(FuncName("ones",".lib"),[Int(1){INT},Var("nc"){INT}]){MATRIX(INT)},PartialBOp(MUL,UnOp(CONJUGATE,Var("shift"){INT}){INT}){INT}){MATRIX(INT)}){MATRIX(INT)},Var("nc"){INT}]){MATRIX(INT)}),Assign(Var("x"){STRING},Subscript(Var("x"){STRING},[MBinOp(PLUS,MExpansion(Var("idx"){MATRIX(INT)},PartialBOp(MUL,Var("nr"){INT}){INT}){MATRIX(INT)},MBinOp(MUL,UnOp(CONJUGATE,Matrix([[Range(Int(1){INT},Int(1){INT},Var("nr"){INT}){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)}){MATRIX(INT)},Call(FuncName("ones",".lib"),[Int(1){INT},Var("nc"){INT}]){MATRIX(INT)}){MATRIX(INT)}){MATRIX(INT)}]){STRING})]),Assign(Var("do_fortran_indexing"){INT},Var("dfi"){INT}))])),FunctionDec([Var("retval"){MATRIX(INT)}],"rem._matrix(_int)_int",[Var("x"){MATRIX(INT)},Var("y"){INT}],Stats([Assign(Var("usage_msg"){STRING},String("rem (x, y)"){STRING}),NilExp{NIL},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){MATRIX(INT)}]){MATRIX(INT)},Call(FuncName("size",".lib"),[Var("y"){INT}]){MATRIX(INT)}){MATRIX(INT)}]){MATRIX(INT)},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._matrix(_int)"),[Var("x"){MATRIX(INT)}]){INT},Call(FuncName("is_scalar","._int"),[Var("y"){INT}]){INT}){INT}){INT}){INT}){MATRIX(INT)},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){STRING}]){UNIT}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[MExpansion(Var("x"){MATRIX(INT)},PartialFunc("imag",".lib"){INT}){MATRIX(INT)}]){MATRIX(INT)}]){MATRIX(INT)},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){INT}]){INT}]){MATRIX(INT)}]){MATRIX(INT)}){MATRIX(INT)},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){STRING}]){UNIT}),Assign(Var("retval"){MATRIX(INT)},MBinOp(MINUS,Var("x"){MATRIX(INT)},MExpansion(MExpansion(MExpansion(Var("x"){MATRIX(INT)},PartialBOp(E_DIV,Var("y"){INT}){INT}){MATRIX(INT)},PartialFunc("fix",".lib"){INT}){MATRIX(INT)},PartialBOp(E_MUL,Var("y"){INT}){INT}){MATRIX(INT)}){MATRIX(INT)})])),FunctionDec([Var("retval"){INT}],"is_scalar._matrix(_int)",[Var("x"){MATRIX(INT)}],Stats([Assign(Var("retval"){INT},Int(0){INT}),Stats([AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("x"){MATRIX(INT)}]){[INT,INT]}),Assign(Var("retval"){INT},RelOp(AND,RelOp(EQ,Var("nr"){INT},Int(1){INT}){INT},RelOp(EQ,Var("nc"){INT},Int(1){INT}){INT}){INT})])])),FunctionDec([Var("status"){MATRIX(INT)}],"strcmp._string_string",[Var("s1"){STRING},Var("s2"){STRING}],Stats([NilExp{NIL},Assign(Var("status"){INT},Int(0){INT}),Stats([AssignMulti([Var("r1"){INT},Var("c1"){INT}],Call(FuncName("size",".lib"),[Var("s1"){STRING}]){[INT,INT]}),AssignMulti([Var("r2"){INT},Var("c2"){INT}],Call(FuncName("size",".lib"),[Var("s2"){STRING}]){[INT,INT]}),IfThen(RelOp(AND,RelOp(EQ,Var("r1"){INT},Var("r2"){INT}){INT},RelOp(EQ,Var("c1"){INT},Var("c2"){INT}){INT}){INT},If(RelOp(EQ,Var("c1"){INT},Int(0){INT}){INT},Assign(Var("status"){INT},Int(1){INT}),Assign(Var("status"){MATRIX(INT)},Call(FuncName("all",".lib"),[Call(FuncName("all",".lib"),[RelOp(EQ,Var("s1"){STRING},Var("s2"){STRING}){MATRIX(INT)}]){MATRIX(INT)}]){MATRIX(INT)})))])])),FunctionDec([Var("x"){MATRIX(NIL)}],"diff._matrix(_int)_int",[Var("x"){MATRIX(INT)},Var("k"){INT}],Stats([If(UnOp(NOT,RelOp(AND,RelOp(AND,Call(FuncName("is_scalar","._int"),[Var("k"){INT}]){INT},RelOp(EQ,Var("k"){INT},Call(FuncName("round",".lib"),[Var("k"){INT}]){INT}){INT}){INT},RelOp(GE,Var("k"){INT},Int(0){INT}){INT}){INT}){INT},Call(FuncName("error",".lib"),[String("diff: k must be a nonnegative integer"){STRING}]){UNIT},IfThen(RelOp(EQ,Var("k"){INT},Int(0){INT}){INT},Return{UNIT})),If(Call(FuncName("is_vector","._matrix(_int)"),[Var("x"){MATRIX(INT)}]){INT},Stats([Assign(Var("n"){INT},Call(FuncName("length",".lib"),[Var("x"){MATRIX(INT)}]){INT}),If(RelOp(LE,Var("n"){INT},Var("k"){INT}){INT},Assign(Var("x"){MATRIX(NIL)},Matrix([]){MATRIX(NIL)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Var("k"){INT}){MATRIX(INT)},Assign(Var("x"){MATRIX(NIL)},MBinOp(MINUS,Subscript(Var("x"){MATRIX(NIL)},[Range(Int(2){INT},Int(1){INT},BinOp(PLUS,BinOp(MINUS,Var("n"){INT},Var("i"){INT}){INT},Int(1){INT}){INT}){MATRIX(INT)}]){MATRIX(NIL)},Subscript(Var("x"){MATRIX(NIL)},[Range(Int(1){INT},Int(1){INT},BinOp(MINUS,Var("n"){INT},Var("i"){INT}){INT}){MATRIX(INT)}]){MATRIX(NIL)}){MATRIX(NIL)})))]),Stats([Assign(Var("n"){INT},Call(FuncName("rows","._matrix(_nil)"),[Var("x"){MATRIX(NIL)}]){INT}),If(RelOp(LE,Var("n"){INT},Var("k"){INT}){INT},Assign(Var("x"){MATRIX(NIL)},Matrix([]){MATRIX(NIL)}),For(Var("i"){INT},Range(Int(1){INT},Int(1){INT},Var("k"){INT}){MATRIX(INT)},Assign(Var("x"){MATRIX(NIL)},MBinOp(MINUS,Subscript(Var("x"){MATRIX(NIL)},[Range(Int(2){INT},Int(1){INT},BinOp(PLUS,BinOp(MINUS,Var("n"){INT},Var("i"){INT}){INT},Int(1){INT}){INT}){MATRIX(INT)},Colon{MATRIX(INT)}]){MATRIX(NIL)},Subscript(Var("x"){MATRIX(NIL)},[Range(Int(1){INT},Int(1){INT},BinOp(MINUS,Var("n"){INT},Var("i"){INT}){INT}){MATRIX(INT)},Colon{MATRIX(INT)}]){MATRIX(NIL)}){MATRIX(NIL)})))]))])),FunctionDec([Var("nr"){INT}],"rows._matrix(_nil)",[Var("x"){MATRIX(NIL)}],Stats([NilExp{NIL},AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("x"){MATRIX(NIL)}]){[INT,INT]})])),FunctionDec([Var("retval"){INT}],"is_vector._matrix(_int)",[Var("x"){MATRIX(INT)}],Stats([Assign(Var("retval"){INT},Int(0){INT}),Stats([AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("x"){MATRIX(INT)}]){[INT,INT]}),Assign(Var("retval"){INT},RelOp(OR,RelOp(AND,RelOp(EQ,Var("nr"){INT},Int(1){INT}){INT},RelOp(GE,Var("nc"){INT},Int(1){INT}){INT}){INT},RelOp(AND,RelOp(EQ,Var("nc"){INT},Int(1){INT}){INT},RelOp(GE,Var("nr"){INT},Int(1){INT}){INT}){INT}){INT})])])),FunctionDec([Var("retval"){INT}],"is_scalar._int",[Var("x"){INT}],Stats([Assign(Var("retval"){INT},Int(0){INT}),Stats([AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("x"){INT}]){[INT,INT]}),Assign(Var("retval"){INT},RelOp(AND,RelOp(EQ,Var("nr"){INT},Int(1){INT}){INT},RelOp(EQ,Var("nc"){INT},Int(1){INT}){INT}){INT})])])),FunctionDec([Var("y"){MATRIX(INT)}],"flipud._matrix(_int)",[Var("x"){MATRIX(INT)}],Stats([NilExp{NIL},Assign(Var("nr"){INT},Call(FuncName("rows","._matrix(_int)"),[Var("x"){MATRIX(INT)}]){INT}),Assign(Var("y"){MATRIX(INT)},Subscript(Var("x"){MATRIX(INT)},[Range(Var("nr"){INT},UMinus(Int(1){INT}){INT},Int(1){INT}){MATRIX(INT)},Colon{MATRIX(INT)}]){MATRIX(INT)})])),FunctionDec([Var("nr"){INT}],"rows._matrix(_int)",[Var("x"){MATRIX(INT)}],Stats([NilExp{NIL},AssignMulti([Var("nr"){INT},Var("nc"){INT}],Call(FuncName("size",".lib"),[Var("x"){MATRIX(INT)}]){[INT,INT]})]))],Stats([Call(FuncName("global_settings","."),[]){UNIT},Global("NET_PACKET_LENGTH"){INT},Assign(Var("input_file"){STRING},Call(FuncName("fopen",".lib"),[Matrix([[Call(FuncName("getenv",".lib"),[String("MOUSE_TOP"){STRING}]){STRING},String("/app/dvbt/demo_head.mpg"){STRING}]{MATRIX(STRING)}]){MATRIX(STRING)},String("r"){STRING}]){STRING}),While(UnOp(NOT,Call(FuncName("feof",".lib"),[Var("input_file"){STRING}]){INT}){INT},Stats([Assign(Var("data_in"){INT},Int(1){INT}),AssignMulti([Var("data_in"){MATRIX(FLOAT)},Var("count"){INT}],Call(FuncName("fread",".lib"),[Var("input_file"){STRING},Var("NET_PACKET_LENGTH"){INT}]){[MATRIX(FLOAT),INT]}),Call(FuncName("disp",".lib"),[Var("data_in"){INT}]){UNIT},IfThen(RelOp(NE,Var("count"){INT},Int(0){INT}){INT},Stats([Call(FuncName("fprintf",".lib"),[String("reading block of length %d\n"){STRING},Var("count"){INT}]){INT},IfThen(RelOp(LT,Var("count"){INT},Var("NET_PACKET_LENGTH"){INT}){INT},Assign(Var("data_in"){MATRIX(INT)},Matrix([[Var("data_in"){INT}]{MATRIX(INT)},[Call(FuncName("zeros",".lib"),[BinOp(MINUS,Var("NET_PACKET_LENGTH"){INT},Var("count"){INT}){INT},Int(1){INT}]){MATRIX(INT)}]{MATRIX(INT)}]){MATRIX(INT)})),Assign(Var("data_channel_in"){MATRIX(INT)},Call(FuncName("dvbt_send","._matrix(_int)"),[Var("data_in"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data_channel_out"){MATRIX(INT)},Call(FuncName("channel_model","._matrix(_int)"),[Var("data_channel_in"){MATRIX(INT)}]){MATRIX(INT)}),Assign(Var("data_out"){MATRIX(INT)},Call(FuncName("dvbt_receive","._matrix(_int)"),[Var("data_channel_out"){MATRIX(INT)}]){MATRIX(INT)}),If(MRelOp(EQ,Var("data_in"){MATRIX(INT)},Var("data_out"){MATRIX(INT)}){MATRIX(INT)},Call(FuncName("fprintf",".lib"),[String("send&receive of %d bytes successful\n"){STRING},Call(FuncName("length",".lib"),[Var("data_in"){MATRIX(INT)}]){INT}]){INT},Stats([Call(FuncName("fprintf",".lib"),[String("**error**\n"){STRING}]){INT},Return{UNIT}])),Call(FuncName("fprintf",".lib"),[String("\n"){STRING}]){INT}]))])),Call(FuncName("fclose",".lib"),[Var("input_file"){STRING}]){INT}])),([("round",[INT],S([INT]),D(Int(1),Int(1))),("round",[FLOAT],S([INT]),D(Int(1),Int(1))),("round",[COMPLEX],S([COMPLEX]),D(Int(1),Int(1))),("sort",[MATRIX(INT)],M([MATRIX(INT),[MATRIX(INT),MATRIX(INT)]]),ShapeTwo-dep),("sort",[MATRIX(FLOAT)],M([NIL,[MATRIX(FLOAT),MATRIX(INT)]]),ShapeTwo-dep),("sort",[MATRIX(FLOAT)],M([MATRIX(FLOAT),[MATRIX(FLOAT),MATRIX(INT)]]),ShapeTwo-dep),("toupper",[STRING],S([STRING]),ShapeOne-dep),("tolower",[STRING],S([STRING]),ShapeOne-dep),("find",[INT],M([INT,[INT,INT],[INT,INT,INT]]),SS([M(INT,D(Int(1),Int(1))),[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))],[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]])),("find",[MATRIX(INT)],M([MATRIX(INT),[MATRIX(INT),MATRIX(INT)],[MATRIX(INT),MATRIX(INT),MATRIX(INT)]]),SS([M(INT,D(SKIP,SKIP)),[M(INT,D(SKIP,SKIP)),M(INT,D(SKIP,SKIP))],[M(INT,D(SKIP,SKIP)),M(INT,D(SKIP,SKIP)),M(INT,D(SKIP,SKIP))]])),("find",[MATRIX(FLOAT)],M([MATRIX(FLOAT),[MATRIX(INT),MATRIX(FLOAT)],[MATRIX(INT),MATRIX(INT),MATRIX(FLOAT)]]),SS([M(INT,D(SKIP,SKIP)),[M(INT,D(SKIP,SKIP)),M(INT,D(SKIP,SKIP))],[M(INT,D(SKIP,SKIP)),M(INT,D(SKIP,SKIP)),M(FLOAT,D(SKIP,SKIP))]])),("toascii",[MATRIX(STRING)],S([MATRIX(INT)]),ShapeOne-dep),("toascii",[STRING],S([MATRIX(INT)]),ShapeOne-dep),("max",[INT],M([INT,[INT,INT]]),SKIP),("max",[MATRIX(INT)],M([INT,[INT,INT]]),SKIP),("max",[MATRIX(FLOAT)],M([FLOAT,[FLOAT,INT]]),SKIP),("cumsum",[MATRIX(INT)],S([MATRIX(INT)]),ShapeOne-dep),("cumsum",[MATRIX(INT),INT],S([MATRIX(INT)]),ShapeOne-dep),("ceil",[INT],S([INT]),D(Int(1),Int(1))),("ceil",[FLOAT],S([INT]),D(Int(1),Int(1))),("ceil",[COMPLEX],S([COMPLEX]),D(Int(1),Int(1))),("ones",[INT,INT],S([MATRIX(INT)]),Arg-dep),("ones",[INT],S([MATRIX(INT)]),Arg-dep),("imag",[COMPLEX],S([FLOAT]),D(Int(1),Int(1))),("imag",[FLOAT],S([INT]),D(Int(1),Int(1))),("imag",[INT],S([INT]),D(Int(1),Int(1))),("prod",[MATRIX(INT)],S([MATRIX(INT)]),D(Int(1),Int(1))),("prod",[MATRIX(INT),INT],S([MATRIX(INT)]),D(Int(1),Int(1))),("prod",[MATRIX(FLOAT),INT],S([MATRIX(FLOAT)]),D(Int(1),Int(1))),("prod",[MATRIX(FLOAT)],S([MATRIX(FLOAT)]),D(Int(1),Int(1))),("setstr",[MATRIX(INT)],S([STRING]),ShapeOne-dep),("real",[FLOAT],S([FLOAT]),D(Int(1),Int(1))),("real",[INT],S([INT]),D(Int(1),Int(1))),("abs",[INT],S([INT]),D(Int(1),Int(1))),("abs",[FLOAT],S([FLOAT]),D(Int(1),Int(1))),("abs",[COMPLEX],S([FLOAT]),D(Int(1),Int(1))),("floor",[INT],S([INT]),D(Int(1),Int(1))),("floor",[FLOAT],S([INT]),D(Int(1),Int(1))),("floor",[COMPLEX],S([COMPLEX]),D(Int(1),Int(1))),("log",[INT],S([FLOAT]),D(Int(1),Int(1))),("log",[FLOAT],S([FLOAT]),D(Int(1),Int(1))),("log",[COMPLEX],S([COMPLEX]),D(Int(1),Int(1))),("sign",[INT],S([INT]),D(Int(1),Int(1))),("sign",[FLOAT],S([INT]),D(Int(1),Int(1))),("error",[STRING],S([UNIT]),NoShape),("error",[STRING,STRING],S([UNIT]),NoShape),("usage",[STRING],S([UNIT]),NoShape),("fix",[FLOAT],S([INT]),D(Int(1),Int(1))),("fix",[INT],S([INT]),D(Int(1),Int(1))),("fix",[COMPLEX],S([COMPLEX]),D(Int(1),Int(1))),("fopen",[STRING],S([MATRIX(STRING)]),D(Int(1),Int(1))),("fopen",[STRING,STRING],S([STRING]),D(Int(1),Int(1))),("fopen",[MATRIX(STRING),STRING],S([STRING]),D(Int(1),Int(1))),("fopen",[STRING,STRING,STRING],S([STRING]),D(Int(1),Int(1))),("feof",[STRING],S([INT]),D(Int(1),Int(1))),("fread",[STRING,INT],M([NIL,[MATRIX(FLOAT),INT]]),SKIP),("fread",[STRING],M([NIL,[STRING,INT]]),SKIP),("fread",[STRING,STRING],M([NIL,[STRING,INT]]),SKIP),("zeros",[INT,INT],S([MATRIX(INT)]),Arg-dep),("zeros",[INT],S([MATRIX(INT)]),Arg-dep),("fprintf",[STRING],S([INT]),D(Int(1),Int(1))),("fprintf",[STRING,INT],S([INT]),D(Int(1),Int(1))),("fprintf",[STRING,MATRIX(INT)],S([INT]),D(Int(1),Int(1))),("fprintf",[STRING,INT,INT],S([INT]),D(Int(1),Int(1))),("fprintf",[STRING,FLOAT],S([INT]),D(Int(1),Int(1))),("fclose",[STRING],S([INT]),D(Int(1),Int(1)))],[("is_matrix",[ALL],S([INT]),M(INT,D(Int(1),Int(1)))),("all",[ALL],S([MATRIX(INT)]),SKIP),("any",[ALL],S([MATRIX(INT)]),SKIP),("isstr",[ALL],S([INT]),M(INT,D(Int(1),Int(1)))),("size",[ALL],M([MATRIX(INT),[INT,INT]]),SS([M(INT,D(Int(1),Int(2))),[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]])),("islogical",[ALL],S([INT]),M(INT,D(Int(1),Int(1)))),("isempty",[ALL],S([INT]),M(INT,D(Int(1),Int(1)))),("isnumeric",[ALL],S([INT]),M(INT,D(Int(1),Int(1)))),("typeinfo",[ALL],S([STRING]),M(STRING,D(Int(1),SKIP))),("getenv",[ALL],S([STRING]),M(STRING,D(Int(1),SKIP))),("disp",[ALL],S([UNIT]),NoShape),("length",[ALL],S([INT]),M(INT,D(Int(1),Int(1))))],[("size",[ALL,INT],S([INT]),D(Int(1),Int(1))),("zeros",[],S([INT]),D(Int(1),Int(1)))]))
