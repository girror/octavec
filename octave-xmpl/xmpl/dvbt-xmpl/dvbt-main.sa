Prog([FunctionDec([Var("data_out"){M(INT,D(Int(1),Int(1)))}],"dvbt_receive._matrix(_int)",[Var("data_channel_out"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("  dvbt_receive (%d)\n"){M(STRING,D(Int(1),Int(20)))},Call(FuncName("length",".lib"),[Var("data_channel_out"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKETS_PER_PRBS_PERIOD"){M(INT,D(Int(1),Int(1)))},Global("dvbt_receive_current_packet"){NoShape},Global("dvbt_receive_prbs_register"){NoShape},Global("dvbt_receive_conv_regigster"){NoShape},Assign(Var("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Var("data_channel_out"){M(INT,D(Int(1),Int(1)))}),AssignMulti([Var("x"){M(FLOAT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("depuncturing","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){[M(FLOAT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("convolutional_decode","._matrix(_float)_matrix(_int)"),[Var("x"){M(FLOAT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("byte_from_bit_vector","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("outer_deinterleave","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data"){M(INT,D(SKIP,SKIP))},Call(FuncName("rs_decode","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("remove_sync_and_unscramble","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data_out"){M(INT,D(Int(1),Int(1)))},Var("data"){M(INT,D(Int(1),Int(1)))}),Assign(Var("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rem","._int_int"),[Int(1){M(INT,D(Int(1),Int(1)))},Var("PACKETS_PER_PRBS_PERIOD"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"rem._int_int",[Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("x"){M(INT,D(Int(1),Int(1)))},BinOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("data_out"){M(INT,D(Int(1),Int(1)))}],"remove_sync_and_unscramble._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    remove_sync_and_unscramble (%d)\n"){M(STRING,D(Int(1),Int(36)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("NET_PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("PACKETS_PER_PRBS_PERIOD"){M(INT,D(Int(1),Int(1)))},Global("SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))},Global("INV_SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))},Global("INIT_PRBS_REGISTER"){M(INT,D(Int(1),Int(15)))},Global("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))},Global("dvbt_receive_prbs_register"){NoShape},If(RelOp(EQ,Var("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("dvbt_receive_prbs_register"){M(INT,D(Int(1),Int(15)))},Var("INIT_PRBS_REGISTER"){M(INT,D(Int(1),Int(15)))}),Assign(Var("sync_byte"){M(INT,D(SKIP,SKIP))},Var("INV_SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))})]),Stats([Subscript(Var("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))},[Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("sync_byte"){M(INT,D(SKIP,SKIP))},Var("SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))})])),IfThen(MExpansion(Var("sync_byte"){M(INT,D(SKIP,SKIP))},PartialROp(NE,Subscript(Var("data_in"){M(INT,D(Int(1),Int(1)))},[Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Stats([Call(FuncName("fprintf",".lib"),[String("warning: actual sync byte (%2.2x) does not match\n"){M(STRING,D(Int(1),Int(49)))},Subscript(Var("data_in"){M(INT,D(Int(1),Int(1)))},[Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Call(FuncName("fprintf",".lib"),[String("warning: expected sync byte (%2.2x).\n"){M(STRING,D(Int(1),Int(37)))},Var("sync_byte"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),Int(1)))},Call(FuncName("fprintf",".lib"),[String("warning: (current_packet=%d)\n"){M(STRING,D(Int(1),Int(29)))},Var("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))}])),AssignMulti([Var("prbs"){M(INT,D(SKIP,SKIP))},Var("dvbt_receive_prbs_register"){M(INT,D(Int(1),Int(15)))}],Call(FuncName("prbs_sequence","._int_matrix(_int)"),[Var("NET_PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Var("dvbt_receive_prbs_register"){M(INT,D(Int(1),Int(15)))}]){[M(INT,D(SKIP,SKIP)),M(INT,D(Int(1),Int(15)))]}),Assign(Var("data_out"){M(INT,D(Int(1),Int(1)))},Call(FuncName("byte_xor","._matrix(_int)_matrix(_int)"),[Subscript(Var("data_in"){M(INT,D(Int(1),Int(1)))},[Range(Int(2){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},Var("prbs"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("result"){M(INT,D(Int(1),Int(1)))}],"byte_xor._matrix(_int)_matrix(_int)",[Var("byte_vector1"){M(INT,D(SKIP,SKIP))},Var("byte_vector2"){M(INT,D(SKIP,SKIP))}],Stats([Call(FuncName("fprintf",".lib"),[String("      byte_xor\n"){M(STRING,D(Int(1),Int(15)))}]){M(STRING,D(Int(1),Int(1)))},Assign(Var("result"){M(INT,D(SKIP,SKIP))},Var("byte_vector1"){M(INT,D(SKIP,SKIP))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("byte_vector1"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("byte_vector1")])))},Stats([Assign(Var("byte1"){M(INT,D(SKIP,SKIP))},Subscript(Var("byte_vector1"){M(INT,D(SKIP,SKIP))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("byte2"){M(INT,D(SKIP,SKIP))},Subscript(Var("byte_vector2"){M(INT,D(SKIP,SKIP))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("result_byte"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(8)))},Stats([Assign(Var("bit1"){M(INT,D(SKIP,SKIP))},Call(FuncName("rem","._int_int"),[Var("byte1"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("bit2"){M(INT,D(SKIP,SKIP))},Call(FuncName("rem","._int_int"),[Var("byte2"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("result_bit"){M(INT,D(SKIP,SKIP))},Call(FuncName("xor","._int_int"),[Var("bit1"){M(INT,D(SKIP,SKIP))},Var("bit2"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("result_byte"){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,Var("result_byte"){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("result_bit"){M(INT,D(SKIP,SKIP))},BinOp(POWER,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("j"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))}),Assign(Var("byte1"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(DIV,Var("byte1"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("byte2"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(DIV,Var("byte2"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))})])),Assign(Subscript(Var("result"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Var("result_byte"){M(INT,D(Int(1),Int(1)))})]))])),FunctionDec([Var("z"){M(INT,D(SKIP,SKIP))}],"xor._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(SKIP,SKIP))}],If(MExpansion(MRelOp(EQ,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))},PartialROp(Flip(OR),RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))},Assign(Var("z"){M(INT,D(SKIP,SKIP))},Call(FuncName("logical","._int"),[BinOp(MINUS,RelOp(OR,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))},RelOp(AND,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Call(FuncName("error",".lib"),[String("xor: x and y must be of common size or scalars"){M(STRING,D(Int(1),Int(46)))}]){NoShape})),FunctionDec([Var("y"){M(INT,D(SKIP,SKIP))}],"logical._int",[Var("x"){M(INT,D(SKIP,SKIP))}],If(RelOp(OR,Call(FuncName("islogical",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("isempty",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},Var("x"){M(INT,D(SKIP,SKIP))}),If(Call(FuncName("isnumeric",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},RelOp(NE,Var("x"){M(INT,D(SKIP,SKIP))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}),Call(FuncName("error",".lib"),[String("logical not defined for type `%s'"){M(STRING,D(Int(1),Int(33)))},Call(FuncName("typeinfo",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),SKIP))}]){NoShape}))),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(SKIP,SKIP))}],"rem._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,D(SKIP,SKIP))},BinOp(MINUS,Var("x"){M(INT,D(SKIP,SKIP))},BinOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(SKIP,SKIP))}],"rem._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,D(SKIP,SKIP))},BinOp(MINUS,Var("x"){M(INT,D(SKIP,SKIP))},BinOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("sequence"){M(INT,D(SKIP,SKIP))},Var("prbs_register_out"){M(INT,D(Int(1),Int(15)))}],"prbs_sequence._int_matrix(_int)",[Var("byte_length"){M(INT,D(Int(1),Int(1)))},Var("prbs_register"){M(INT,D(Int(1),Int(15)))}],Stats([Call(FuncName("fprintf",".lib"),[String("      prbs_sequence\n"){M(STRING,D(Int(1),Int(20)))}]){M(STRING,D(Int(1),Int(1)))},Assign(Var("bit_length"){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Int(8){M(INT,D(Int(1),Int(1)))},Var("byte_length"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}),Assign(Var("bit_sequence"){M(INT,D(Var("bit_length"),Int(1)))},Call(FuncName("zeros",".lib"),[Var("bit_length"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("bit_length"),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("bit_length"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("bit_length")))},Stats([Assign(Var("new_bit"){M(INT,D(Int(1),Int(1)))},Call(FuncName("xor","._int_int"),[Subscript(Var("prbs_register"){M(INT,D(Int(1),Int(15)))},[Int(14){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Subscript(Var("prbs_register"){M(INT,D(Int(1),Int(15)))},[Int(15){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("prbs_register"){M(INT,D(Int(1),Int(2)))},Matrix([[Var("new_bit"){M(INT,D(Int(1),Int(1)))},Subscript(Var("prbs_register"){M(INT,D(Int(1),Int(15)))},[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(14){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(14)))}]){M(INT,D(Int(1),Int(14)))}]{M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}),Assign(Subscript(Var("bit_sequence"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Var("new_bit"){M(INT,D(Int(1),Int(1)))})])),Assign(Var("sequence"){M(INT,D(Var("byte_length"),Int(1)))},Call(FuncName("zeros",".lib"),[Var("byte_length"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("byte_length"),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("byte_length"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("byte_length")))},For(Var("j"){M(INT,D(Int(1),Int(1)))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(8)))},Assign(Subscript(Var("sequence"){M(INT,D(SKIP,SKIP))},[Var("i"){M(INT,D(SKIP,SKIP))}]),BinOp(PLUS,Subscript(Var("sequence"){M(INT,D(Var("byte_length"),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},BinOp(MUL,Subscript(Var("bit_sequence"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(MUL,Int(8){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Var("j"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},BinOp(POWER,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Int(8){M(INT,D(Int(1),Int(1)))},Var("j"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}))),Assign(Var("prbs_register_out"){M(INT,D(Int(1),Int(15)))},Var("prbs_register"){M(INT,D(Int(1),Int(15)))})])),FunctionDec([Var("z"){M(INT,D(Int(1),Int(1)))}],"xor._int_int",[Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],If(MExpansion(MRelOp(EQ,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))},PartialROp(Flip(OR),RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))},Assign(Var("z"){M(INT,D(Int(1),Int(1)))},Call(FuncName("logical","._int"),[BinOp(MINUS,RelOp(OR,Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(AND,Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Call(FuncName("error",".lib"),[String("xor: x and y must be of common size or scalars"){M(STRING,D(Int(1),Int(46)))}]){NoShape})),FunctionDec([Var("y"){M(INT,D(Int(1),Int(1)))}],"logical._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],If(RelOp(OR,Call(FuncName("islogical",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("isempty",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(Int(1),Int(1)))},Var("x"){M(INT,D(Int(1),Int(1)))}),If(Call(FuncName("isnumeric",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(Int(1),Int(1)))},RelOp(NE,Var("x"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}),Call(FuncName("error",".lib"),[String("logical not defined for type `%s'"){M(STRING,D(Int(1),Int(33)))},Call(FuncName("typeinfo",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),SKIP))}]){NoShape}))),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("data_out"){M(INT,D(SKIP,SKIP))}],"rs_decode._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    rs_decode (%d)\n"){M(STRING,D(Int(1),Int(19)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))},IfThen(RelOp(NE,Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Call(FuncName("fprintf",".lib"),[String("error: rs_decode: packet size %d is not expected %d.\n"){M(STRING,D(Int(1),Int(53)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Return{NoShape}])),IfThen(MRelOp(NE,Subscript(Var("data_in"){M(INT,D(Int(1),Int(1)))},[Range(BinOp(PLUS,Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},Call(FuncName("zeros",".lib"),[Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("RS_PARITY_BYTES"),Int(1)))}){M(INT,D(SKIP,SKIP))},Call(FuncName("fprintf",".lib"),[String("error: parity\n"){M(STRING,D(Int(1),Int(14)))}]){M(STRING,D(Int(1),Int(1)))}),Assign(Var("data_out"){M(INT,D(SKIP,SKIP))},Subscript(Var("data_in"){M(INT,D(Int(1),Int(1)))},[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("PACKET_LENGTH")))}]){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("data_out"){M(INT,D(Int(1),Int(1)))}],"outer_deinterleave._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    outer_deinterleave (%d)\n"){M(STRING,D(Int(1),Int(28)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))},Global("OI_I"){M(INT,D(Int(1),Int(1)))},Global("OI_M"){M(INT,D(Int(1),Int(1)))},Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("reshape","._matrix(_int)_int_int"),[Var("data_in"){M(INT,D(Int(1),Int(1)))},Var("OI_M"){M(INT,D(Int(1),Int(1)))},Var("OI_I"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data_out"){M(INT,D(Int(1),Int(1)))},Call(FuncName("reshape","._matrix(_int)_int_int"),[UnOp(E_CONJUGATE,Var("data"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"reshape._matrix(_int)_int_int",[Var("a"){M(INT,D(Int(1),Int(1)))},Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}],Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("a"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("retval"){M(INT,D(Var("m"),Var("n")))},Call(FuncName("zeros",".lib"),[Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("m"),Var("n")))}),NilExp{NoShape},Assign(Subscript(Var("retval"){M(INT,D(Int(1),Int(1)))},[Colon{M(INT,SKIP)}]),Var("a"){M(INT,D(Int(1),Int(1)))})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){M(STRING,D(Int(1),Int(25)))}]){NoShape})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"reshape._matrix(_int)_int_int",[Var("a"){M(INT,D(Int(1),Int(1)))},Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}],Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("a"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("retval"){M(INT,D(Var("m"),Var("n")))},Call(FuncName("zeros",".lib"),[Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("m"),Var("n")))}),NilExp{NoShape},Assign(Subscript(Var("retval"){M(INT,D(Int(1),Int(1)))},[Colon{M(INT,SKIP)}]),Var("a"){M(INT,D(Int(1),Int(1)))})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){M(STRING,D(Int(1),Int(25)))}]){NoShape})])),FunctionDec([Var("data_out"){M(INT,D(Int(1),Int(1)))}],"byte_from_bit_vector._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    byte_from_bit_vector (%d)\n"){M(STRING,D(Int(1),Int(30)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Assign(Var("data_out"){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data_in")]),Int(8)),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(DIV,Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data_in")]),Int(8)),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("data_out"){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data_in")]),Int(8)),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("data_out")])))},Stats([Assign(Var("data_byte"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(8)))},Stats([If(RelOp(LE,Subscript(Var("data_in"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(MUL,Int(8){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Var("j"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("data_bit"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Assign(Var("data_bit"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))})),Assign(Var("data_byte"){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},Var("data_byte"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Var("data_bit"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])),Assign(Subscript(Var("data_out"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Var("data_byte"){M(INT,D(Int(1),Int(1)))})]))])),FunctionDec([Var("data"){M(INT,D(Int(1),Int(1)))}],"convolutional_decode._matrix(_float)_matrix(_int)",[Var("x"){M(FLOAT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    convolutional_decode (%d)\n"){M(STRING,D(Int(1),Int(30)))},Call(FuncName("length",".lib"),[Var("x"){M(FLOAT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("INIT_CONV_REGISTER"){M(INT,D(Int(1),Int(6)))},Global("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))},Global("dvbt_receive_conv_register"){NoShape},IfThen(RelOp(EQ,Var("dvbt_receive_current_packet"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("dvbt_receive_conv_register"){M(INT,D(Int(1),Int(6)))},Var("INIT_CONV_REGISTER"){M(INT,D(Int(1),Int(6)))})),Assign(Var("data"){M(INT,D(Call(FuncName("length",".lib"),[Var("x")]),Int(1)))},Call(FuncName("zeros",".lib"),[Call(FuncName("length",".lib"),[Var("x"){M(FLOAT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Call(FuncName("length",".lib"),[Var("x")]),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("data")])))},Stats([Assign(Var("data_x"){M(FLOAT,D(SKIP,SKIP))},Subscript(Var("x"){M(FLOAT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(FLOAT,D(SKIP,SKIP))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Matrix([[Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))},Int(6){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(4)))}]){M(INT,D(Int(1),Int(4)))},Assign(Var("data_x"){M(FLOAT,D(Int(1),Int(1)))},Call(FuncName("soft_xor","._float_int"),[Var("data_x"){M(FLOAT,D(SKIP,SKIP))},Subscript(Var("dvbt_receive_conv_register"){M(INT,D(Int(1),Int(6)))},[Var("j"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(FLOAT,D(Int(1),Int(1)))})),Assign(Var("data_y"){M(INT,D(SKIP,SKIP))},Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Matrix([[Int(2){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))},Int(5){M(INT,D(Int(1),Int(1)))},Int(6){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(4)))}]){M(INT,D(Int(1),Int(4)))},Assign(Var("data_y"){M(FLOAT,D(Int(1),Int(1)))},Call(FuncName("soft_xor","._int_int"),[Var("data_y"){M(INT,D(SKIP,SKIP))},Subscript(Var("dvbt_receive_conv_register"){M(INT,D(Int(1),Int(6)))},[Var("j"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(FLOAT,D(Int(1),Int(1)))})),IfThen(RelOp(AND,RelOp(EQ,Var("data_x"){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},RelOp(EQ,Cast-T(Var("data_y"){M(INT,D(SKIP,SKIP))},M(FLOAT,D(SKIP,SKIP))){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))}){M(FLOAT,D(SKIP,SKIP))},Call(FuncName("fprintf",".lib"),[String("warning: undefined symbol %d"){M(STRING,D(Int(1),Int(28)))},Var("i"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),Int(1)))}),IfThen(RelOp(OR,RelOp(GT,Cast-T(RelOp(AND,RelOp(LT,Var("data_x"){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},Var("data_y"){M(INT,D(SKIP,SKIP))}){M(FLOAT,D(SKIP,SKIP))},M(FLOAT,D(SKIP,SKIP))){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},RelOp(AND,RelOp(GT,Var("data_x"){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},RelOp(LT,Cast-T(Var("data_y"){M(INT,D(SKIP,SKIP))},M(FLOAT,D(SKIP,SKIP))){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))}){M(FLOAT,D(SKIP,SKIP))}){M(FLOAT,D(SKIP,SKIP))},Call(FuncName("fprintf",".lib"),[String("warning: contradicting symbol %d"){M(STRING,D(Int(1),Int(32)))},Var("i"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),Int(1)))}),If(RelOp(OR,RelOp(LT,Var("data_x"){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},RelOp(LT,Cast-T(Var("data_y"){M(INT,D(SKIP,SKIP))},M(FLOAT,D(SKIP,SKIP))){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))}){M(FLOAT,D(SKIP,SKIP))},Assign(Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Int(0){M(INT,D(Int(1),Int(1)))}),If(RelOp(OR,RelOp(GT,Var("data_x"){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},RelOp(GT,Cast-T(Var("data_y"){M(INT,D(SKIP,SKIP))},M(FLOAT,D(SKIP,SKIP))){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))}){M(FLOAT,D(SKIP,SKIP))},Assign(Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Int(1){M(INT,D(Int(1),Int(1)))}),Call(FuncName("fprintf",".lib"),[String("error: internal error at symbol %d"){M(STRING,D(Int(1),Int(34)))},Var("i"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),Int(1)))})),Assign(Var("dvbt_receive_conv_register"){M(INT,D(Int(1),Int(2)))},Matrix([[Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},Subscript(Var("dvbt_receive_conv_register"){M(INT,D(Int(1),Int(6)))},[Range(Int(2){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(6){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]{M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))})]))])),FunctionDec([Var("x"){M(FLOAT,D(Int(1),Int(1)))}],"soft_xor._int_int",[Var("a"){M(INT,D(SKIP,SKIP))},Var("b"){M(INT,D(Int(1),Int(1)))}],If(RelOp(LT,Cast-T(Var("b"){M(INT,D(Int(1),Int(1)))},M(FLOAT,D(Int(1),Int(1)))){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Assign(Var("x"){M(INT,D(SKIP,SKIP))},Var("a"){M(INT,D(SKIP,SKIP))}),If(RelOp(EQ,Cast-T(Var("a"){M(INT,D(SKIP,SKIP))},M(FLOAT,D(SKIP,SKIP))){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},Assign(Var("x"){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}),IfThen(RelOp(GT,Cast-T(Var("b"){M(INT,D(Int(1),Int(1)))},M(FLOAT,D(Int(1),Int(1)))){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Assign(Var("x"){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Int(1){M(INT,D(Int(1),Int(1)))},Var("a"){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))}))))),FunctionDec([Var("x"){M(FLOAT,D(Int(1),Int(1)))}],"soft_xor._float_int",[Var("a"){M(FLOAT,D(SKIP,SKIP))},Var("b"){M(INT,D(Int(1),Int(1)))}],If(RelOp(LT,Cast-T(Var("b"){M(INT,D(Int(1),Int(1)))},M(FLOAT,D(Int(1),Int(1)))){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Assign(Var("x"){M(FLOAT,D(SKIP,SKIP))},Var("a"){M(FLOAT,D(SKIP,SKIP))}),If(RelOp(EQ,Var("a"){M(FLOAT,D(SKIP,SKIP))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},Assign(Var("x"){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}),IfThen(RelOp(GT,Cast-T(Var("b"){M(INT,D(Int(1),Int(1)))},M(FLOAT,D(Int(1),Int(1)))){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Assign(Var("x"){M(FLOAT,D(Int(1),Int(1)))},BinOp(MINUS,Cast-T(Int(1){M(INT,D(Int(1),Int(1)))},M(FLOAT,D(Int(1),Int(1)))){M(FLOAT,D(Int(1),Int(1)))},Var("a"){M(FLOAT,D(SKIP,SKIP))}){M(FLOAT,D(Int(1),Int(1)))}))))),FunctionDec([Var("x"){M(FLOAT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],"depuncturing._matrix(_int)",[Var("data"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    depuncturing (%d)\n"){M(STRING,D(Int(1),Int(22)))},Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))},If(RelOp(EQ,Var("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Stats([Assign(Var("x"){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data")]),Int(2)),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(DIV,Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data")]),Int(2)),Int(1)))}),Assign(Var("y"){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data")]),Int(2)),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(DIV,Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data")]),Int(2)),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(BinOp(DIV,Call(FuncName("length",".lib"),[Var("data")]),Int(2)),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("x")])))},Stats([Assign(Subscript(Var("x"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})]))]),If(RelOp(EQ,Var("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))},Float(6.666666865348816e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Stats([Assign(Var("x"){M(INT,D(BinOp(DIV,BinOp(MUL,Int(2),Call(FuncName("length",".lib"),[Var("data")])),Int(3)),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(DIV,BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(DIV,BinOp(MUL,Int(2),Call(FuncName("length",".lib"),[Var("data")])),Int(3)),Int(1)))}),Assign(Var("y"){M(INT,D(BinOp(DIV,BinOp(MUL,Int(2),Call(FuncName("length",".lib"),[Var("data")])),Int(3)),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(DIV,BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(DIV,BinOp(MUL,Int(2),Call(FuncName("length",".lib"),[Var("data")])),Int(3)),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Stats([Assign(Subscript(Var("x"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]),Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Subscript(Var("x"){M(FLOAT,D(Int(1),Int(1)))},[BinOp(PLUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]),Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}),Assign(Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]),Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]),Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})]))]),Stats([Call(FuncName("fprintf",".lib"),[String("puncturing mode %g not implemented.\n"){M(STRING,D(Int(1),Int(36)))},Var("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Return{NoShape}])))])),FunctionDec([Var("data_channel_out"){M(INT,D(Int(1),Int(1)))}],"channel_model._matrix(_int)",[Var("data_channel_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("  channel_model (%d)\n"){M(STRING,D(Int(1),Int(21)))},Call(FuncName("length",".lib"),[Var("data_channel_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Assign(Var("data_channel_out"){M(INT,D(Int(1),Int(1)))},Var("data_channel_in"){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("data_channel_in"){M(INT,D(Int(1),Int(1)))}],"dvbt_send._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("  dvbt_send (%d)\n"){M(STRING,D(Int(1),Int(17)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKETS_PER_PRBS_PERIOD"){M(INT,D(Int(1),Int(1)))},Global("dvbt_send_current_packet"){NoShape},Global("dvbt_send_prbs_register"){NoShape},Global("dvbt_send_conv_regigster"){NoShape},Assign(Var("dvbt_send_current_packet"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Var("data_in"){M(INT,D(Int(1),Int(1)))}),Assign(Var("data"){M(INT,D(Int(2),Int(1)))},Call(FuncName("sync_and_scramble","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(2),Int(1)))}),Assign(Var("data"){M(INT,D(Int(2),Int(1)))},Call(FuncName("rs_encode","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(2),Int(1)))}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("outer_interleave","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("bit_from_byte_vector","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),AssignMulti([Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("convolutional_encode","._matrix(_int)"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("data"){M(INT,D(SKIP,SKIP))},Call(FuncName("puncturing","._matrix(_int)_matrix(_int)"),[Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("data_channel_in"){M(INT,D(Int(1),Int(1)))},Var("data"){M(INT,D(Int(1),Int(1)))}),Assign(Var("dvbt_send_current_packet"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rem","._int_int"),[Int(1){M(INT,D(Int(1),Int(1)))},Var("PACKETS_PER_PRBS_PERIOD"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"rem._int_int",[Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("x"){M(INT,D(Int(1),Int(1)))},BinOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("data"){M(INT,D(SKIP,SKIP))}],"puncturing._matrix(_int)_matrix(_int)",[Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    puncturing (%d)\n"){M(STRING,D(Int(1),Int(20)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))},If(RelOp(EQ,Var("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))},Float(5.000000000000000e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Stats([Assign(Var("data"){M(INT,D(BinOp(MUL,Int(2),Call(FuncName("length",".lib"),[Var("x")])),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(MUL,Int(2),Call(FuncName("length",".lib"),[Var("x")])),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("x")])))},Stats([Assign(Subscript(Var("data"){M(INT,D(SKIP,SKIP))},[BinOp(PLUS,BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]),Subscript(Var("x"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Subscript(Var("data"){M(INT,D(SKIP,SKIP))},[BinOp(PLUS,BinOp(MUL,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]),Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))})]))]),If(RelOp(EQ,Var("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))},Float(6.666666865348816e-01){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(Int(1),Int(1)))},Stats([Assign(Var("data"){M(INT,D(BinOp(DIV,BinOp(MUL,Int(3),Call(FuncName("length",".lib"),[Var("x")])),Int(2)),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(DIV,BinOp(MUL,Int(3){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(DIV,BinOp(MUL,Int(3),Call(FuncName("length",".lib"),[Var("x")])),Int(2)),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Stats([Assign(Subscript(Var("data"){M(INT,D(SKIP,SKIP))},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]),Subscript(Var("x"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Subscript(Var("data"){M(INT,D(SKIP,SKIP))},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]),Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Subscript(Var("data"){M(INT,D(SKIP,SKIP))},[BinOp(PLUS,BinOp(DIV,BinOp(MUL,Int(3){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]),Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))})]))]),Stats([Call(FuncName("fprintf",".lib"),[String("puncturing mode %g not implemented.\n"){M(STRING,D(Int(1),Int(36)))},Var("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Return{NoShape}])))])),FunctionDec([Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],"convolutional_encode._matrix(_int)",[Var("data"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    convolutional_encode (%d)\n"){M(STRING,D(Int(1),Int(30)))},Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("INIT_CONV_REGISTER"){M(INT,D(Int(1),Int(6)))},Global("dvbt_send_current_packet"){M(INT,D(Int(1),Int(1)))},Global("dvbt_send_conv_register"){NoShape},IfThen(RelOp(EQ,Var("dvbt_send_current_packet"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("dvbt_send_conv_register"){M(INT,D(Int(1),Int(6)))},Var("INIT_CONV_REGISTER"){M(INT,D(Int(1),Int(6)))})),Assign(Var("x"){M(INT,D(Call(FuncName("length",".lib"),[Var("data")]),Int(1)))},Call(FuncName("zeros",".lib"),[Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Call(FuncName("length",".lib"),[Var("data")]),Int(1)))}),Assign(Var("y"){M(INT,D(Call(FuncName("length",".lib"),[Var("data")]),Int(1)))},Call(FuncName("zeros",".lib"),[Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Call(FuncName("length",".lib"),[Var("data")]),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("data"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("data")])))},Stats([Assign(Var("data_in"){M(INT,D(SKIP,SKIP))},Subscript(Var("data"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Subscript(Var("x"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Var("data_in"){M(INT,D(Int(1),Int(1)))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Matrix([[Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))},Int(6){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(4)))}]){M(INT,D(Int(1),Int(4)))},Assign(Subscript(Var("x"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Call(FuncName("xor","._int_int"),[Subscript(Var("x"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},Subscript(Var("dvbt_send_conv_register"){M(INT,D(Int(1),Int(6)))},[Var("j"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})),Assign(Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Var("data_in"){M(INT,D(Int(1),Int(1)))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Matrix([[Int(2){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))},Int(5){M(INT,D(Int(1),Int(1)))},Int(6){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(4)))}]){M(INT,D(Int(1),Int(4)))},Assign(Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Call(FuncName("xor","._int_int"),[Subscript(Var("y"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},Subscript(Var("dvbt_send_conv_register"){M(INT,D(Int(1),Int(6)))},[Var("j"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})),Assign(Var("dvbt_send_conv_register"){M(INT,D(Int(1),Int(2)))},Matrix([[Var("data_in"){M(INT,D(Int(1),Int(1)))},Subscript(Var("dvbt_send_conv_register"){M(INT,D(Int(1),Int(6)))},[Range(Int(2){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(6){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]{M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))})]))])),FunctionDec([Var("z"){M(INT,D(Int(1),Int(1)))}],"xor._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}],If(MExpansion(MRelOp(EQ,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))},PartialROp(Flip(OR),RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))},Assign(Var("z"){M(INT,D(Int(1),Int(1)))},Call(FuncName("logical","._int"),[BinOp(MINUS,RelOp(OR,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},RelOp(AND,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Call(FuncName("error",".lib"),[String("xor: x and y must be of common size or scalars"){M(STRING,D(Int(1),Int(46)))}]){NoShape})),FunctionDec([Var("y"){M(INT,D(Int(1),Int(1)))}],"logical._int",[Var("x"){M(INT,D(SKIP,SKIP))}],If(RelOp(OR,Call(FuncName("islogical",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("isempty",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},Var("x"){M(INT,D(SKIP,SKIP))}),If(Call(FuncName("isnumeric",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},RelOp(NE,Var("x"){M(INT,D(SKIP,SKIP))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}),Call(FuncName("error",".lib"),[String("logical not defined for type `%s'"){M(STRING,D(Int(1),Int(33)))},Call(FuncName("typeinfo",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),SKIP))}]){NoShape}))),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("z"){M(INT,D(Int(1),Int(1)))}],"xor._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}],If(MExpansion(MRelOp(EQ,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))},PartialROp(Flip(OR),RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))},Assign(Var("z"){M(INT,D(Int(1),Int(1)))},Call(FuncName("logical","._int"),[BinOp(MINUS,RelOp(OR,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},RelOp(AND,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Call(FuncName("error",".lib"),[String("xor: x and y must be of common size or scalars"){M(STRING,D(Int(1),Int(46)))}]){NoShape})),FunctionDec([Var("y"){M(INT,D(Int(1),Int(1)))}],"logical._int",[Var("x"){M(INT,D(SKIP,SKIP))}],If(RelOp(OR,Call(FuncName("islogical",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("isempty",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},Var("x"){M(INT,D(SKIP,SKIP))}),If(Call(FuncName("isnumeric",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},RelOp(NE,Var("x"){M(INT,D(SKIP,SKIP))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}),Call(FuncName("error",".lib"),[String("logical not defined for type `%s'"){M(STRING,D(Int(1),Int(33)))},Call(FuncName("typeinfo",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),SKIP))}]){NoShape}))),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("data_out"){M(INT,D(Int(1),Int(1)))}],"bit_from_byte_vector._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    bit_from_byte_vector (%d)\n"){M(STRING,D(Int(1),Int(30)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Assign(Var("data_out"){M(INT,D(BinOp(MUL,Call(FuncName("length",".lib"),[Var("data_in")]),Int(8)),Int(1)))},Call(FuncName("zeros",".lib"),[BinOp(MUL,Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(MUL,Call(FuncName("length",".lib"),[Var("data_in")]),Int(8)),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("data_in")])))},Stats([Assign(Var("data_byte"){M(INT,D(SKIP,SKIP))},Subscript(Var("data_in"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(8)))},Stats([IfThen(RelOp(GE,Cast-T(Var("data_byte"){M(INT,D(SKIP,SKIP))},M(FLOAT,D(SKIP,SKIP))){M(FLOAT,D(SKIP,SKIP))},Float(1.275000000000000e+02){M(FLOAT,D(Int(1),Int(1)))}){M(FLOAT,D(SKIP,SKIP))},Assign(Subscript(Var("data_out"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(MUL,Int(8){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Var("j"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]),Int(1){M(INT,D(Int(1),Int(1)))})),Assign(Var("data_byte"){M(INT,D(SKIP,SKIP))},BinOp(MUL,Call(FuncName("rem","._int_int"),[Var("data_byte"){M(INT,D(SKIP,SKIP))},Int(128){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))})]))]))])),FunctionDec([Var("retval"){M(INT,D(SKIP,SKIP))}],"rem._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,D(SKIP,SKIP))},BinOp(MINUS,Var("x"){M(INT,D(SKIP,SKIP))},BinOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("data_out"){M(INT,D(Int(1),Int(1)))}],"outer_interleave._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    outer_interleave (%d)\n"){M(STRING,D(Int(1),Int(26)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))},Global("OI_I"){M(INT,D(Int(1),Int(1)))},Global("OI_M"){M(INT,D(Int(1),Int(1)))},Assign(Var("data"){M(INT,D(Int(1),Int(1)))},Call(FuncName("reshape","._matrix(_int)_int_int"),[Var("data_in"){M(INT,D(Int(1),Int(1)))},Var("OI_I"){M(INT,D(Int(1),Int(1)))},Var("OI_M"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data_out"){M(INT,D(Int(1),Int(1)))},Call(FuncName("reshape","._matrix(_int)_int_int"),[UnOp(E_CONJUGATE,Var("data"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"reshape._matrix(_int)_int_int",[Var("a"){M(INT,D(Int(1),Int(1)))},Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}],Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("a"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("retval"){M(INT,D(Var("m"),Var("n")))},Call(FuncName("zeros",".lib"),[Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("m"),Var("n")))}),NilExp{NoShape},Assign(Subscript(Var("retval"){M(INT,D(Int(1),Int(1)))},[Colon{M(INT,SKIP)}]),Var("a"){M(INT,D(Int(1),Int(1)))})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){M(STRING,D(Int(1),Int(25)))}]){NoShape})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"reshape._matrix(_int)_int_int",[Var("a"){M(INT,D(Int(1),Int(1)))},Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}],Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("a"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("retval"){M(INT,D(Var("m"),Var("n")))},Call(FuncName("zeros",".lib"),[Var("m"){M(INT,D(Int(1),Int(1)))},Var("n"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("m"),Var("n")))}),NilExp{NoShape},Assign(Subscript(Var("retval"){M(INT,D(Int(1),Int(1)))},[Colon{M(INT,SKIP)}]),Var("a"){M(INT,D(Int(1),Int(1)))})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){M(STRING,D(Int(1),Int(25)))}]){NoShape})])),FunctionDec([Var("data_out"){M(INT,D(Int(2),Int(1)))}],"rs_encode._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    rs_encode (%d)\n"){M(STRING,D(Int(1),Int(19)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))},IfThen(RelOp(NE,Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Call(FuncName("fprintf",".lib"),[String("error: rs_endcode: packet size %d is not expected %d.\n"){M(STRING,D(Int(1),Int(54)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Return{NoShape}])),Assign(Var("data_out"){M(INT,D(Int(2),Int(1)))},Matrix([[Var("data_in"){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(1)))},[Call(FuncName("zeros",".lib"),[Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("RS_PARITY_BYTES"),Int(1)))}]{M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(2),Int(1)))})])),FunctionDec([Var("data_out"){M(INT,D(Int(2),Int(1)))}],"sync_and_scramble._matrix(_int)",[Var("data_in"){M(INT,D(Int(1),Int(1)))}],Stats([Call(FuncName("fprintf",".lib"),[String("    sync_and_scramble (%d)\n"){M(STRING,D(Int(1),Int(27)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Global("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("NET_PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Global("PACKETS_PER_PRBS_PERIOD"){M(INT,D(Int(1),Int(1)))},Global("SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))},Global("INV_SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))},Global("INIT_PRBS_REGISTER"){M(INT,D(Int(1),Int(15)))},Global("dvbt_send_current_packet"){M(INT,D(Int(1),Int(1)))},Global("dvbt_send_prbs_register"){NoShape},Global("dvbt_send_convolution_state"){NoShape},If(RelOp(EQ,Var("dvbt_send_current_packet"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("dvbt_send_prbs_register"){M(INT,D(Int(1),Int(15)))},Var("INIT_PRBS_REGISTER"){M(INT,D(Int(1),Int(15)))}),Assign(Var("sync_byte"){M(INT,D(SKIP,SKIP))},Var("INV_SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))})]),Stats([Subscript(Var("dvbt_send_current_packet"){M(INT,D(Int(1),Int(1)))},[Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("sync_byte"){M(INT,D(SKIP,SKIP))},Var("SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))})])),AssignMulti([Var("prbs"){M(INT,D(SKIP,SKIP))},Var("dvbt_send_prbs_register"){M(INT,D(Int(1),Int(15)))}],Call(FuncName("prbs_sequence","._int_matrix(_int)"),[Var("NET_PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Var("dvbt_send_prbs_register"){M(INT,D(Int(1),Int(15)))}]){[M(INT,D(SKIP,SKIP)),M(INT,D(Int(1),Int(15)))]}),Assign(Var("data_out"){M(INT,D(Int(2),Int(1)))},Matrix([[Var("sync_byte"){M(INT,D(SKIP,SKIP))}]{M(INT,D(Int(1),Int(1)))},[Call(FuncName("byte_xor","._matrix(_int)_matrix(_int)"),[Var("data_in"){M(INT,D(Int(1),Int(1)))},Var("prbs"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(2),Int(1)))})])),FunctionDec([Var("result"){M(INT,D(Int(1),Int(1)))}],"byte_xor._matrix(_int)_matrix(_int)",[Var("byte_vector1"){M(INT,D(Int(1),Int(1)))},Var("byte_vector2"){M(INT,D(SKIP,SKIP))}],Stats([Call(FuncName("fprintf",".lib"),[String("      byte_xor\n"){M(STRING,D(Int(1),Int(15)))}]){M(STRING,D(Int(1),Int(1)))},Assign(Var("result"){M(INT,D(Int(1),Int(1)))},Var("byte_vector1"){M(INT,D(Int(1),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("byte_vector1"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Call(FuncName("length",".lib"),[Var("byte_vector1")])))},Stats([Assign(Var("byte1"){M(INT,D(SKIP,SKIP))},Subscript(Var("byte_vector1"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("byte2"){M(INT,D(SKIP,SKIP))},Subscript(Var("byte_vector2"){M(INT,D(SKIP,SKIP))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("result_byte"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),For(Var("j"){M(INT,D(Int(1),Int(1)))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(8)))},Stats([Assign(Var("bit1"){M(INT,D(SKIP,SKIP))},Call(FuncName("rem","._int_int"),[Var("byte1"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("bit2"){M(INT,D(SKIP,SKIP))},Call(FuncName("rem","._int_int"),[Var("byte2"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("result_bit"){M(INT,D(SKIP,SKIP))},Call(FuncName("xor","._int_int"),[Var("bit1"){M(INT,D(SKIP,SKIP))},Var("bit2"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("result_byte"){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,Var("result_byte"){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("result_bit"){M(INT,D(SKIP,SKIP))},BinOp(POWER,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("j"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))}),Assign(Var("byte1"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(DIV,Var("byte1"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("byte2"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(DIV,Var("byte2"){M(INT,D(SKIP,SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))})])),Assign(Subscript(Var("result"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Var("result_byte"){M(INT,D(Int(1),Int(1)))})]))])),FunctionDec([Var("z"){M(INT,D(SKIP,SKIP))}],"xor._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(SKIP,SKIP))}],If(MExpansion(MRelOp(EQ,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))},PartialROp(Flip(OR),RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))},Assign(Var("z"){M(INT,D(SKIP,SKIP))},Call(FuncName("logical","._int"),[BinOp(MINUS,RelOp(OR,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))},RelOp(AND,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}),Call(FuncName("error",".lib"),[String("xor: x and y must be of common size or scalars"){M(STRING,D(Int(1),Int(46)))}]){NoShape})),FunctionDec([Var("y"){M(INT,D(SKIP,SKIP))}],"logical._int",[Var("x"){M(INT,D(SKIP,SKIP))}],If(RelOp(OR,Call(FuncName("islogical",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("isempty",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},Var("x"){M(INT,D(SKIP,SKIP))}),If(Call(FuncName("isnumeric",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(SKIP,SKIP))},RelOp(NE,Var("x"){M(INT,D(SKIP,SKIP))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}),Call(FuncName("error",".lib"),[String("logical not defined for type `%s'"){M(STRING,D(Int(1),Int(33)))},Call(FuncName("typeinfo",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(STRING,D(Int(1),SKIP))}]){NoShape}))),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(SKIP,SKIP))}],"rem._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,D(SKIP,SKIP))},BinOp(MINUS,Var("x"){M(INT,D(SKIP,SKIP))},BinOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(SKIP,SKIP))}],"rem._int_int",[Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,D(SKIP,SKIP))},BinOp(MINUS,Var("x"){M(INT,D(SKIP,SKIP))},BinOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))},Call(FuncName("fix",".lib"),[BinOp(E_DIV,Var("x"){M(INT,D(SKIP,SKIP))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("sequence"){M(INT,D(SKIP,SKIP))},Var("prbs_register_out"){M(INT,D(Int(1),Int(15)))}],"prbs_sequence._int_matrix(_int)",[Var("byte_length"){M(INT,D(Int(1),Int(1)))},Var("prbs_register"){M(INT,D(Int(1),Int(15)))}],Stats([Call(FuncName("fprintf",".lib"),[String("      prbs_sequence\n"){M(STRING,D(Int(1),Int(20)))}]){M(STRING,D(Int(1),Int(1)))},Assign(Var("bit_length"){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Int(8){M(INT,D(Int(1),Int(1)))},Var("byte_length"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}),Assign(Var("bit_sequence"){M(INT,D(Var("bit_length"),Int(1)))},Call(FuncName("zeros",".lib"),[Var("bit_length"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("bit_length"),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("bit_length"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("bit_length")))},Stats([Assign(Var("new_bit"){M(INT,D(Int(1),Int(1)))},Call(FuncName("xor","._int_int"),[Subscript(Var("prbs_register"){M(INT,D(Int(1),Int(15)))},[Int(14){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Subscript(Var("prbs_register"){M(INT,D(Int(1),Int(15)))},[Int(15){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("prbs_register"){M(INT,D(Int(1),Int(2)))},Matrix([[Var("new_bit"){M(INT,D(Int(1),Int(1)))},Subscript(Var("prbs_register"){M(INT,D(Int(1),Int(15)))},[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(14){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(14)))}]){M(INT,D(Int(1),Int(14)))}]{M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}),Assign(Subscript(Var("bit_sequence"){M(INT,D(Int(1),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]),Var("new_bit"){M(INT,D(Int(1),Int(1)))})])),Assign(Var("sequence"){M(INT,D(Var("byte_length"),Int(1)))},Call(FuncName("zeros",".lib"),[Var("byte_length"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("byte_length"),Int(1)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("byte_length"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("byte_length")))},For(Var("j"){M(INT,D(Int(1),Int(1)))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(8)))},Assign(Subscript(Var("sequence"){M(INT,D(SKIP,SKIP))},[Var("i"){M(INT,D(SKIP,SKIP))}]),BinOp(PLUS,Subscript(Var("sequence"){M(INT,D(Var("byte_length"),Int(1)))},[Var("i"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},BinOp(MUL,Subscript(Var("bit_sequence"){M(INT,D(Int(1),Int(1)))},[BinOp(PLUS,BinOp(MUL,Int(8){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("i"){M(INT,D(SKIP,SKIP))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Var("j"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},BinOp(POWER,Int(2){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Int(8){M(INT,D(Int(1),Int(1)))},Var("j"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}))),Assign(Var("prbs_register_out"){M(INT,D(Int(1),Int(15)))},Var("prbs_register"){M(INT,D(Int(1),Int(15)))})])),FunctionDec([Var("z"){M(INT,D(Int(1),Int(1)))}],"xor._int_int",[Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}],If(MExpansion(MRelOp(EQ,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))},PartialROp(Flip(OR),RelOp(OR,Call(FuncName("is_scalar","._int"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))},Assign(Var("z"){M(INT,D(Int(1),Int(1)))},Call(FuncName("logical","._int"),[BinOp(MINUS,RelOp(OR,Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(AND,Var("x"){M(INT,D(Int(1),Int(1)))},Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Call(FuncName("error",".lib"),[String("xor: x and y must be of common size or scalars"){M(STRING,D(Int(1),Int(46)))}]){NoShape})),FunctionDec([Var("y"){M(INT,D(Int(1),Int(1)))}],"logical._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],If(RelOp(OR,Call(FuncName("islogical",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("isempty",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(Int(1),Int(1)))},Var("x"){M(INT,D(Int(1),Int(1)))}),If(Call(FuncName("isnumeric",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Assign(Var("y"){M(INT,D(Int(1),Int(1)))},RelOp(NE,Var("x"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}),Call(FuncName("error",".lib"),[String("logical not defined for type `%s'"){M(STRING,D(Int(1),Int(33)))},Call(FuncName("typeinfo",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),SKIP))}]){NoShape}))),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([],"global_settings.",[],Stats([Global("PACKET_LENGTH"){NoShape},Global("NET_PACKET_LENGTH"){NoShape},Global("PACKETS_PER_PRBS_PERIOD"){NoShape},Global("SYNC_BYTE_VALUE"){NoShape},Global("INV_SYNC_BYTE_VALUE"){NoShape},Global("INIT_PRBS_REGISTER"){NoShape},Global("RS_PARITY_BYTES"){NoShape},Global("OI_I"){NoShape},Global("OI_M"){NoShape},Global("INIT_CONV_REGISTER"){NoShape},Global("PUNCTURING_MODE"){NoShape},Global("QAM_MODE"){NoShape},Global("LOG_QAM_MODE"){NoShape},Assign(Var("ffffffff"){M(INT,D(SKIP,SKIP))},Call(FuncName("flipud","._matrix(_int)"),[Matrix([[Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("rrrrrrrr"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rows","._matrix(_int)"),[Matrix([[Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("ffxxxxxx"){M(INT,D(Int(1),Int(3)))},Call(FuncName("diff","._matrix(_int)_int"),[Matrix([[Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(3)))}]){M(INT,D(Int(1),Int(3)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(3)))}),Assign(Var("PACKETS_PER_PRBS_PERIOD"){M(INT,D(Int(1),Int(1)))},Int(8){M(INT,D(Int(1),Int(1)))}),Assign(Var("PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Int(188){M(INT,D(Int(1),Int(1)))}),Assign(Var("NET_PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Int(187){M(INT,D(Int(1),Int(1)))}),Assign(Var("SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))},Call(FuncName("hex2dec","._string"),[String("47"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("INV_SYNC_BYTE_VALUE"){M(INT,D(SKIP,SKIP))},Call(FuncName("hex2dec","._string"),[String("b8"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("INIT_PRBS_REGISTER"){M(INT,D(Int(1),Int(15)))},Matrix([[Int(1){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(15)))}]){M(INT,D(Int(1),Int(15)))}),Assign(Var("RS_PARITY_BYTES"){M(INT,D(Int(1),Int(1)))},Int(16){M(INT,D(Int(1),Int(1)))}),Assign(Var("OI_I"){M(INT,D(Int(1),Int(1)))},Int(12){M(INT,D(Int(1),Int(1)))}),Assign(Var("OI_M"){M(INT,D(Int(1),Int(1)))},Int(17){M(INT,D(Int(1),Int(1)))}),Assign(Var("INIT_CONV_REGISTER"){M(INT,D(Int(1),Int(6)))},Call(FuncName("zeros",".lib"),[Int(1){M(INT,D(Int(1),Int(1)))},Int(6){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(6)))}),Assign(Var("PUNCTURING_MODE"){M(FLOAT,D(Int(1),Int(1)))},Float(6.666666865348816e-01){M(FLOAT,D(Int(1),Int(1)))}),Assign(Var("QAM_MODE"){M(INT,D(Int(1),Int(1)))},Int(16){M(INT,D(Int(1),Int(1)))}),Assign(Var("LOG_QAM_MODE"){M(INT,D(Int(1),Int(1)))},Call(FuncName("log2","._int"),[Int(16){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("f"){M(INT,D(Int(1),Int(1)))}],"log2._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([NilExp{NoShape},Assign(Var("f"){M(INT,D(Int(1),Int(1)))},BinOp(DIV,Call(FuncName("log",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("log",".lib"),[Int(2){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])),FunctionDec([Var("d"){M(INT,D(SKIP,SKIP))}],"hex2dec._string",[Var("h"){M(STRING,D(Int(1),Int(2)))}],Assign(Var("d"){M(INT,D(SKIP,SKIP))},Call(FuncName("base2dec","._string_int"),[Var("h"){M(STRING,D(Int(1),Int(2)))},Int(16){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))})),FunctionDec([Var("out"){M(INT,D(SKIP,SKIP))}],"base2dec._string_int",[Var("d"){M(STRING,D(Int(1),Int(2)))},Var("base"){M(INT,D(Int(1),Int(1)))}],Stats([NilExp{NoShape},Assign(Var("symbols"){M(STRING,D(Int(1),Int(36)))},String("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"){M(STRING,D(Int(1),Int(36)))}),If(UnOp(NOT,Call(FuncName("is_scalar","._int"),[Var("base"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("base2dec: cannot convert from several bases at once."){M(STRING,D(Int(1),Int(52)))}]){NoShape},If(RelOp(OR,RelOp(LT,Var("base"){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(GT,Var("base"){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[String("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"){M(STRING,D(Int(1),Int(36)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("base2dec: base must be between 2 and 36 or a string of symbols"){M(STRING,D(Int(1),Int(62)))}]){NoShape},Assign(Var("d"){M(STRING,D(Int(1),Int(2)))},Call(FuncName("toupper",".lib"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(STRING,D(Int(1),Int(2)))}))),Assign(Var("d"){M(STRING,D(Int(1),Int(2)))},Call(FuncName("strjust","._string_string"),[Var("d"){M(STRING,D(Int(1),Int(2)))},String("right"){M(STRING,D(Int(1),Int(5)))}]){M(STRING,D(Int(1),Int(2)))}),Assign(Var("table"){M(INT,D(Int(256),Int(1)))},MExpansion(Call(FuncName("ones",".lib"),[Int(256){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(256),Int(1)))},PartialBOp(MUL,NaN{M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(256),Int(1)))}),Assign(Subscript(Var("table"){M(INT,D(SKIP,SKIP))},[Call(FuncName("toascii",".lib"),[Subscript(Var("symbols"){M(STRING,D(Int(1),Int(36)))},[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("base"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("base")))}]){M(STRING,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]),Range(Int(0){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("base"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}),Assign(Subscript(Var("table"){M(INT,D(Int(1),Int(1)))},[Call(FuncName("toascii",".lib"),[String(" "){M(STRING,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]),Int(0){M(INT,D(Int(1),Int(1)))}),Assign(Var("d"){M(INT,D(SKIP,SKIP))},Call(FuncName("reshape","._matrix(_int)_matrix(_int)"),[Subscript(Var("table"){M(INT,D(Int(1),Int(1)))},[Call(FuncName("toascii",".lib"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))},Call(FuncName("size",".lib"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("out"){M(INT,D(SKIP,SKIP))},MBinOp(MUL,Var("d"){M(STRING,D(Int(1),Int(2)))},MExpansion(UnOp(CONJUGATE,Range(BinOp(MINUS,Call(FuncName("columns","._matrix(_int)"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},UMinus(Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))},PartialBOp(E_POWER,Var("base"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("nc"){M(INT,D(Int(1),Int(1)))}],"columns._matrix(_int)",[Var("x"){M(STRING,D(Int(1),Int(2)))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(STRING,D(Int(1),Int(2)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("retval"){M(INT,D(SKIP,SKIP))}],"reshape._matrix(_int)_matrix(_int)",[Var("a"){M(INT,D(SKIP,SKIP))},Var("m"){M(INT,D(Int(1),Int(2)))}],Stats([IfThen(MExpansion(Call(FuncName("prod",".lib"),[Call(FuncName("size",".lib"),[Var("m"){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(EQ,Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("n"){M(INT,D(Int(1),Int(1)))},Subscript(Var("m"){M(INT,D(Int(1),Int(2)))},[Int(2){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("m"){M(INT,D(Int(1),Int(1)))},Subscript(Var("m"){M(INT,D(Int(1),Int(2)))},[Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("nargin"){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))})])),If(RelOp(EQ,Var("nargin"){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("a"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("m"){M(INT,D(Int(1),Int(2)))},Var("n"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("retval"){M(INT,D(Var("m"),Var("n")))},Call(FuncName("zeros",".lib"),[Var("m"){M(INT,D(Int(1),Int(2)))},Var("n"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("m"),Var("n")))}),NilExp{NoShape},Assign(Subscript(Var("retval"){M(INT,D(SKIP,SKIP))},[Colon{M(INT,SKIP)}]),Var("a"){M(INT,D(SKIP,SKIP))})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){M(STRING,D(Int(1),Int(25)))}]){NoShape})]),Call(FuncName("usage",".lib"),[String("reshape (a, m, n) or reshape (a, size (b))"){M(STRING,D(Int(1),Int(42)))}]){NoShape})])),FunctionDec([Var("x"){M(STRING,D(Int(1),Int(2)))}],"strjust._string_string",[Var("x"){M(STRING,D(Int(1),Int(2)))},Var("just"){M(STRING,D(Int(1),Int(5)))}],Stats([NilExp{NoShape},NilExp{NoShape},Assign(Var("just"){M(STRING,D(Int(1),Int(5)))},Call(FuncName("tolower",".lib"),[Var("just"){M(STRING,D(Int(1),Int(5)))}]){M(STRING,D(Int(1),Int(5)))}),Assign(Var("dfi"){M(INT,D(Int(1),Int(1)))},Var("do_fortran_indexing"){M(INT,D(Int(1),Int(1)))}),UnwindProtect(Stats([Assign(Var("do_fortran_indexing"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}),Assign(Var("idx"){M(INT,D(SKIP,SKIP))},Call(FuncName("find",".lib"),[MExpansion(Call(FuncName("toascii",".lib"),[Var("x"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))},PartialROp(EQ,Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))}),IfThen(UnOp(NOT,Call(FuncName("isempty",".lib"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Subscript(Var("x"){M(STRING,D(Int(1),Int(2)))},[Var("idx"){M(INT,D(SKIP,SKIP))}]),String(" "){M(STRING,D(Int(1),Int(1)))})),AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(STRING,D(Int(1),Int(2)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("idx"){M(INT,D(Int(2),Int(1)))},RelOp(NE,UnOp(CONJUGATE,Var("x"){M(STRING,D(Int(1),Int(2)))}){M(STRING,D(Int(2),Int(1)))},String(" "){M(STRING,D(Int(1),Int(1)))}){M(INT,D(Int(2),Int(1)))}),If(Call(FuncName("strcmp","._string_string"),[Var("just"){M(STRING,D(Int(1),Int(5)))},String("right"){M(STRING,D(Int(1),Int(5)))}]){M(INT,D(Int(1),Int(1)))},Stats([AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),Assign(Var("shift"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))})]),If(Call(FuncName("strcmp","._string_string"),[Var("just"){M(STRING,D(Int(1),Int(5)))},String("left"){M(STRING,D(Int(1),Int(4)))}]){M(INT,D(Int(1),Int(1)))},Stats([AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("lo"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Call(FuncName("flipud","._matrix(_int)"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),Assign(Var("shift"){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("nc"){M(INT,D(Int(1),Int(1)))},Var("lo"){M(INT,D(Int(1),SKIP))}){M(INT,D(Int(1),Int(1)))})]),Stats([AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("lo"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Call(FuncName("flipud","._matrix(_int)"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),Assign(Var("shift"){M(INT,D(Int(1),Int(1)))},Call(FuncName("ceil",".lib"),[BinOp(MINUS,Var("nc"){M(INT,D(Int(1),Int(1)))},BinOp(DIV,BinOp(MINUS,Var("lo"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))}){M(INT,D(Int(1),SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),SKIP))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})]))),Assign(Var("idx"){M(INT,M(INT,D(Var("nr"),Var("nc"))))},Call(FuncName("rem","._matrix(_int)_int"),[If(RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Int(1){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},MBinOp(PLUS,MBinOp(MUL,Call(FuncName("ones",".lib"),[Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("nr"),Int(1)))},Matrix([[Range(Int(0){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]{M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Int(1)))},MExpansion(Call(FuncName("ones",".lib"),[Int(1){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Var("nc")))},PartialBOp(MUL,UnOp(CONJUGATE,Var("shift"){M(INT,D(Int(1),SKIP))}){M(INT,D(SKIP,Int(1)))}){M(INT,D(SKIP,Int(1)))}){M(INT,D(Int(1),Var("nc")))}){M(INT,D(Var("nr"),Var("nc")))},Call(FuncName("error",".lib"),[String("matrix operation not compliant"){M(STRING,D(Int(1),Int(30)))}]){NoShape}){M(INT,D(Var("nr"),Var("nc")))},Var("nc"){M(INT,D(Int(1),Int(1)))}]){M(INT,M(INT,D(Var("nr"),Var("nc"))))}),Assign(Var("x"){M(STRING,D(SKIP,SKIP))},Subscript(Var("x"){M(STRING,D(Int(1),Int(2)))},[MBinOp(PLUS,MExpansion(Var("idx"){M(INT,D(SKIP,SKIP))},PartialBOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},MBinOp(MUL,UnOp(CONJUGATE,Matrix([[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("nr"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("nr")))}]{M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("ones",".lib"),[Int(1){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Var("nc")))}){M(INT,D(Int(1),Var("nc")))}){M(INT,D(SKIP,SKIP))}]){M(STRING,D(SKIP,SKIP))})]),Assign(Var("do_fortran_indexing"){M(INT,D(Int(1),Int(1)))},Var("dfi"){M(INT,D(Int(1),Int(1)))}))])),FunctionDec([Var("retval"){M(INT,M(INT,D(Var("nr"),Var("nc"))))}],"rem._matrix(_int)_int",[Var("x"){M(INT,D(Var("nr"),Var("nc")))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Var("nr"),Var("nc")))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._matrix(_int)"),[Var("x"){M(INT,D(Var("nr"),Var("nc")))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[MExpansion(Var("x"){M(INT,D(Var("nr"),Var("nc")))},PartialFunc("imag",".lib"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))}]){M(INT,D(Int(1),SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,M(INT,D(Var("nr"),Var("nc"))))},MBinOp(MINUS,Var("x"){M(INT,D(Var("nr"),Var("nc")))},MExpansion(MExpansion(MExpansion(Var("x"){M(INT,D(Var("nr"),Var("nc")))},PartialBOp(E_DIV,Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))},PartialFunc("fix",".lib"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))},PartialBOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))}){M(INT,M(INT,D(Var("nr"),Var("nc"))))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._matrix(_int)",[Var("x"){M(INT,D(Var("nr"),Var("nc")))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Var("nr"),Var("nc")))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("y"){M(INT,D(SKIP,SKIP))}],"flipud._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},Assign(Var("nr"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rows","._matrix(_int)"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("y"){M(INT,D(SKIP,SKIP))},Subscript(Var("x"){M(INT,D(SKIP,SKIP))},[Range(Var("nr"){M(INT,D(Int(1),Int(1)))},UMinus(Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Colon{M(INT,SKIP)}]){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("nr"){M(INT,D(Int(1),Int(1)))}],"rows._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("y"){M(INT,D(SKIP,SKIP))}],"flipud._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},Assign(Var("nr"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rows","._matrix(_int)"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("y"){M(INT,D(SKIP,SKIP))},Subscript(Var("x"){M(INT,D(SKIP,SKIP))},[Range(Var("nr"){M(INT,D(Int(1),Int(1)))},UMinus(Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Colon{M(INT,SKIP)}]){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("nr"){M(INT,D(Int(1),Int(1)))}],"rows._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("status"){M(INT,D(Int(1),Int(1)))}],"strcmp._string_string",[Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(4)))}],Stats([NilExp{NoShape},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("r1"){M(INT,D(Int(1),Int(1)))},Var("c1"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s1"){M(STRING,D(Int(1),Int(5)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),AssignMulti([Var("r2"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s2"){M(STRING,D(Int(1),Int(4)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),IfThen(RelOp(AND,RelOp(EQ,Var("r1"){M(INT,D(Int(1),Int(1)))},Var("r2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},If(RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}),Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Call(FuncName("all",".lib"),[Call(FuncName("all",".lib"),[RelOp(EQ,Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(4)))}){M(INT,D(Int(1),Int(5)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})))])])),FunctionDec([Var("status"){M(INT,D(Int(1),Int(1)))}],"strcmp._string_string",[Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(5)))}],Stats([NilExp{NoShape},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("r1"){M(INT,D(Int(1),Int(1)))},Var("c1"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s1"){M(STRING,D(Int(1),Int(5)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),AssignMulti([Var("r2"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s2"){M(STRING,D(Int(1),Int(5)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),IfThen(RelOp(AND,RelOp(EQ,Var("r1"){M(INT,D(Int(1),Int(1)))},Var("r2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},If(RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}),Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Call(FuncName("all",".lib"),[Call(FuncName("all",".lib"),[RelOp(EQ,Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(5)))}){M(INT,D(Int(1),Int(5)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})))])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("d"){M(INT,D(SKIP,SKIP))}],"hex2dec._string",[Var("h"){M(STRING,D(Int(1),Int(2)))}],Assign(Var("d"){M(INT,D(SKIP,SKIP))},Call(FuncName("base2dec","._string_int"),[Var("h"){M(STRING,D(Int(1),Int(2)))},Int(16){M(INT,D(Int(1),Int(1)))}]){M(INT,D(SKIP,SKIP))})),FunctionDec([Var("out"){M(INT,D(SKIP,SKIP))}],"base2dec._string_int",[Var("d"){M(STRING,D(Int(1),Int(2)))},Var("base"){M(INT,D(Int(1),Int(1)))}],Stats([NilExp{NoShape},Assign(Var("symbols"){M(STRING,D(Int(1),Int(36)))},String("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"){M(STRING,D(Int(1),Int(36)))}),If(UnOp(NOT,Call(FuncName("is_scalar","._int"),[Var("base"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("base2dec: cannot convert from several bases at once."){M(STRING,D(Int(1),Int(52)))}]){NoShape},If(RelOp(OR,RelOp(LT,Var("base"){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(GT,Var("base"){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[String("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"){M(STRING,D(Int(1),Int(36)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("base2dec: base must be between 2 and 36 or a string of symbols"){M(STRING,D(Int(1),Int(62)))}]){NoShape},Assign(Var("d"){M(STRING,D(Int(1),Int(2)))},Call(FuncName("toupper",".lib"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(STRING,D(Int(1),Int(2)))}))),Assign(Var("d"){M(STRING,D(Int(1),Int(2)))},Call(FuncName("strjust","._string_string"),[Var("d"){M(STRING,D(Int(1),Int(2)))},String("right"){M(STRING,D(Int(1),Int(5)))}]){M(STRING,D(Int(1),Int(2)))}),Assign(Var("table"){M(INT,D(Int(256),Int(1)))},MExpansion(Call(FuncName("ones",".lib"),[Int(256){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(256),Int(1)))},PartialBOp(MUL,NaN{M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(256),Int(1)))}),Assign(Subscript(Var("table"){M(INT,D(SKIP,SKIP))},[Call(FuncName("toascii",".lib"),[Subscript(Var("symbols"){M(STRING,D(Int(1),Int(36)))},[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("base"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("base")))}]){M(STRING,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]),Range(Int(0){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("base"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}),Assign(Subscript(Var("table"){M(INT,D(Int(1),Int(1)))},[Call(FuncName("toascii",".lib"),[String(" "){M(STRING,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]),Int(0){M(INT,D(Int(1),Int(1)))}),Assign(Var("d"){M(INT,D(SKIP,SKIP))},Call(FuncName("reshape","._matrix(_int)_matrix(_int)"),[Subscript(Var("table"){M(INT,D(Int(1),Int(1)))},[Call(FuncName("toascii",".lib"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))},Call(FuncName("size",".lib"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))}),Assign(Var("out"){M(INT,D(SKIP,SKIP))},MBinOp(MUL,Var("d"){M(STRING,D(Int(1),Int(2)))},MExpansion(UnOp(CONJUGATE,Range(BinOp(MINUS,Call(FuncName("columns","._matrix(_int)"),[Var("d"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},UMinus(Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))},PartialBOp(E_POWER,Var("base"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("nc"){M(INT,D(Int(1),Int(1)))}],"columns._matrix(_int)",[Var("x"){M(STRING,D(Int(1),Int(2)))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(STRING,D(Int(1),Int(2)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("retval"){M(INT,D(SKIP,SKIP))}],"reshape._matrix(_int)_matrix(_int)",[Var("a"){M(INT,D(SKIP,SKIP))},Var("m"){M(INT,D(Int(1),Int(2)))}],Stats([IfThen(MExpansion(Call(FuncName("prod",".lib"),[Call(FuncName("size",".lib"),[Var("m"){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(EQ,Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("n"){M(INT,D(Int(1),Int(1)))},Subscript(Var("m"){M(INT,D(Int(1),Int(2)))},[Int(2){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("m"){M(INT,D(Int(1),Int(1)))},Subscript(Var("m"){M(INT,D(Int(1),Int(2)))},[Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("nargin"){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))})])),If(RelOp(EQ,Var("nargin"){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("a"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),If(RelOp(EQ,BinOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},BinOp(MUL,Var("m"){M(INT,D(Int(1),Int(2)))},Var("n"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("retval"){M(INT,D(Var("m"),Var("n")))},Call(FuncName("zeros",".lib"),[Var("m"){M(INT,D(Int(1),Int(2)))},Var("n"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("m"),Var("n")))}),NilExp{NoShape},Assign(Subscript(Var("retval"){M(INT,D(SKIP,SKIP))},[Colon{M(INT,SKIP)}]),Var("a"){M(INT,D(SKIP,SKIP))})]),Call(FuncName("error",".lib"),[String("reshape: sizes must match"){M(STRING,D(Int(1),Int(25)))}]){NoShape})]),Call(FuncName("usage",".lib"),[String("reshape (a, m, n) or reshape (a, size (b))"){M(STRING,D(Int(1),Int(42)))}]){NoShape})])),FunctionDec([Var("x"){M(STRING,D(Int(1),Int(2)))}],"strjust._string_string",[Var("x"){M(STRING,D(Int(1),Int(2)))},Var("just"){M(STRING,D(Int(1),Int(5)))}],Stats([NilExp{NoShape},NilExp{NoShape},Assign(Var("just"){M(STRING,D(Int(1),Int(5)))},Call(FuncName("tolower",".lib"),[Var("just"){M(STRING,D(Int(1),Int(5)))}]){M(STRING,D(Int(1),Int(5)))}),Assign(Var("dfi"){M(INT,D(Int(1),Int(1)))},Var("do_fortran_indexing"){M(INT,D(Int(1),Int(1)))}),UnwindProtect(Stats([Assign(Var("do_fortran_indexing"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}),Assign(Var("idx"){M(INT,D(SKIP,SKIP))},Call(FuncName("find",".lib"),[MExpansion(Call(FuncName("toascii",".lib"),[Var("x"){M(STRING,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(2)))},PartialROp(EQ,Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))}),IfThen(UnOp(NOT,Call(FuncName("isempty",".lib"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Subscript(Var("x"){M(STRING,D(Int(1),Int(2)))},[Var("idx"){M(INT,D(SKIP,SKIP))}]),String(" "){M(STRING,D(Int(1),Int(1)))})),AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(STRING,D(Int(1),Int(2)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("idx"){M(INT,D(Int(2),Int(1)))},RelOp(NE,UnOp(CONJUGATE,Var("x"){M(STRING,D(Int(1),Int(2)))}){M(STRING,D(Int(2),Int(1)))},String(" "){M(STRING,D(Int(1),Int(1)))}){M(INT,D(Int(2),Int(1)))}),If(Call(FuncName("strcmp","._string_string"),[Var("just"){M(STRING,D(Int(1),Int(5)))},String("right"){M(STRING,D(Int(1),Int(5)))}]){M(INT,D(Int(1),Int(1)))},Stats([AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),Assign(Var("shift"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))})]),If(Call(FuncName("strcmp","._string_string"),[Var("just"){M(STRING,D(Int(1),Int(5)))},String("left"){M(STRING,D(Int(1),Int(4)))}]){M(INT,D(Int(1),Int(1)))},Stats([AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("lo"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Call(FuncName("flipud","._matrix(_int)"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),Assign(Var("shift"){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("nc"){M(INT,D(Int(1),Int(1)))},Var("lo"){M(INT,D(Int(1),SKIP))}){M(INT,D(Int(1),Int(1)))})]),Stats([AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),AssignMulti([Var("N"){M(INT,D(Int(1),SKIP))},Var("lo"){M(INT,D(Int(1),SKIP))}],Call(FuncName("max",".lib"),[Call(FuncName("cumsum",".lib"),[Call(FuncName("flipud","._matrix(_int)"),[Var("idx"){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),SKIP)),M(INT,D(Int(1),SKIP))]}),Assign(Var("shift"){M(INT,D(Int(1),Int(1)))},Call(FuncName("ceil",".lib"),[BinOp(MINUS,Var("nc"){M(INT,D(Int(1),Int(1)))},BinOp(DIV,BinOp(MINUS,Var("lo"){M(INT,D(Int(1),SKIP))},Var("hi"){M(INT,D(Int(1),SKIP))}){M(INT,D(Int(1),SKIP))},Int(2){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),SKIP))}){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})]))),Assign(Var("idx"){M(INT,M(INT,D(Var("nr"),Var("nc"))))},Call(FuncName("rem","._matrix(_int)_int"),[If(RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Int(1){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},MBinOp(PLUS,MBinOp(MUL,Call(FuncName("ones",".lib"),[Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Var("nr"),Int(1)))},Matrix([[Range(Int(0){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]{M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Int(1)))},MExpansion(Call(FuncName("ones",".lib"),[Int(1){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Var("nc")))},PartialBOp(MUL,UnOp(CONJUGATE,Var("shift"){M(INT,D(Int(1),SKIP))}){M(INT,D(SKIP,Int(1)))}){M(INT,D(SKIP,Int(1)))}){M(INT,D(Int(1),Var("nc")))}){M(INT,D(Var("nr"),Var("nc")))},Call(FuncName("error",".lib"),[String("matrix operation not compliant"){M(STRING,D(Int(1),Int(30)))}]){NoShape}){M(INT,D(Var("nr"),Var("nc")))},Var("nc"){M(INT,D(Int(1),Int(1)))}]){M(INT,M(INT,D(Var("nr"),Var("nc"))))}),Assign(Var("x"){M(STRING,D(SKIP,SKIP))},Subscript(Var("x"){M(STRING,D(Int(1),Int(2)))},[MBinOp(PLUS,MExpansion(Var("idx"){M(INT,D(SKIP,SKIP))},PartialBOp(MUL,Var("nr"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},MBinOp(MUL,UnOp(CONJUGATE,Matrix([[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("nr"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("nr")))}]{M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("ones",".lib"),[Int(1){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Var("nc")))}){M(INT,D(Int(1),Var("nc")))}){M(INT,D(SKIP,SKIP))}]){M(STRING,D(SKIP,SKIP))})]),Assign(Var("do_fortran_indexing"){M(INT,D(Int(1),Int(1)))},Var("dfi"){M(INT,D(Int(1),Int(1)))}))])),FunctionDec([Var("retval"){M(INT,M(INT,D(Var("nr"),Var("nc"))))}],"rem._matrix(_int)_int",[Var("x"){M(INT,D(Var("nr"),Var("nc")))},Var("y"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("usage_msg"){M(STRING,D(Int(1),Int(10)))},String("rem (x, y)"){M(STRING,D(Int(1),Int(10)))}),NilExp{NoShape},IfThen(MExpansion(Call(FuncName("any",".lib"),[MRelOp(NE,Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Var("nr"),Var("nc")))}]){M(INT,D(Int(1),Int(2)))},Call(FuncName("size",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(2)))}){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))},PartialROp(AND,UnOp(NOT,RelOp(OR,Call(FuncName("is_scalar","._matrix(_int)"),[Var("x"){M(INT,D(Var("nr"),Var("nc")))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("is_scalar","._int"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: argument sizes must agree"){M(STRING,D(Int(1),Int(30)))}]){NoShape}),IfThen(MRelOp(OR,Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[MExpansion(Var("x"){M(INT,D(Var("nr"),Var("nc")))},PartialFunc("imag",".lib"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))}]){M(INT,D(Int(1),SKIP))}]){M(INT,D(Int(1),Int(1)))},Call(FuncName("any",".lib"),[Call(FuncName("any",".lib"),[Call(FuncName("imag",".lib"),[Var("y"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("rem: complex arguments are not allowed"){M(STRING,D(Int(1),Int(38)))}]){NoShape}),Assign(Var("retval"){M(INT,M(INT,D(Var("nr"),Var("nc"))))},MBinOp(MINUS,Var("x"){M(INT,D(Var("nr"),Var("nc")))},MExpansion(MExpansion(MExpansion(Var("x"){M(INT,D(Var("nr"),Var("nc")))},PartialBOp(E_DIV,Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))},PartialFunc("fix",".lib"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))},PartialBOp(E_MUL,Var("y"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Var("nr"),Var("nc")))}){M(INT,M(INT,D(Var("nr"),Var("nc"))))})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._matrix(_int)",[Var("x"){M(INT,D(Var("nr"),Var("nc")))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Var("nr"),Var("nc")))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("y"){M(INT,D(SKIP,SKIP))}],"flipud._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},Assign(Var("nr"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rows","._matrix(_int)"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("y"){M(INT,D(SKIP,SKIP))},Subscript(Var("x"){M(INT,D(SKIP,SKIP))},[Range(Var("nr"){M(INT,D(Int(1),Int(1)))},UMinus(Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Colon{M(INT,SKIP)}]){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("nr"){M(INT,D(Int(1),Int(1)))}],"rows._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("y"){M(INT,D(SKIP,SKIP))}],"flipud._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},Assign(Var("nr"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rows","._matrix(_int)"),[Var("x"){M(INT,D(SKIP,SKIP))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("y"){M(INT,D(SKIP,SKIP))},Subscript(Var("x"){M(INT,D(SKIP,SKIP))},[Range(Var("nr"){M(INT,D(Int(1),Int(1)))},UMinus(Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Colon{M(INT,SKIP)}]){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("nr"){M(INT,D(Int(1),Int(1)))}],"rows._matrix(_int)",[Var("x"){M(INT,D(SKIP,SKIP))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(SKIP,SKIP))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("status"){M(INT,D(Int(1),Int(1)))}],"strcmp._string_string",[Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(4)))}],Stats([NilExp{NoShape},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("r1"){M(INT,D(Int(1),Int(1)))},Var("c1"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s1"){M(STRING,D(Int(1),Int(5)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),AssignMulti([Var("r2"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s2"){M(STRING,D(Int(1),Int(4)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),IfThen(RelOp(AND,RelOp(EQ,Var("r1"){M(INT,D(Int(1),Int(1)))},Var("r2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},If(RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}),Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Call(FuncName("all",".lib"),[Call(FuncName("all",".lib"),[RelOp(EQ,Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(4)))}){M(INT,D(Int(1),Int(5)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})))])])),FunctionDec([Var("status"){M(INT,D(Int(1),Int(1)))}],"strcmp._string_string",[Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(5)))}],Stats([NilExp{NoShape},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("r1"){M(INT,D(Int(1),Int(1)))},Var("c1"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s1"){M(STRING,D(Int(1),Int(5)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),AssignMulti([Var("r2"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("s2"){M(STRING,D(Int(1),Int(5)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),IfThen(RelOp(AND,RelOp(EQ,Var("r1"){M(INT,D(Int(1),Int(1)))},Var("r2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Var("c2"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},If(RelOp(EQ,Var("c1"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}),Assign(Var("status"){M(INT,D(Int(1),Int(1)))},Call(FuncName("all",".lib"),[Call(FuncName("all",".lib"),[RelOp(EQ,Var("s1"){M(STRING,D(Int(1),Int(5)))},Var("s2"){M(STRING,D(Int(1),Int(5)))}){M(INT,D(Int(1),Int(5)))}]){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))})))])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("x"){M(INT,D(Int(1),Int(3)))}],"diff._matrix(_int)_int",[Var("x"){M(INT,D(Int(1),Int(3)))},Var("k"){M(INT,D(Int(1),Int(1)))}],Stats([If(UnOp(NOT,RelOp(AND,RelOp(AND,Call(FuncName("is_scalar","._int"),[Var("k"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("k"){M(INT,D(Int(1),Int(1)))},Call(FuncName("round",".lib"),[Var("k"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(GE,Var("k"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("error",".lib"),[String("diff: k must be a nonnegative integer"){M(STRING,D(Int(1),Int(37)))}]){NoShape},IfThen(RelOp(EQ,Var("k"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Return{NoShape})),If(Call(FuncName("is_vector","._matrix(_int)"),[Var("x"){M(INT,D(Int(1),Int(3)))}]){M(INT,D(Int(1),Int(1)))},Stats([Assign(Var("n"){M(INT,D(Int(1),Int(1)))},Call(FuncName("length",".lib"),[Var("x"){M(INT,D(Int(1),Int(3)))}]){M(INT,D(Int(1),Int(1)))}),If(RelOp(LE,Var("n"){M(INT,D(Int(1),Int(1)))},Var("k"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("x"){M(NIL,D(Int(0),Int(0)))},Matrix([]){M(NIL,D(Int(0),Int(0)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("k"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("k")))},Assign(Var("x"){M(NIL,D(SKIP,SKIP))},MBinOp(MINUS,Subscript(Var("x"){M(INT,D(Int(1),Int(3)))},[Range(Int(2){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,BinOp(MINUS,Var("n"){M(INT,D(Int(1),Int(1)))},Var("i"){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))}]){M(INT,D(SKIP,SKIP))},Subscript(Var("x"){M(INT,D(Int(1),Int(3)))},[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("n"){M(INT,D(Int(1),Int(1)))},Var("i"){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),BinOp(MINUS,Var("n"),Var("i"))))}]){M(INT,D(SKIP,SKIP))}){M(NIL,D(SKIP,SKIP))})))]),Stats([Assign(Var("n"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rows","._matrix(_nil)"),[Var("x"){M(INT,D(Int(1),Int(3)))}]){M(INT,D(Int(1),Int(1)))}),If(RelOp(LE,Var("n"){M(INT,D(Int(1),Int(1)))},Var("k"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("x"){M(NIL,D(Int(0),Int(0)))},Matrix([]){M(NIL,D(Int(0),Int(0)))}),For(Var("i"){M(INT,D(SKIP,SKIP))},Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Var("k"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Var("k")))},Assign(Var("x"){M(NIL,D(SKIP,SKIP))},MBinOp(MINUS,Subscript(Var("x"){M(INT,D(Int(1),Int(3)))},[Range(Int(2){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(PLUS,BinOp(MINUS,Var("n"){M(INT,D(Int(1),Int(1)))},Var("i"){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Matrix(Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))})){M(INT,D(Int(1),Int(3)))}]){M(INT,D(SKIP,SKIP))},Subscript(Var("x"){M(INT,D(Int(1),Int(3)))},[Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},BinOp(MINUS,Var("n"){M(INT,D(Int(1),Int(1)))},Var("i"){M(INT,D(SKIP,SKIP))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),BinOp(MINUS,Var("n"),Var("i"))))},Matrix(Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(3){M(INT,D(Int(1),Int(1)))})){M(INT,D(Int(1),Int(3)))}]){M(INT,D(SKIP,SKIP))}){M(NIL,D(SKIP,SKIP))})))]))])),FunctionDec([Var("nr"){M(INT,D(Int(1),Int(1)))}],"rows._matrix(_nil)",[Var("x"){M(INT,D(Int(1),Int(3)))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(3)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_vector._matrix(_int)",[Var("x"){M(INT,D(Int(1),Int(3)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(3)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(OR,RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(GE,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(GE,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("retval"){M(INT,D(Int(1),Int(1)))}],"is_scalar._int",[Var("x"){M(INT,D(Int(1),Int(1)))}],Stats([Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}),Stats([AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(1)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]}),Assign(Var("retval"){M(INT,D(Int(1),Int(1)))},RelOp(AND,RelOp(EQ,Var("nr"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},RelOp(EQ,Var("nc"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))})])])),FunctionDec([Var("nr"){M(INT,D(Int(1),Int(1)))}],"rows._matrix(_int)",[Var("x"){M(INT,D(Int(1),Int(2)))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(2)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})])),FunctionDec([Var("y"){M(INT,D(SKIP,SKIP))}],"flipud._matrix(_int)",[Var("x"){M(INT,D(Int(1),Int(2)))}],Stats([NilExp{NoShape},Assign(Var("nr"){M(INT,D(Int(1),Int(1)))},Call(FuncName("rows","._matrix(_int)"),[Var("x"){M(INT,D(Int(1),Int(2)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("y"){M(INT,D(SKIP,SKIP))},Subscript(Var("x"){M(INT,D(Int(1),Int(2)))},[Range(Var("nr"){M(INT,D(Int(1),Int(1)))},UMinus(Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}){M(INT,D(SKIP,SKIP))},Matrix(Range(Int(1){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))},Int(2){M(INT,D(Int(1),Int(1)))})){M(INT,D(Int(1),Int(2)))}]){M(INT,D(SKIP,SKIP))})])),FunctionDec([Var("nr"){M(INT,D(Int(1),Int(1)))}],"rows._matrix(_int)",[Var("x"){M(INT,D(Int(1),Int(2)))}],Stats([NilExp{NoShape},AssignMulti([Var("nr"){M(INT,D(Int(1),Int(1)))},Var("nc"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("size",".lib"),[Var("x"){M(INT,D(Int(1),Int(2)))}]){[M(INT,D(Int(1),Int(1))),M(INT,D(Int(1),Int(1)))]})]))],Stats([Call(FuncName("global_settings","."),[]){NoShape},Global("NET_PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))},Assign(Var("input_file"){M(STRING,D(Int(1),Int(1)))},Call(FuncName("fopen",".lib"),[Matrix([[Call(FuncName("getenv",".lib"),[String("MOUSE_TOP"){M(STRING,D(Int(1),Int(9)))}]){M(STRING,D(Int(1),SKIP))},String("/app/dvbt/demo_head.mpg"){M(STRING,D(Int(1),Int(23)))}]{M(STRING,D(Int(1),Int(2)))}]){M(STRING,D(Int(2),Int(1)))},String("r"){M(STRING,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))}),While(UnOp(NOT,Call(FuncName("feof",".lib"),[Var("input_file"){M(STRING,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))}){M(STRING,D(Int(1),Int(1)))},Stats([Assign(Var("data_in"){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}),AssignMulti([Var("data_in"){M(FLOAT,D(SKIP,SKIP))},Var("count"){M(INT,D(Int(1),Int(1)))}],Call(FuncName("fread",".lib"),[Var("input_file"){M(STRING,D(Int(1),Int(1)))},Var("NET_PACKET_LENGTH"){M(INT,D(Int(1),Int(1)))}]){[M(FLOAT,D(SKIP,SKIP)),M(INT,D(Int(1),Int(1)))]}),Call(FuncName("disp",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){NoShape},IfThen(RelOp(NE,Var("count"){M(INT,D(Int(1),Int(1)))},Int(0){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Stats([Call(FuncName("fprintf",".lib"),[String("reading block of length %d\n"){M(STRING,D(Int(1),Int(27)))},Var("count"){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},IfThen(RelOp(LT,Var("count"){M(INT,D(Int(1),Int(1)))},Int(187){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Assign(Var("data_in"){M(INT,D(Int(2),Int(1)))},Matrix([[Var("data_in"){M(INT,D(Int(1),Int(1)))}]{M(INT,D(Int(1),Int(1)))},[Call(FuncName("zeros",".lib"),[BinOp(MINUS,Int(187){M(INT,D(Int(1),Int(1)))},Var("count"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Int(1){M(INT,D(Int(1),Int(1)))}]){M(INT,D(BinOp(MINUS,Var("NET_PACKET_LENGTH"),Var("count")),Int(1)))}]{M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(2),Int(1)))})),Assign(Var("data_channel_in"){M(INT,D(Int(1),Int(1)))},Call(FuncName("dvbt_send","._matrix(_int)"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data_channel_out"){M(INT,D(Int(1),Int(1)))},Call(FuncName("channel_model","._matrix(_int)"),[Var("data_channel_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),Assign(Var("data_out"){M(INT,D(Int(1),Int(1)))},Call(FuncName("dvbt_receive","._matrix(_int)"),[Var("data_channel_out"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}),If(MRelOp(EQ,Var("data_in"){M(INT,D(Int(1),Int(1)))},Var("data_out"){M(INT,D(Int(1),Int(1)))}){M(INT,D(Int(1),Int(1)))},Call(FuncName("fprintf",".lib"),[String("send&receive of %d bytes successful\n"){M(STRING,D(Int(1),Int(36)))},Call(FuncName("length",".lib"),[Var("data_in"){M(INT,D(Int(1),Int(1)))}]){M(INT,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))},Stats([Call(FuncName("fprintf",".lib"),[String("**error**\n"){M(STRING,D(Int(1),Int(10)))}]){M(STRING,D(Int(1),Int(1)))},Return{NoShape}])),Call(FuncName("fprintf",".lib"),[String("\n"){M(STRING,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))}]))])),Call(FuncName("fclose",".lib"),[Var("input_file"){M(STRING,D(Int(1),Int(1)))}]){M(STRING,D(Int(1),Int(1)))}]))
