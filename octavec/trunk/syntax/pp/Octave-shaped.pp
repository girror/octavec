[  BinOp -- H[_1 KW["("] _2 KW[","] _3 KW[")"]],
   RelOp -- H[_1 KW["("] _2 KW[","] _3 KW[")"]],
   UnOp -- _1 KW["("] _2 KW[")"],
   PLUS -- KW["+"],
   MUL -- KW["*"],
   MINUS -- KW["-"],
   DIV -- KW["/"],
   LDIV -- KW["\\"],
   POWER -- KW["^"],
   E_MUL -- KW[".*"],
   E_DIV -- KW["./"],
   E_POWER -- KW[".^"],
   SE_PRE_MINUS -- KW["--"],
   SE_PRE_PLUS -- KW["++"],
   SE_POST_MINUS -- KW[".-"],
   SE_POST_PLUS -- KW[".+"],
   AND -- KW["&"],
   OR -- KW["|"],
   EQ -- KW["=="],
   NE -- KW["~="],
   LT -- KW["<"],
   GT -- KW[">"],
   LE -- KW["<="],
   GE -- KW[">="],
   NOT -- KW["~"],
   E_CONJUGATE -- KW[".'"],
   CONJUGATE -- KW["'"],
   Prog -- V[_1 V is=3[ KW["MainProg"]_2]  KW["endMainProg"]],
   Prog.1:iter-star -- V[_1],
   Program -- V[_1], 
   Program.1:iter-star -- _1,
   FunctionDec --V is=4[H[KW["function ["]_1 KW["] ="] _2 KW["("] _3 KW[")"]] _4 ]KW["end"],
   FunctionDec.1:iter-star-sep -- _1 KW[","],
   FunctionDec.3:iter-star-sep -- _1 KW[","],
   ProcDec -- KW["function"] _1 KW["("] _2 KW[")"] _3 KW["end"],
   ProcDec.2:iter-star-sep -- _1 KW[","],
   ProcDecNoArgs -- KW["function"] _1 _2 KW["end"],
   Assign -- H[_1 KW["="]  _2],
   AssignMulti -- H[KW["["] _1 KW["]"] KW["="] _2],
   AssignMulti.1:iter-star-sep -- _1 KW[","],
   If -- V is=2[H[ KW["if"] _1]  _2  KW["else"] _3] KW["endif"],
   IfThen -- V is=2[H[ KW["if"] _1]  _2 ] KW["endifthen"],
   If.3:iter-star -- _1,
   Ifs -- V is=2[KW["ifs"] _1 _2] KW["endifs"],
   Ifs.1:iter-star -- _1,
   Switch -- V is=2[H[KW["switch"] _1] _2 KW["otherwise"] _3] KW["endswitch"],
   Switch.2:iter -- _1,
   While -- V is=3[H[KW["while"] _1] _2] KW["endwhile"],
   DoWhile -- V is=3[KW["do"] _1] H[KW["while"] _2 KW["enddo"]],

   For --  V is=3[ H[KW["for"] _1 KW["="] _2] _3] KW["endfor"],
   ForSSA --  V is=3[ H[KW["for"] _1 KW["="] _2] _3] KW["endfor"],

   Break -- KW["break"],
   Continue -- KW["continue"],
   Return -- KW["return"],
   Case -- V is=2[H[KW["case"] _1] _2],
   Let -- V is=2[H[KW["let"] _1] KW["in"] _2]  KW["endlet"],

   Stats --V [ _1],
   Stats.1:iter --_1,
   Seq --V is=2[KW["{"] _1] KW["}"],
   Seq.1:iter --_1,
   Phis -- _1,
   Phis.1:iter --_1,


   UnwindProtect -- V is=2[KW["unwind_protect"] _1] 
      V is=2[KW["unwind_protect_cleanup"] _2] KW["end_unwind_protect"],
   Colon -- KW[":"] ,
   ToStat -- _1,
   Call --H[_1 KW["("]  _2 KW[")"] ],
   Call.2:iter-star-sep -- _1 KW[","] ,
   VarOrFunc -- _1,
   Global -- H[KW["global"] _1],
   FuncName --H hs=0[ _1 _2],
   Var -- _1,
   Int -- _1,
   Float -- _1,
   String -- H hs=0[KW["'"]_1KW["'"]],
   FieldVar -- _1 KW["."] _2,
   Subscript -- H[_1 KW["("] _2 KW[")"]],
   Subscript.2:iter-sep -- _1 KW[","],
   Range -- _1 KW[":"] _2 KW[":"] _3,
   Matrix -- KW["["] _1 KW["]"],
   Matrix.1:iter-sep -- _1 KW[";"],
   Not -- KW["~"] _1,
   UMinus -- KW["-"] _1,
   SE_PrePlus -- KW["++"] _1,
   SE_PreMinus -- KW["--"] _1,
   SE_PostPlus -- _1 KW["++"],
   SE_PostMinus -- _1 KW["--"],
   CPlus -- H hs=0[_1 KW["+"] _2 KW["i"]],
   CPlus.1:opt -- _1,
   CPlus.2:opt -- _1,
   CMinus -- H hs=0[_1 KW["-"] _2 KW["i"]],
   CMinus.1:opt -- _1,
   CMinus.2:opt -- _1,

   Times -- H hs=0["(" H[_1 KW["*"] _2] ")"],   
   Power -- _1 KW["^"] _2,
   Conjugate -- _1 KW["'"],
   Divide -- _1 KW["/"] _2,
   LDivide -- _1 KW["\\"] _2,
   Plus -- _1 KW["+"] _2,
   Minus -- _1 KW["-"] _2,
   ETimes -- _1 KW[".*"] _2,
   EDivide -- _1 KW["./"] _2,
   EPower -- _1 KW[".^"] _2,
   EConjugate -- _1 KW[".'"],
   ELDivide -- _1 KW[".\\"] _2,
   Eq -- _1 KW["=="] _2,
   Neq -- _1 KW["~="] _2,
   Gt -- _1 KW[">"] _2,
   Lt -- _1 KW["<"] _2,
   Geq -- _1 KW[">="] _2,
   Leq -- _1 KW["<="] _2,
   And -- _1 KW["&"] _2,
   Or -- _1 KW["|"] _2,
   NilExp -- KW["()"] ,
   MExpansion -- H hs=0[KW["("] _2 KW["->"] _1 KW[")"] ],
   MExpansion.2:iter-star-sep -- _1 KW[","],
   PartialBOp -- _1 _2,
   PartialROp -- _1 _2,
   PartialFunc -- _1 _2,
   Flip -- _1 ,
   Cast-T -- KW["cast("] _1 KW[")"], 
   MBinOp -- H[_1 KW["("] _2 KW[","] _3 KW[")"]],
   MRelOp -- H[_1 KW["("] _2 KW[","] _3 KW[")"]],
   FLOAT  -- KW["f"],
   INT  -- KW["i"],
   COMPLEX -- KW["c"],
   MATRIX -- H hs=0[KW["m("] _1 KW[")"]], 
   M  -- KW["ERROE MM"],
   D  -- KW["ERROE DD"],
   SKIP  -- KW["Error SKIP"]


]
